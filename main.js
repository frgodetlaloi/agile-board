/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AgileBoardPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian7 = require("obsidian");
var import_obsidian8 = require("obsidian");

// src/types.ts
var LogLevel = /* @__PURE__ */ ((LogLevel2) => {
  LogLevel2[LogLevel2["ERROR"] = 0] = "ERROR";
  LogLevel2[LogLevel2["WARN"] = 1] = "WARN";
  LogLevel2[LogLevel2["INFO"] = 2] = "INFO";
  LogLevel2[LogLevel2["DEBUG"] = 3] = "DEBUG";
  LogLevel2[LogLevel2["VERBOSE"] = 4] = "VERBOSE";
  return LogLevel2;
})(LogLevel || {});

// src/services/LoggerService.ts
var LoggerService = class {
  // Buffer de strings
  constructor(plugin, settings) {
    this.logBuffer = [];
    this.plugin = plugin;
    this.settings = settings;
  }
  /**
   * Met à jour les paramètres de debug
   */
  updateSettings(settings) {
    this.settings = settings;
  }
  /**
   * Ajoute un message au buffer
   */
  addToBuffer(level, message, data, source) {
    const timestamp = new Date().toISOString();
    const levelStr = LogLevel[level];
    const dataStr = data ? ` | Data: ${JSON.stringify(data)}` : "";
    const sourceStr = source ? ` | Source: ${source}` : "";
    const logEntry = `[${timestamp}] ${levelStr}: ${message}${dataStr}${sourceStr}`;
    this.logBuffer.push(logEntry);
    if (this.logBuffer.length > 1e3) {
      this.logBuffer = this.logBuffer.slice(-500);
    }
  }
  /**
   * Log d'erreur
   */
  error(message, error, source) {
    if (!this.settings.enabled || this.settings.logLevel < 0 /* ERROR */)
      return;
    this.addToBuffer(0 /* ERROR */, message, error, source);
    if (this.settings.logToConsole) {
      console.error(`\u274C [Agile-Board] ${message}`, error);
    }
  }
  /**
   * Log d'avertissement
   */
  warn(message, data, source) {
    if (!this.settings.enabled || this.settings.logLevel < 1 /* WARN */)
      return;
    this.addToBuffer(1 /* WARN */, message, data, source);
    if (this.settings.logToConsole) {
      console.warn(`\u26A0\uFE0F [Agile-Board] ${message}`, data);
    }
  }
  /**
   * Log d'information
   */
  info(message, data, source) {
    if (!this.settings.enabled || this.settings.logLevel < 2 /* INFO */)
      return;
    this.addToBuffer(2 /* INFO */, message, data, source);
    if (this.settings.logToConsole) {
      console.info(`\u2139\uFE0F [Agile-Board] ${message}`, data);
    }
  }
  /**
   * Log de debug
   */
  debug(message, data, source) {
    if (!this.settings.enabled || this.settings.logLevel < 3 /* DEBUG */)
      return;
    this.addToBuffer(3 /* DEBUG */, message, data, source);
    if (this.settings.logToConsole) {
      console.debug(`\u{1F527} [Agile-Board] ${message}`, data);
    }
  }
  /**
   * Log verbose
   */
  verbose(message, data, source) {
    if (!this.settings.enabled || this.settings.logLevel < 4 /* VERBOSE */)
      return;
    this.addToBuffer(4 /* VERBOSE */, message, data, source);
    if (this.settings.logToConsole) {
      console.debug(`\u{1F50D} [Agile-Board] ${message}`, data);
    }
  }
  /**
   * Log de démarrage (toujours affiché)
   */
  startup(message, data) {
    this.addToBuffer(2 /* INFO */, `STARTUP: ${message}`, data, "startup");
    console.log(`\u{1F680} [Agile-Board] ${message}`, data);
  }
  /**
   * Log de succès
   */
  success(message, data, source) {
    if (!this.settings.enabled || this.settings.logLevel < 2 /* INFO */)
      return;
    this.addToBuffer(2 /* INFO */, `SUCCESS: ${message}`, data, source);
    if (this.settings.logToConsole) {
      console.log(`\u2705 [Agile-Board] ${message}`, data);
    }
  }
  /**
   * Log de configuration
   */
  config(message, data) {
    if (!this.settings.enabled || this.settings.logLevel < 3 /* DEBUG */)
      return;
    this.addToBuffer(3 /* DEBUG */, `CONFIG: ${message}`, data, "config");
    if (this.settings.logToConsole) {
      console.debug(`\u2699\uFE0F [Agile-Board] ${message}`, data);
    }
  }
  /**
   * Log de navigation
   */
  navigation(message, data) {
    if (!this.settings.enabled || this.settings.logLevel < 4 /* VERBOSE */)
      return;
    this.addToBuffer(4 /* VERBOSE */, `NAV: ${message}`, data, "navigation");
    if (this.settings.logToConsole) {
      console.debug(`\u{1F9ED} [Agile-Board] ${message}`, data);
    }
  }
  /**
   * Log d'opération sur fichier
   */
  fileOperation(message, data) {
    if (!this.settings.enabled || this.settings.logLevel < 3 /* DEBUG */)
      return;
    this.addToBuffer(3 /* DEBUG */, `FILE: ${message}`, data, "file");
    if (this.settings.logToConsole) {
      console.debug(`\u{1F4C1} [Agile-Board] ${message}`, data);
    }
  }
  /**
   * Test du système de logging
   */
  testSystem() {
    this.info("Test du syst\xE8me de logging lanc\xE9");
    this.debug("Message de debug test");
    this.verbose("Message verbeux test");
    this.warn("Message d'avertissement test");
    this.error("Message d'erreur test (test uniquement)");
    this.success("Test du syst\xE8me de logging termin\xE9");
  }
  /**
   * Retourne les statistiques du logger
   */
  getStats() {
    return {
      totalLogs: this.logBuffer.length,
      // Pour un buffer de strings, on analyse le contenu pour compter par type
      errorCount: this.logBuffer.filter(
        (log) => log.includes("ERROR:") || log.includes("\u274C") || log.includes("Message d'erreur")
      ).length,
      warningCount: this.logBuffer.filter(
        (log) => log.includes("WARN:") || log.includes("\u26A0\uFE0F") || log.includes("Message d'avertissement")
      ).length,
      debugCount: this.logBuffer.filter(
        (log) => log.includes("DEBUG:") || log.includes("\u{1F527}") || log.includes("VERBOSE:") || log.includes("\u{1F50D}")
      ).length,
      lastLogTime: new Date().toISOString(),
      // Timestamp actuel
      bufferSize: this.logBuffer.length,
      isEnabled: this.settings.enabled,
      currentLevel: LogLevel[this.settings.logLevel],
      fileLoggingEnabled: this.settings.logToFile
    };
  }
  /**
   * Vide le buffer de logs
   */
  clearBuffer() {
    this.logBuffer.length = 0;
    this.debug("Buffer de logs vid\xE9");
  }
  /**
   * Retourne tout le contenu du buffer
   */
  getBuffer() {
    return [...this.logBuffer];
  }
  /**
   * Sauvegarde les logs dans un fichier
   */
  async saveLogsToFile() {
    if (!this.settings.logToFile || this.logBuffer.length === 0) {
      return;
    }
    try {
      const fileName = this.settings.logFileName || "agile-board-debug.log";
      const content = this.logBuffer.join("\n");
      const adapter = this.plugin.app.vault.adapter;
      const exists = await adapter.exists(fileName);
      if (exists) {
        const existingContent = await adapter.read(fileName);
        const newContent = existingContent + "\n" + content;
        if (newContent.length > (this.settings.maxLogFileSize || 5 * 1024 * 1024)) {
          const lines = newContent.split("\n");
          const halfLines = lines.slice(Math.floor(lines.length / 2));
          await adapter.write(fileName, halfLines.join("\n"));
        } else {
          await adapter.write(fileName, newContent);
        }
      } else {
        await adapter.write(fileName, content);
      }
      this.debug(`Logs sauvegard\xE9s dans ${fileName} (${this.logBuffer.length} entr\xE9es)`);
    } catch (error) {
      console.error("[Agile-Board] Erreur lors de la sauvegarde des logs:", error);
    }
  }
  /**
   * Formate un message de log avec horodatage et source
   */
  formatLogMessage(level, message, source) {
    const timestamp = this.settings.showTimestamps ? `[${new Date().toISOString()}] ` : "";
    const sourceStr = this.settings.showSourceLocation && source ? ` (${source})` : "";
    const levelStr = LogLevel[level];
    return `${timestamp}${levelStr}: ${message}${sourceStr}`;
  }
  /**
   * Retourne la configuration actuelle
   */
  getSettings() {
    return { ...this.settings };
  }
  /**
   * Active ou désactive le logging
   */
  setEnabled(enabled) {
    this.settings.enabled = enabled;
    this.config(`Logging ${enabled ? "activ\xE9" : "d\xE9sactiv\xE9"}`);
  }
  /**
   * Change le niveau de log
   */
  setLogLevel(level) {
    this.settings.logLevel = level;
    this.config(`Niveau de log chang\xE9 vers: ${LogLevel[level]}`);
  }
};

// src/components/SettingsTab.ts
var import_obsidian = require("obsidian");
var AgileBoardSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Agile Board - Configuration" });
    this.createDebugSection(containerEl);
    this.createGeneralSection(containerEl);
  }
  /**
   * Crée la section de configuration du debug
   */
  createDebugSection(containerEl) {
    containerEl.createEl("h2", { text: "\u{1F527} Configuration du Debug" });
    const debugDesc = containerEl.createEl("div", { cls: "setting-item-description" });
    debugDesc.innerHTML = `
            <p>Configurez le niveau de verbosit\xE9 et les options de debug du plugin.</p>
            <p><strong>Conseil :</strong> Gardez le debug <em>d\xE9sactiv\xE9</em> en usage normal pour optimiser les performances.</p>
        `;
    new import_obsidian.Setting(containerEl).setName("Activer le debug").setDesc("Active ou d\xE9sactive compl\xE8tement le syst\xE8me de debug").addToggle((toggle) => toggle.setValue(this.plugin.settings.debug.enabled).onChange(async (value) => {
      this.plugin.settings.debug.enabled = value;
      await this.plugin.saveSettings();
      new import_obsidian.Notice(`Debug ${value ? "activ\xE9" : "d\xE9sactiv\xE9"}`);
      this.display();
    }));
    if (this.plugin.settings.debug.enabled) {
      this.createDebugAdvancedOptions(containerEl);
    }
  }
  /**
   * Crée les options avancées de debug (quand activé)
   */
  createDebugAdvancedOptions(containerEl) {
    new import_obsidian.Setting(containerEl).setName("Niveau de verbosit\xE9").setDesc("Contr\xF4le la quantit\xE9 d'informations affich\xE9es dans les logs").addDropdown((dropdown) => dropdown.addOption(0 /* ERROR */.toString(), "\u274C Erreurs uniquement").addOption(1 /* WARN */.toString(), "\u26A0\uFE0F Erreurs + Avertissements").addOption(2 /* INFO */.toString(), "\u2139\uFE0F Informations importantes (recommand\xE9)").addOption(3 /* DEBUG */.toString(), "\u{1F527} Debug d\xE9taill\xE9").addOption(4 /* VERBOSE */.toString(), "\u{1F50D} Tout afficher (tr\xE8s verbeux)").setValue(this.plugin.settings.debug.logLevel.toString()).onChange(async (value) => {
      this.plugin.settings.debug.logLevel = parseInt(value);
      await this.plugin.saveSettings();
      new import_obsidian.Notice(`Niveau de debug: ${LogLevel[parseInt(value)]}`);
    }));
    new import_obsidian.Setting(containerEl).setName("Afficher les timestamps").setDesc("Ajoute l'heure pr\xE9cise \xE0 chaque message de log").addToggle((toggle) => toggle.setValue(this.plugin.settings.debug.showTimestamps).onChange(async (value) => {
      this.plugin.settings.debug.showTimestamps = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Afficher la source").setDesc("Indique le fichier source de chaque message de log").addToggle((toggle) => toggle.setValue(this.plugin.settings.debug.showSourceLocation).onChange(async (value) => {
      this.plugin.settings.debug.showSourceLocation = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Sauvegarder dans un fichier").setDesc("Enregistre automatiquement les logs dans un fichier de votre vault").addToggle((toggle) => toggle.setValue(this.plugin.settings.debug.logToFile).onChange(async (value) => {
      this.plugin.settings.debug.logToFile = value;
      await this.plugin.saveSettings();
      this.display();
    }));
    if (this.plugin.settings.debug.logToFile) {
      this.createFileLoggingOptions(containerEl);
    }
    this.createDebugActions(containerEl);
  }
  /**
   * Crée les options de sauvegarde fichier
   */
  createFileLoggingOptions(containerEl) {
    new import_obsidian.Setting(containerEl).setName("Nom du fichier de log").setDesc("Nom du fichier o\xF9 sauvegarder les logs (dans la racine du vault)").addText((text) => text.setPlaceholder("agile-board-debug.log").setValue(this.plugin.settings.debug.logFileName).onChange(async (value) => {
      this.plugin.settings.debug.logFileName = value || "agile-board-debug.log";
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Taille maximale du fichier").setDesc("Taille maximale en KB avant rotation automatique").addSlider((slider) => slider.setLimits(100, 1e4, 100).setValue(this.plugin.settings.debug.maxLogFileSize).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.debug.maxLogFileSize = value;
      await this.plugin.saveSettings();
    }));
  }
  /**
   * Crée les boutons d'action pour le debug
   */
  createDebugActions(containerEl) {
    const actionsContainer = containerEl.createDiv("debug-actions");
    actionsContainer.style.cssText = `
            margin-top: 20px;
            padding: 15px;
            background-color: var(--background-secondary);
            border-radius: 6px;
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        `;
    const testButton = actionsContainer.createEl("button", {
      text: "\u{1F9EA} Tester le syst\xE8me",
      cls: "mod-cta"
    });
    testButton.onclick = () => {
      this.plugin.logger.testSystem();
      new import_obsidian.Notice("Test de debug ex\xE9cut\xE9 - v\xE9rifiez la console (F12)", 3e3);
    };
    if (this.plugin.settings.debug.logToFile) {
      const saveButton = actionsContainer.createEl("button", {
        text: "\u{1F4BE} Sauvegarder maintenant"
      });
      saveButton.onclick = async () => {
        await this.plugin.logger.saveLogsToFile();
        new import_obsidian.Notice("Logs sauvegard\xE9s", 2e3);
      };
    }
    const statsButton = actionsContainer.createEl("button", {
      text: "\u{1F4CA} Statistiques"
    });
    statsButton.onclick = () => this.showDebugStats();
    const clearButton = actionsContainer.createEl("button", {
      text: "\u{1F5D1}\uFE0F Vider le buffer"
    });
    clearButton.onclick = () => {
      this.plugin.logger.clearBuffer();
      new import_obsidian.Notice("Buffer de logs vid\xE9", 2e3);
    };
  }
  /**
   * Affiche les statistiques de debug dans une notification
   */
  showDebugStats() {
    const stats = this.plugin.logger.getStats();
    const message = `\u{1F4CA} Statistiques de Debug:

\u2022 Statut: ${stats.isEnabled ? "\u2705 Activ\xE9" : "\u274C D\xE9sactiv\xE9"}
\u2022 Niveau: ${stats.currentLevel}
\u2022 Buffer: ${stats.bufferSize} entr\xE9es
\u2022 Fichier: ${stats.fileLoggingEnabled ? "\u2705 Activ\xE9" : "\u274C D\xE9sactiv\xE9"}`;
    new import_obsidian.Notice(message, 6e3);
  }
  /**
   * Crée la section de configuration générale
   */
  createGeneralSection(containerEl) {
    containerEl.createEl("h2", { text: "\u2699\uFE0F Param\xE8tres G\xE9n\xE9raux" });
    new import_obsidian.Setting(containerEl).setName("Cr\xE9ation automatique des sections").setDesc("Cr\xE9e automatiquement les sections manquantes lors de l'ouverture d'un board").addToggle((toggle) => toggle.setValue(this.plugin.settings.autoCreateSections).onChange(async (value) => {
      this.plugin.settings.autoCreateSections = value;
      await this.plugin.saveSettings();
      this.plugin.logger.config("Auto-cr\xE9ation sections modifi\xE9e", { enabled: value });
    }));
    const layoutDesc = containerEl.createEl("div", { cls: "setting-item-description" });
    layoutDesc.innerHTML = `
            <p><strong>Layouts disponibles:</strong> Eisenhower, Kanban, GTD, Weekly Planner, Daily Planner, Project Board, Cornell Notes, Tasks Dashboard</p>
        `;
  }
};

// src/utils/settings.ts
var DEFAULT_SETTINGS = {
  autoCreateSections: true,
  defaultLayouts: ["layout_kanban", "layout_eisenhower", "layout_gtd"],
  debug: {
    enabled: false,
    logLevel: 2 /* INFO */,
    showTimestamps: true,
    showSourceLocation: true,
    logToFile: false,
    logToConsole: true,
    // ← Ajouté
    logFileName: "agile-board-debug.log",
    maxLogFileSize: 5 * 1024 * 1024
    // 5MB
  }
};
var DEV_SETTINGS = {
  debug: {
    enabled: true,
    logLevel: 4 /* VERBOSE */,
    showTimestamps: true,
    showSourceLocation: true,
    logToFile: false,
    logToConsole: true,
    // ← Ajouté
    logFileName: "agile-board-debug.log",
    maxLogFileSize: 5 * 1024 * 1024
  }
};
var PROD_WITH_LOGS_SETTINGS = {
  debug: {
    enabled: true,
    logLevel: 3 /* DEBUG */,
    showTimestamps: true,
    showSourceLocation: true,
    logToFile: true,
    logToConsole: false,
    // ← Ajouté (false pour la production)
    logFileName: "agile-board-debug.log",
    maxLogFileSize: 5 * 1024 * 1024
  }
};

// src/constants/layouts.ts
var BUILT_IN_LAYOUTS = {
  // ===========================================================================
  // SECTION 1 : LAYOUTS DE PRODUCTIVITÉ ET PRIORISATION
  // ===========================================================================
  /**
   * MATRICE D'EISENHOWER - Système de priorisation présidentiel
   * 
   * MÉTHODOLOGIE :
   * Créée par le président Dwight D. Eisenhower, cette matrice classe
   * les tâches selon deux axes orthogonaux : Urgent vs Important.
   * 
   * PHILOSOPHIE :
   * "Ce qui est important est rarement urgent et ce qui est urgent 
   * est rarement important." - Eisenhower
   * 
   * QUADRANTS :
   * 1. Urgent ET Important (Q1) → FAIRE immédiatement
   * 2. Important mais PAS Urgent (Q2) → PLANIFIER (zone optimale)
   * 3. Urgent mais PAS Important (Q3) → DÉLÉGUER
   * 4. NI Urgent NI Important (Q4) → ÉLIMINER
   * 
   * DIAGRAMME VISUEL :
   * ┌─────────────────┬─────────────────┐
   * │ URGENT ET       │ PAS URGENT      │
   * │ IMPORTANT       │ MAIS IMPORTANT  │
   * │ ⚡ DO NOW ⚡    │ 📅 SCHEDULE 📅  │
   * │ (Crises,        │ (Planification, │
   * │  Urgences)      │  Prévention)    │
   * ├─────────────────┼─────────────────┤
   * │ URGENT MAIS     │ NI URGENT       │
   * │ PAS IMPORTANT   │ NI IMPORTANT    │
   * │ 👥 DELEGATE 👥  │ 🗑️ DELETE 🗑️   │
   * │ (Interruptions, │ (Distractions,  │
   * │  Certains mails)│  Réseaux soc.)  │
   * └─────────────────┴─────────────────┘
   * 
   * GRILLE TECHNIQUE : 4 quadrants de 12×12 chacun
   * CAS D'USAGE : Gestion quotidienne, décisions stratégiques, leadership
   */
  layout_eisenhower: [
    {
      title: "Urgent et Important",
      x: 0,
      y: 0,
      w: 12,
      h: 12
      // Quadrant Q1 : Actions immédiates, gestion de crise
    },
    {
      title: "Pas urgent mais Important",
      x: 12,
      y: 0,
      w: 12,
      h: 12
      // Quadrant Q2 : Zone optimale de productivité, planification
    },
    {
      title: "Urgent mais Pas important",
      x: 0,
      y: 12,
      w: 12,
      h: 12
      // Quadrant Q3 : Candidats à la délégation
    },
    {
      title: "Ni urgent ni important",
      x: 12,
      y: 12,
      w: 12,
      h: 12
      // Quadrant Q4 : Activités à éliminer ou réduire
    }
  ],
  /**
   * GETTING THINGS DONE (GTD) - Méthode David Allen
   * 
   * MÉTHODOLOGIE :
   * Système complet de productivité développé par David Allen.
   * Basé sur l'externalisation de la mémoire et la clarification systématique.
   * 
   * PRINCIPE CENTRAL :
   * "Votre esprit est fait pour avoir des idées, pas pour les retenir."
   * 
   * FLUX GTD :
   * CAPTURER → CLARIFIER → ORGANISER → RÉVISER → FAIRE
   * 
   * ZONES FONCTIONNELLES :
   * 1. Inbox : Capture de tout ce qui arrive
   * 2. Actions suivantes : Tâches concrètes et faisables
   * 3. En attente : Délégué ou dépendant d'autres
   * 4. Projets : Résultats nécessitant plusieurs actions
   * 5. Someday/Maybe : Idées pour le futur
   * 6. Référence : Informations à conserver
   * 
   * DIAGRAMME VISUEL :
   * ┌──────────────┬──────────────┐
   * │   📥 INBOX   │ ➡️ ACTIONS   │
   * │              │   SUIVANTES  │
   * │ (Collecte    │ (Prochaines  │
   * │  rapide)     │  tâches)     │
   * ├──────┬───────┼──────┬───────┤
   * │⏳ EN │📋 PROJ│🤔 SM │       │
   * │ATTEN.│   ETS │  /M  │       │
   * ├──────┴───────┴──────┴───────┤
   * │      📚 RÉFÉRENCE           │
   * │   (Documentation,           │
   * │    informations)            │
   * └─────────────────────────────┘
   * 
   * GRILLE TECHNIQUE : Optimisée pour le flux GTD
   * CAS D'USAGE : Productivité personnelle, gestion complète des tâches
   */
  layout_gtd: [
    {
      title: "Inbox",
      x: 0,
      y: 0,
      w: 12,
      h: 8
      // Zone de capture : tout ce qui arrive sans traitement
    },
    {
      title: "Actions suivantes",
      x: 12,
      y: 0,
      w: 12,
      h: 8
      // Tâches clarifiées et prêtes à être exécutées
    },
    {
      title: "En attente",
      x: 0,
      y: 8,
      w: 8,
      h: 8
      // Délégué ou en attente de quelqu'un/quelque chose d'autre
    },
    {
      title: "Projets",
      x: 8,
      y: 8,
      w: 8,
      h: 8
      // Résultats désirés nécessitant plus d'une action
    },
    {
      title: "Someday Maybe",
      x: 16,
      y: 8,
      w: 8,
      h: 8
      // Idées intéressantes pour plus tard
    },
    {
      title: "R\xE9f\xE9rence",
      x: 0,
      y: 16,
      w: 24,
      h: 8
      // Informations utiles à conserver pour consultation
    }
  ],
  // ===========================================================================
  // SECTION 2 : LAYOUTS DE FLUX DE TRAVAIL (WORKFLOW)
  // ===========================================================================
  /**
   * TABLEAU KANBAN CLASSIQUE - Visualisation du flux de travail
   * 
   * MÉTHODOLOGIE :
   * Originaire du système de production Toyota, adapté au travail intellectuel.
   * Principe : visualiser le travail, limiter le travail en cours (WIP).
   * 
   * PHILOSOPHIE :
   * Flux tiré (pull) plutôt que poussé (push).
   * Optimisation du débit global plutôt que de l'efficacité locale.
   * 
   * COLONNES STANDARD :
   * 1. À faire (Backlog) : Tâches en attente
   * 2. En cours (Doing/WIP) : Travail actuel (limité)
   * 3. Terminé (Done) : Travail complété
   * 
   * DIAGRAMME VISUEL :
   * ┌────────────┬────────────┬────────────┐
   * │            │            │            │
   * │  📋 À      │  ⚙️ EN     │  ✅ TERMI- │
   * │   FAIRE    │   COURS    │    NÉ      │
   * │            │            │            │
   * │ • Tâche A  │ • Tâche X  │ • Tâche 1  │
   * │ • Tâche B  │ • Tâche Y  │ • Tâche 2  │
   * │ • Tâche C  │            │ • Tâche 3  │
   * │ • ...      │ [WIP: 2]   │ • ...      │
   * │            │            │            │
   * └────────────┴────────────┴────────────┘
   * 
   * GRILLE TECHNIQUE : 3 colonnes égales sur toute la hauteur
   * CAS D'USAGE : Développement logiciel, gestion d'équipe, projets itératifs
   */
  layout_kanban: [
    {
      title: "\xC0 faire",
      x: 0,
      y: 0,
      w: 8,
      h: 24
      // Backlog : tâches priorisées en attente
    },
    {
      title: "En cours",
      x: 8,
      y: 0,
      w: 8,
      h: 24
      // Work In Progress : limite recommandée selon l'équipe
    },
    {
      title: "Termin\xE9",
      x: 16,
      y: 0,
      w: 8,
      h: 24
      // Done : validation et archivage des tâches complétées
    }
  ],
  // ===========================================================================
  // SECTION 3 : LAYOUTS DE PLANIFICATION TEMPORELLE
  // ===========================================================================
  /**
   * PLANIFICATEUR HEBDOMADAIRE - Organisation par jour de la semaine
   * 
   * MÉTHODOLOGIE :
   * Planification cyclique basée sur la semaine de travail standard.
   * Équilibre entre productivité professionnelle et bien-être personnel.
   * 
   * PHILOSOPHIE :
   * Rythme hebdomadaire naturel avec distinction travail/repos.
   * Vision d'ensemble pour une planification équilibrée.
   * 
   * ORGANISATION :
   * - 5 jours de travail avec sections dédiées
   * - Weekend groupé pour activités personnelles
   * - Zone de notes pour observations et réflexions
   * 
   * DIAGRAMME VISUEL :
   * ┌─────┬─────┬─────┬─────┐
   * │ LUN │ MAR │ MER │ JEU │
   * │     │     │     │     │
   * │ 📅  │ 📅  │ 📅  │ 📅  │
   * │     │     │     │     │
   * ├─────┼─────┼─────┴─────┤
   * │ VEN │ W-E │   📝      │
   * │     │ 🏖️  │   NOTES   │
   * │ 📅  │     │           │
   * │     │     │           │
   * └─────┴─────┴───────────┘
   * 
   * GRILLE TECHNIQUE : Layout asymétrique optimisé
   * CAS D'USAGE : Planning personnel, coordination d'équipe, revues hebdomadaires
   */
  layout_weekly: [
    {
      title: "Lundi",
      x: 0,
      y: 0,
      w: 6,
      h: 12
      // Démarrage de semaine, objectifs et planification
    },
    {
      title: "Mardi",
      x: 6,
      y: 0,
      w: 6,
      h: 12
      // Productivité optimale, tâches importantes
    },
    {
      title: "Mercredi",
      x: 12,
      y: 0,
      w: 6,
      h: 12
      // Milieu de semaine, ajustements et révisions
    },
    {
      title: "Jeudi",
      x: 18,
      y: 0,
      w: 6,
      h: 12
      // Finalisation des livrables de la semaine
    },
    {
      title: "Vendredi",
      x: 0,
      y: 12,
      w: 8,
      h: 12
      // Clôture, bilans et préparation semaine suivante
    },
    {
      title: "Weekend",
      x: 8,
      y: 12,
      w: 8,
      h: 12
      // Repos, activités personnelles, famille, loisirs
    },
    {
      title: "Notes",
      x: 16,
      y: 12,
      w: 8,
      h: 12
      // Observations, idées, réflexions et apprentissages
    }
  ],
  /**
   * PLANIFICATEUR QUOTIDIEN - Structure détaillée d'une journée
   * 
   * MÉTHODOLOGIE :
   * Organisation méticuleuse d'une journée avec focus sur l'apprentissage
   * et la réflexion. Inspiré des méthodes de développement personnel.
   * 
   * PHILOSOPHIE :
   * Journée intentionnelle avec boucle d'amélioration continue.
   * Équilibre entre action et réflexion.
   * 
   * STRUCTURE :
   * - Objectifs clairs et limités (max 3)
   * - Tâches prioritaires identifiées
   * - Planning temporel structuré
   * - Capture d'apprentissages
   * - Réflexion et bilan de fin de journée
   * 
   * DIAGRAMME VISUEL :
   * ┌─────────────┬─────────────┐
   * │ 🎯 OBJECTIFS│ ⭐ PRIORITÉS │
   * │   DU JOUR   │             │
   * │             │             │
   * ├─────┬───────┼─────┬───────┤
   * │📅PLA│📝 NOT│📚APP│💭 RÉF │
   * │NING │   ES │RENT.│  LEX. │
   * │     │      │     │       │
   * ├─────┴──────┴─────┴───────┤
   * │      💡 RÉFLEXIONS       │
   * │     ET BILAN QUOTIDIEN   │
   * └─────────────────────────┘
   * 
   * GRILLE TECHNIQUE : 6 sections pour journée structurée
   * CAS D'USAGE : Développement personnel, productivité quotidienne
   */
  layout_daily: [
    {
      title: "Objectifs du jour",
      x: 0,
      y: 0,
      w: 12,
      h: 8
      // Maximum 3 objectifs SMART pour la journée
    },
    {
      title: "T\xE2ches prioritaires",
      x: 12,
      y: 0,
      w: 12,
      h: 8
      // Actions importantes qui font avancer les objectifs
    },
    {
      title: "Planning",
      x: 0,
      y: 8,
      w: 8,
      h: 8
      // Emploi du temps, rendez-vous, créneaux de travail
    },
    {
      title: "Notes",
      x: 8,
      y: 8,
      w: 8,
      h: 8
      // Capture rapide d'idées, observations, informations
    },
    {
      title: "Apprentissages",
      x: 16,
      y: 8,
      w: 8,
      h: 8
      // Ce que j'ai appris aujourd'hui (compétences, insights)
    },
    {
      title: "R\xE9flexions",
      x: 0,
      y: 16,
      w: 24,
      h: 8
      // Bilan de journée, points d'amélioration, gratitude
    }
  ],
  // ===========================================================================
  // SECTION 4 : LAYOUTS DE GESTION DE PROJET
  // ===========================================================================
  /**
   * GESTION DE PROJET COMPLÈTE - Vue d'ensemble projet
   * 
   * MÉTHODOLOGIE :
   * Approche holistique de la gestion de projet intégrant tous les aspects
   * essentiels. Inspiré des méthodologies PMI et Agile.
   * 
   * PHILOSOPHIE :
   * Vision systémique du projet avec équilibre entre planification
   * et adaptabilité.
   * 
   * COMPOSANTS :
   * - Vue d'ensemble : Contexte et vision globale
   * - Objectifs : Résultats mesurables attendus
   * - Étapes : Jalons et phases du projet
   * - Ressources : Équipe, budget, outils
   * - Risques : Identification et mitigation
   * - Suivi : Métriques et progression
   * 
   * DIAGRAMME VISUEL :
   * ┌─────────────────────────────────┐
   * │       🎯 VUE D'ENSEMBLE         │
   * │    (Vision, contexte, enjeux)   │
   * ├───────────┬───────────┬─────────┤
   * │📋 OBJECTI │🚀 ÉTAPES  │💼 RESSO-│
   * │   FS      │           │   URCES │
   * │           │           │         │
   * ├───────────┴─────┬─────┴─────────┤
   * │  ⚠️ RISQUES     │ 📊 SUIVI     │
   * │                 │               │
   * └─────────────────┴───────────────┘
   * 
   * GRILLE TECHNIQUE : Vue hiérarchique avec header
   * CAS D'USAGE : Gestion de projet, initiatives stratégiques, lancements
   */
  layout_project: [
    {
      title: "Vue d'ensemble",
      x: 0,
      y: 0,
      w: 24,
      h: 6
      // Contexte, vision, objectifs généraux, parties prenantes
    },
    {
      title: "Objectifs",
      x: 0,
      y: 6,
      w: 8,
      h: 9
      // Objectifs SMART, critères de succès, KPIs
    },
    {
      title: "\xC9tapes",
      x: 8,
      y: 6,
      w: 8,
      h: 9
      // Jalons, phases, roadmap, planning général
    },
    {
      title: "Ressources",
      x: 16,
      y: 6,
      w: 8,
      h: 9
      // Équipe, budget, outils, compétences nécessaires
    },
    {
      title: "Risques",
      x: 0,
      y: 15,
      w: 12,
      h: 9
      // Identification, évaluation, plans de mitigation
    },
    {
      title: "Suivi",
      x: 12,
      y: 15,
      w: 12,
      h: 9
      // Métriques, avancement, reporting, ajustements
    }
  ],
  // ===========================================================================
  // SECTION 5 : LAYOUTS BASIQUES ET POLYVALENTS
  // ===========================================================================
  /**
   * BOARD SIMPLE - Approche minimaliste 2 colonnes
   * 
   * MÉTHODOLOGIE :
   * Simplicité volontaire pour démarrage rapide ou usages non-spécialisés.
   * Basé sur la dichotomie pensée/action.
   * 
   * PHILOSOPHIE :
   * "La simplicité est la sophistication suprême" - Leonardo da Vinci
   * Parfait pour débuter ou pour des besoins basiques.
   * 
   * APPLICATIONS :
   * - Brainstorming : Idées → Actions
   * - Comparaison : Pour → Contre
   * - Processus : Input → Output
   * - Planning : Cette semaine → Semaine prochaine
   * 
   * DIAGRAMME VISUEL :
   * ┌─────────────┬─────────────┐
   * │             │             │
   * │   💡 IDEAS  │ ⚡ ACTIONS  │
   * │             │             │
   * │             │             │
   * │             │             │
   * │             │             │
   * │             │             │
   * │             │             │
   * └─────────────┴─────────────┘
   * 
   * GRILLE TECHNIQUE : 2 colonnes égales, simplicité maximale
   * CAS D'USAGE : Brainstorming, comparaisons, projets simples, démarrage
   */
  layout_simple: [
    {
      title: "Ideas",
      x: 0,
      y: 0,
      w: 12,
      h: 24
      // Idées, concepts, possibilités, réflexions
    },
    {
      title: "Actions",
      x: 12,
      y: 0,
      w: 12,
      h: 24
      // Actions concrètes, tâches, étapes suivantes
    }
  ],
  // ===========================================================================
  // SECTION 6 : LAYOUTS DE PRISE DE NOTES
  // ===========================================================================
  /**
   * NOTES CORNELL - Système de prise de notes universitaire
   * 
   * MÉTHODOLOGIE :
   * Développé à l'université Cornell par Walter Pauk dans les années 1950.
   * Optimise la prise de notes, la révision et la mémorisation.
   * 
   * PHILOSOPHIE :
   * Structure prédéfinie qui force l'organisation et la synthèse.
   * Séparation claire entre capture, analyse et mémorisation.
   * 
   * ZONES FONCTIONNELLES :
   * 1. Notes principales : Capture du contenu principal
   * 2. Mots-clés/Questions : Indices de révision et concepts clés
   * 3. Résumé : Synthèse personnelle et points clés
   * 
   * PROCESSUS :
   * PENDANT → Prendre des notes dans la zone principale
   * APRÈS → Ajouter mots-clés et questions dans la marge
   * RÉVISION → Utiliser les mots-clés pour réviser
   * SYNTHÈSE → Écrire un résumé personnel
   * 
   * DIAGRAMME VISUEL :
   * ┌────────────────────┬───────┐
   * │                    │       │
   * │     📝 NOTES       │ 🏷️    │
   * │   (Contenu         │ MOTS- │
   * │    principal)      │ CLÉS  │
   * │                    │       │
   * │                    │       │
   * ├────────────────────┴───────┤
   * │      📋 RÉSUMÉ             │
   * │   (Synthèse personnelle)   │
   * └────────────────────────────┘
   * 
   * GRILLE TECHNIQUE : Zone principale + marge + footer
   * CAS D'USAGE : Cours, conférences, lectures, formations
   */
  layout_cornell: [
    {
      title: "Notes",
      x: 0,
      y: 0,
      w: 16,
      h: 18
      // Zone principale de prise de notes pendant l'écoute
    },
    {
      title: "Mots-cl\xE9s",
      x: 16,
      y: 0,
      w: 8,
      h: 18
      // Marge pour concepts clés, questions, indices de révision
    },
    {
      title: "R\xE9sum\xE9",
      x: 0,
      y: 18,
      w: 24,
      h: 6
      // Synthèse personnelle en fin de session
    }
  ],
  // ===========================================================================
  // SECTION 7 : LAYOUTS D'INTÉGRATION AVEC PLUGINS OBSIDIAN
  // ===========================================================================
  /**
   * DASHBOARD TASKS - Intégration avancée avec le plugin Tasks
   * 
   * MÉTHODOLOGIE :
   * Optimisé pour exploiter les capacités du plugin Tasks d'Obsidian.
   * Affichage intelligent des tâches par contexte temporel et projet.
   * 
   * PHILOSOPHIE :
   * Centralisation et contextualisation des tâches pour une vision
   * d'ensemble de la charge de travail.
   * 
   * ZONES TEMPORELLES :
   * - Aujourd'hui : Focus sur l'immédiat
   * - Cette semaine : Vision à court terme
   * - En retard : Gestion des dépassements
   * - Projets actifs : Vision organisationnelle
   * - Statistiques : Métriques et tendances
   * 
   * REQUÊTES TASKS INTÉGRÉES :
   * Utilise la syntaxe du plugin Tasks pour des requêtes dynamiques.
   * 
   * DIAGRAMME VISUEL :
   * ┌─────────┬─────────┬─────────┐
   * │ 📅 AUJ. │📅 SEMN │⚠️ RETARD│
   * │         │         │         │
   * │ tasks   │ tasks   │ tasks   │
   * │ due     │ due     │ due     │
   * │ today   │ this    │ before  │
   * │         │ week    │ today   │
   * ├─────────┴─────────┼─────────┤
   * │  📊 PROJETS       │📈 STATS │
   * │    ACTIFS         │         │
   * │ (par projet)      │(métriq.)│
   * └───────────────────┴─────────┘
   * 
   * REQUÊTES TASKS SUGGÉRÉES :
   * - Aujourd'hui : ```tasks due today not done```
   * - Cette semaine : ```tasks due this week not done```
   * - En retard : ```tasks due before today not done```
   * - Par projet : ```tasks group by project```
   * 
   * GRILLE TECHNIQUE : Vue temporelle + organisation + analytics
   * CAS D'USAGE : Gestion avancée des tâches, productivité, suivi projets
   */
  layout_tasks_dashboard: [
    {
      title: "T\xE2ches du jour",
      x: 0,
      y: 0,
      w: 8,
      h: 12
      // ```tasks due today not done```
    },
    {
      title: "Cette semaine",
      x: 8,
      y: 0,
      w: 8,
      h: 12
      // ```tasks due this week not done```
    },
    {
      title: "En retard",
      x: 16,
      y: 0,
      w: 8,
      h: 12
      // ```tasks due before today not done```
    },
    {
      title: "Projets actifs",
      x: 0,
      y: 12,
      w: 12,
      h: 12
      // ```tasks group by project``` ou organisation manuelle
    },
    {
      title: "Statistiques",
      x: 12,
      y: 12,
      w: 12,
      h: 12
      // Métriques, tendances, analyse de productivité
    }
  ]
};
var LAYOUT_INFO = {
  layout_eisenhower: {
    name: "layout_eisenhower",
    displayName: "Matrice d'Eisenhower",
    description: "Syst\xE8me de priorisation bas\xE9 sur l'urgence et l'importance. Parfait pour la gestion quotidienne et les d\xE9cisions strat\xE9giques.",
    sections: ["Urgent et Important", "Pas urgent mais Important", "Urgent mais Pas important", "Ni urgent ni important"],
    blockCount: 4,
    category: "productivit\xE9"
  },
  layout_gtd: {
    name: "layout_gtd",
    displayName: "Getting Things Done (GTD)",
    description: "M\xE9thode compl\xE8te de productivit\xE9 de David Allen. Syst\xE8me d'externalisation de la m\xE9moire et de clarification syst\xE9matique.",
    sections: ["Inbox", "Actions suivantes", "En attente", "Projets", "Someday Maybe", "R\xE9f\xE9rence"],
    blockCount: 6,
    category: "productivit\xE9"
  },
  layout_kanban: {
    name: "layout_kanban",
    displayName: "Tableau Kanban",
    description: "Visualisation du flux de travail avec limitation du travail en cours. Id\xE9al pour le d\xE9veloppement et la gestion d'\xE9quipe.",
    sections: ["\xC0 faire", "En cours", "Termin\xE9"],
    blockCount: 3,
    category: "workflow"
  },
  layout_weekly: {
    name: "layout_weekly",
    displayName: "Planificateur Hebdomadaire",
    description: "Organisation par jour de la semaine avec \xE9quilibre travail/repos. Parfait pour la planification personnelle et la coordination d'\xE9quipe.",
    sections: ["Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Weekend", "Notes"],
    blockCount: 7,
    category: "planification"
  },
  layout_daily: {
    name: "layout_daily",
    displayName: "Planificateur Quotidien",
    description: "Structure d\xE9taill\xE9e d'une journ\xE9e avec focus sur l'apprentissage et la r\xE9flexion. Id\xE9al pour le d\xE9veloppement personnel.",
    sections: ["Objectifs du jour", "T\xE2ches prioritaires", "Planning", "Notes", "Apprentissages", "R\xE9flexions"],
    blockCount: 6,
    category: "planification"
  },
  layout_project: {
    name: "layout_project",
    displayName: "Gestion de Projet",
    description: "Vue d'ensemble compl\xE8te d'un projet avec tous les aspects essentiels. Inspir\xE9 des m\xE9thodologies PMI et Agile.",
    sections: ["Vue d'ensemble", "Objectifs", "\xC9tapes", "Ressources", "Risques", "Suivi"],
    blockCount: 6,
    category: "projet"
  },
  layout_simple: {
    name: "layout_simple",
    displayName: "Board Simple",
    description: "Approche minimaliste \xE0 2 colonnes. Parfait pour d\xE9buter ou pour des besoins basiques de brainstorming et comparaison.",
    sections: ["Ideas", "Actions"],
    blockCount: 2,
    category: "basique"
  },
  layout_cornell: {
    name: "layout_cornell",
    displayName: "Notes Cornell",
    description: "Syst\xE8me de prise de notes universitaire optimisant la capture, r\xE9vision et m\xE9morisation. D\xE9velopp\xE9 \xE0 Cornell University.",
    sections: ["Notes", "Mots-cl\xE9s", "R\xE9sum\xE9"],
    blockCount: 3,
    category: "notes"
  },
  layout_tasks_dashboard: {
    name: "layout_tasks_dashboard",
    displayName: "Dashboard Tasks",
    description: "Int\xE9gration avanc\xE9e avec le plugin Tasks d'Obsidian. Affichage intelligent des t\xE2ches par contexte temporel et projet.",
    sections: ["T\xE2ches du jour", "Cette semaine", "En retard", "Projets actifs", "Statistiques"],
    blockCount: 5,
    category: "int\xE9gration"
  }
};

// src/services/LayoutService.ts
var LayoutService = class {
  /**
   * CONSTRUCTEUR avec injection de dépendance
   * 
   * @param plugin - Instance du plugin principal
   * 
   * INJECTION DE DÉPENDANCE :
   * Le plugin est injecté pour potentiel accès futur à :
   * - Configuration utilisateur
   * - Système de logs
   * - Événements du plugin
   * 
   * MODIFICATEUR private :
   * Le plugin est stocké pour usage interne uniquement
   */
  constructor(plugin) {
    this.plugin = plugin;
    /**
     * Stockage interne des layouts validés
     * 
     * CHOIX DE STRUCTURE DE DONNÉES :
     * Map vs Object :
     * - Map : accès O(1), iteration garantie, clés dynamiques
     * - Object : plus de syntaxe, risque de pollution du prototype
     * 
     * GÉNÉRICS TYPESCRIPT :
     * Map<K, V> indique les types de clé et valeur
     * - K = string (nom du layout)
     * - V = BoardLayout[] (array de blocs)
     */
    this.models = /* @__PURE__ */ new Map();
  }
  // ===========================================================================
  // MÉTHODES DE CHARGEMENT ET INITIALISATION
  // ===========================================================================
  /**
   * Charge et valide tous les layouts intégrés
   * 
   * PROCESSUS DE CHARGEMENT :
   * 1. Vider le cache existant
   * 2. Itérer sur tous les layouts prédéfinis
   * 3. Valider chaque layout géométriquement
   * 4. Stocker les layouts valides
   * 5. Rejeter les layouts invalides avec warning
   * 6. Logger le résumé du chargement
   * 
   * GESTION D'ERREURS :
   * Les layouts invalides sont ignorés mais loggés.
   * Le plugin continue de fonctionner avec les layouts valides.
   * 
   * VALIDATION GÉOMÉTRIQUE :
   * - Vérification des limites de grille
   * - Détection des chevauchements
   * - Validation des types de données
   * 
   * @example
   * layoutService.load();
   * // Log: "📐 3 layouts chargés"
   * // Log: "📋 Layouts disponibles: layout_eisenhower, layout_kanban, ..."
   */
  load() {
    console.log("\u{1F4D0} Chargement des layouts int\xE9gr\xE9s...");
    this.models.clear();
    let loadedCount = 0;
    for (const [name, layout] of Object.entries(BUILT_IN_LAYOUTS)) {
      console.log(`\u{1F50D} Chargement du layout "${name}"...`);
      if (this.validateModel(name, layout)) {
        this.models.set(name, layout);
        loadedCount++;
        console.log(`\u2705 Layout "${name}" charg\xE9 (${layout.length} blocs)`);
      } else {
        console.warn(`\u274C Mod\xE8le "${name}" invalide`);
      }
    }
    console.log(`\u{1F4D0} ${loadedCount} layouts charg\xE9s`);
    this.logAvailableLayouts();
  }
  /**
   * Valide complètement un layout (géométrie + cohérence)
   * 
   * VALIDATION EN PLUSIEURS ÉTAPES :
   * 1. Validation individuelle de chaque bloc
   * 2. Vérification des limites de grille
   * 3. Détection des chevauchements
   * 4. Création d'une grille de test pour simulation
   * 
   * ALGORITHME DE CHEVAUCHEMENT :
   * - Créer une grille booléenne 24×100
   * - Pour chaque bloc, marquer ses cellules
   * - Si une cellule est déjà marquée = chevauchement
   * 
   * @param name - Nom du layout (pour les logs d'erreur)
   * @param layout - Array de blocs à valider
   * @returns boolean - true si le layout est entièrement valide
   * 
   * @example
   * const isValid = layoutService.validateModel("test", [
   *   { title: "Block 1", x: 0, y: 0, w: 12, h: 12 },
   *   { title: "Block 2", x: 12, y: 0, w: 12, h: 12 }
   * ]);
   * // true si pas de chevauchement, false sinon
   */
  validateModel(name, layout) {
    const grid = Array.from({ length: 24 }, () => Array(100).fill(false));
    let isValid = true;
    for (const block of layout) {
      if (!this.isValidBlock(block)) {
        console.warn(`\u274C [${name}] Bloc invalide :`, block);
        isValid = false;
        continue;
      }
      if (!this.isBlockInBounds(block)) {
        console.warn(`\u274C [${name}] Bloc hors limites :`, block);
        isValid = false;
        continue;
      }
      if (!this.checkOverlap(grid, block, name)) {
        isValid = false;
      }
    }
    return isValid;
  }
  /**
   * Vérifie qu'un objet a la structure d'un BoardLayout valide
   * 
   * TYPE GUARD TYPESCRIPT :
   * Cette fonction est un "type guard" qui vérifie à l'exécution
   * qu'un objet correspond à l'interface BoardLayout.
   * 
   * VÉRIFICATIONS :
   * - Présence de toutes les propriétés requises
   * - Types corrects (string pour title, number pour les autres)
   * - Pas de vérification des valeurs (fait dans isBlockInBounds)
   * 
   * @param block - Objet à vérifier (type any pour flexibilité)
   * @returns block is BoardLayout - Type guard TypeScript
   * 
   * @example
   * const obj = { title: "Test", x: 0, y: 0, w: 5, h: 5 };
   * if (isValidBlock(obj)) {
   *   // TypeScript sait maintenant que obj est un BoardLayout
   *   console.log(obj.title); // Pas d'erreur TypeScript
   * }
   */
  isValidBlock(block) {
    return typeof block.title === "string" && // Titre doit être une chaîne
    typeof block.x === "number" && // Position X doit être un nombre
    typeof block.y === "number" && // Position Y doit être un nombre
    typeof block.w === "number" && // Largeur doit être un nombre
    typeof block.h === "number";
  }
  /**
   * Vérifie qu'un bloc respecte les limites de la grille
   * 
   * CONTRAINTES DE GRILLE :
   * - x >= 0 : pas de position négative
   * - y >= 0 : pas de position négative
   * - w > 0 : largeur positive
   * - h > 0 : hauteur positive
   * - x + w <= 24 : ne déborde pas à droite
   * - y + h <= 100 : ne déborde pas en bas
   * 
   * @param block - Bloc à vérifier (déjà validé par isValidBlock)
   * @returns boolean - true si dans les limites
   * 
   * @example
   * isBlockInBounds({ title: "Test", x: 20, y: 0, w: 5, h: 10 });
   * // false car x(20) + w(5) = 25 > 24 (déborde à droite)
   */
  isBlockInBounds(block) {
    return block.x >= 0 && // Position X positive
    block.y >= 0 && // Position Y positive
    block.w > 0 && // Largeur positive
    block.h > 0 && // Hauteur positive
    block.x + block.w <= 24 && // Pas de débordement horizontal
    block.y + block.h <= 100;
  }
  /**
   * Vérifie qu'un bloc ne chevauche pas avec les blocs déjà placés
   * 
   * ALGORITHME :
   * 1. Parcourir toutes les cellules du bloc
   * 2. Pour chaque cellule (x, y), vérifier si grid[x][y] est déjà true
   * 3. Si déjà true = chevauchement détecté
   * 4. Sinon, marquer la cellule comme occupée
   * 
   * EFFET DE BORD :
   * Cette fonction modifie la grille en marquant les cellules occupées.
   * C'est voulu pour la détection cumulative de chevauchements.
   * 
   * @param grid - Grille de test (modifiée par la fonction)
   * @param block - Bloc à placer
   * @param modelName - Nom du layout (pour les logs d'erreur)
   * @returns boolean - true si pas de chevauchement
   * 
   * @example
   * const grid = Array.from({ length: 24 }, () => Array(100).fill(false));
   * const block1 = { title: "A", x: 0, y: 0, w: 10, h: 10 };
   * const block2 = { title: "B", x: 5, y: 5, w: 10, h: 10 };
   * 
   * checkOverlap(grid, block1, "test"); // true (première fois)
   * checkOverlap(grid, block2, "test"); // false (chevauchement en (5,5)-(9,9))
   */
  checkOverlap(grid, block, modelName) {
    for (let x = block.x; x < block.x + block.w; x++) {
      for (let y = block.y; y < block.y + block.h; y++) {
        if (grid[x][y]) {
          console.warn(`\u274C [${modelName}] Chevauchement d\xE9tect\xE9 au bloc "${block.title}" \xE0 (${x}, ${y})`);
          return false;
        }
        grid[x][y] = true;
      }
    }
    return true;
  }
  /**
   * Affiche un résumé des layouts chargés dans la console
   * 
   * UTILITÉ :
   * - Débogage : voir quels layouts sont disponibles
   * - Vérification : confirmer que le chargement s'est bien passé
   * - Documentation : liste des sections de chaque layout
   * 
   * FORMAT DE SORTIE :
   * ```
   * 📋 Layouts disponibles: layout_eisenhower, layout_kanban
   *   • layout_eisenhower: 4 sections (Urgent et Important, Pas urgent...)
   *   • layout_kanban: 3 sections (À faire, En cours, Terminé)
   * ```
   */
  logAvailableLayouts() {
    const layouts = Array.from(this.models.keys());
    console.log("\u{1F4CB} Layouts disponibles:", layouts);
    for (const [name, layout] of this.models) {
      const sections = layout.map((b) => b.title).join(", ");
      console.log(`  \u2022 ${name}: ${layout.length} sections (${sections})`);
    }
  }
  // ===========================================================================
  // MÉTHODES D'ACCÈS PUBLIC (API DU SERVICE)
  // ===========================================================================
  /**
   * Récupère un layout par son nom
   * 
   * API PRINCIPALE :
   * Cette méthode est l'interface principale pour obtenir un layout.
   * Utilisée par BoardView, ViewSwitcher, etc.
   * 
   * RETOUR UNDEFINED :
   * Retourne undefined si le layout n'existe pas.
   * Plus sûr que de lever une exception.
   * 
   * @param name - Nom du layout (ex: "layout_eisenhower")
   * @returns BoardLayout[] | undefined - Layout ou undefined si inexistant
   * 
   * @example
   * const layout = layoutService.getModel("layout_eisenhower");
   * if (layout) {
   *   // Layout trouvé, on peut l'utiliser
   *   console.log(`Layout avec ${layout.length} blocs`);
   * } else {
   *   // Layout inexistant
   *   console.error("Layout non trouvé");
   * }
   */
  getModel(name) {
    return this.models.get(name);
  }
  /**
   * Retourne la liste de tous les noms de layouts disponibles
   * 
   * UTILISATION :
   * - Interface utilisateur : lister les layouts dans un menu
   * - Validation : vérifier qu'un layout existe
   * - Débogage : voir ce qui est disponible
   * 
   * @returns string[] - Array des noms de layouts
   * 
   * @example
   * const names = layoutService.getAllModelNames();
   * console.log(names); // ["layout_eisenhower", "layout_kanban", ...]
   * 
   * // Utilisation dans une interface
   * names.forEach(name => {
   *   const displayName = getLayoutDisplayName(name);
   *   addMenuItem(displayName, () => createNote(name));
   * });
   */
  getAllModelNames() {
    return Array.from(this.models.keys());
  }
  /**
   * Obtient le nom d'affichage convivial d'un layout
   * 
   * MAPPING TECHNIQUE → USER-FRIENDLY :
   * "layout_eisenhower" → "Matrice d'Eisenhower"
   * 
   * FALLBACK :
   * Si aucun nom d'affichage n'est défini, retourne le nom technique.
   * Évite les erreurs si les métadonnées sont incomplètes.
   * 
   * @param layoutName - Nom technique du layout
   * @returns string - Nom d'affichage ou nom technique si non trouvé
   * 
   * @example
   * const displayName = layoutService.getLayoutDisplayName("layout_eisenhower");
   * console.log(displayName); // "Matrice d'Eisenhower"
   * 
   * const unknownName = layoutService.getLayoutDisplayName("layout_custom");
   * console.log(unknownName); // "layout_custom" (fallback)
   */
  getLayoutDisplayName(layoutName) {
    const layoutInfo = LAYOUT_INFO[layoutName];
    return layoutInfo ? layoutInfo.displayName : layoutName;
  }
  /**
   * Obtient les métadonnées complètes d'un layout
   * 
   * MÉTADONNÉES ENRICHIES :
   * - Nom technique et d'affichage
   * - Description et cas d'usage
   * - Liste des sections
   * - Nombre de blocs
   * - Catégorie pour organisation
   * 
   * GÉNÉRATION AUTOMATIQUE :
   * Si les métadonnées prédéfinies n'existent pas, génère des métadonnées
   * basiques à partir du layout lui-même.
   * 
   * @param name - Nom du layout
   * @returns LayoutInfo | undefined - Métadonnées ou undefined si layout inexistant
   * 
   * @example
   * const info = layoutService.getModelInfo("layout_eisenhower");
   * if (info) {
   *   console.log(`${info.displayName}: ${info.description}`);
   *   console.log(`Sections: ${info.sections.join(', ')}`);
   *   console.log(`Catégorie: ${info.category}`);
   * }
   */
  getModelInfo(name) {
    const model = this.models.get(name);
    if (!model)
      return void 0;
    const info = LAYOUT_INFO[name];
    return info || {
      name,
      displayName: name,
      // Nom technique par défaut
      description: "Layout personnalis\xE9",
      // Description générique
      sections: model.map((block) => block.title),
      // Extraire les titres des blocs
      blockCount: model.length,
      // Compter les blocs
      category: "custom"
      // Catégorie par défaut
    };
  }
  /**
   * Retourne les métadonnées de tous les layouts disponibles
   * 
   * UTILISATION :
   * - Interface utilisateur : afficher tous les layouts avec détails
   * - Filtrage : grouper par catégorie
   * - Documentation : générer de l'aide automatiquement
   * 
   * PERFORMANCE :
   * Génère les métadonnées à la demande.
   * Pour de meilleures performances avec beaucoup de layouts,
   * on pourrait envisager un cache.
   * 
   * @returns LayoutInfo[] - Array de toutes les métadonnées
   */
  getAllModelsInfo() {
    return Array.from(this.models.keys()).map((name) => this.getModelInfo(name)).filter((info) => info !== void 0);
  }
};

// src/services/FileService.ts
var FileService = class {
  /**
   * CONSTRUCTEUR avec injection de dépendance
   * 
   * @param app - Instance principale d'Obsidian
   * 
   * CONCEPT OBSIDIAN - APP :
   * L'objet App donne accès à toutes les fonctionnalités d'Obsidian :
   * - app.vault : Système de fichiers
   * - app.metadataCache : Cache des métadonnées
   * - app.workspace : Gestion des vues et onglets
   * 
   * MODIFICATEUR private :
   * Rend la propriété accessible uniquement dans cette classe
   */
  constructor(app) {
    this.app = app;
  }
  // ===========================================================================
  // MÉTHODES PRINCIPALES DE PARSING
  // ===========================================================================
  /**
   * Parse toutes les sections H1 d'un fichier markdown
   * 
   * ALGORITHME :
   * 1. Lire le contenu du fichier
   * 2. Découper en lignes
   * 3. Identifier les titres H1 (lignes commençant par "# ")
   * 4. Extraire le contenu entre chaque titre
   * 5. Créer des objets FileSection avec métadonnées
   * 
   * GESTION DES CAS LIMITES :
   * - Fichier vide : retourne objet vide
   * - Pas de sections H1 : retourne objet vide
   * - Sections vides : incluses avec tableau de lignes vide
   * - Dernière section : va jusqu'à la fin du fichier
   * 
   * @param file - Fichier Obsidian à parser
   * @returns Promise<FileSections> - Dictionnaire des sections trouvées
   * 
   * @example
   * // Pour un fichier contenant :
   * // # Section 1
   * // Contenu 1
   * // # Section 2  
   * // Contenu 2
   * 
   * const sections = await fileService.parseSections(file);
   * // Retourne :
   * // {
   * //   "Section 1": { start: 0, end: 2, lines: ["Contenu 1"] },
   * //   "Section 2": { start: 2, end: 4, lines: ["Contenu 2"] }
   * // }
   */
  async parseSections(file) {
    const content = await this.app.vault.read(file);
    const lines = content.split("\n");
    const sections = {};
    let currentSection = null;
    let sectionStart = 0;
    console.log("\u{1F4D6} Parsing sections du fichier:", file.basename);
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      const headerMatch = line.match(/^# ([^\n#].*?)\s*$/);
      if (headerMatch) {
        if (currentSection !== null) {
          const sectionLines = lines.slice(sectionStart + 1, i);
          sections[currentSection] = {
            start: sectionStart,
            // Index de la ligne du titre
            end: i,
            // Index de la ligne suivante (exclus)
            lines: sectionLines
            // Contenu de la section
          };
          console.log(`\u{1F4C4} Section "${currentSection}": ${sectionLines.length} lignes`);
        }
        currentSection = headerMatch[1].trim();
        sectionStart = i;
      }
    }
    if (currentSection !== null) {
      const sectionLines = lines.slice(sectionStart + 1);
      sections[currentSection] = {
        start: sectionStart,
        end: lines.length,
        // Fin du fichier
        lines: sectionLines
      };
      console.log(`\u{1F4C4} Section "${currentSection}": ${sectionLines.length} lignes`);
    }
    console.log("\u2705 Sections trouv\xE9es:", Object.keys(sections));
    return sections;
  }
  // ===========================================================================
  // MÉTHODES DE MODIFICATION DES FICHIERS
  // ===========================================================================
  /**
   * Crée automatiquement les sections manquantes dans un fichier
   * 
   * PROCESSUS :
   * 1. Parser les sections existantes
   * 2. Comparer avec les sections requises par le layout
   * 3. Identifier les sections manquantes
   * 4. Trouver le point d'insertion optimal
   * 5. Générer le contenu des nouvelles sections
   * 6. Insérer et sauvegarder
   * 
   * STRATÉGIE D'INSERTION :
   * - Après le frontmatter YAML (s'il existe)
   * - Sinon au début du fichier
   * - Chaque section avec titre H1 et ligne vide
   * 
   * @param file - Fichier à modifier
   * @param layout - Layout définissant les sections requises
   * @returns Promise<boolean> - true si des sections ont été créées
   * 
   * @example
   * // Layout requiert : ["Section A", "Section B", "Section C"]
   * // Fichier contient : ["Section A", "Section C"]
   * // Résultat : Ajoute "Section B" au fichier
   */
  async createMissingSections(file, layout) {
    console.log("\u{1F527} V\xE9rification des sections manquantes...");
    const sections = await this.parseSections(file);
    const existingSections = Object.keys(sections);
    const requiredSections = layout.map((block) => block.title);
    const missingSections = requiredSections.filter(
      (section) => !existingSections.includes(section)
    );
    if (missingSections.length === 0) {
      console.log("\u2705 Toutes les sections sont pr\xE9sentes");
      return false;
    }
    console.log("\u{1F4DD} Sections manquantes d\xE9tect\xE9es:", missingSections);
    const content = await this.app.vault.read(file);
    const lines = content.split("\n");
    const insertionPoint = this.findInsertionPoint(lines);
    const newSectionLines = [];
    for (const sectionTitle of missingSections) {
      newSectionLines.push("");
      newSectionLines.push(`# ${sectionTitle}`);
      newSectionLines.push("");
    }
    const updatedLines = [
      ...lines.slice(0, insertionPoint),
      // Contenu avant insertion
      ...newSectionLines,
      // Nouvelles sections
      ...lines.slice(insertionPoint)
      // Contenu après insertion
    ];
    await this.app.vault.modify(file, updatedLines.join("\n"));
    console.log(`\u2705 ${missingSections.length} sections ajout\xE9es:`, missingSections);
    return true;
  }
  /**
   * Trouve le point d'insertion optimal pour les nouvelles sections
   * 
   * LOGIQUE :
   * 1. Chercher un frontmatter YAML (entre --- ... ---)
   * 2. Si frontmatter trouvé : insérer après
   * 3. Sinon : insérer au début du fichier
   * 
   * FRONTMATTER YAML :
   * Bloc de métadonnées au début des fichiers markdown :
   * ---
   * title: Mon titre
   * tags: [tag1, tag2]
   * ---
   * 
   * @param lines - Lignes du fichier
   * @returns number - Index de ligne où insérer
   * 
   * @example
   * // Fichier avec frontmatter :
   * // ---
   * // title: Test
   * // ---
   * // # Existing Section
   * 
   * findInsertionPoint(lines); // Retourne 3 (après le frontmatter)
   */
  findInsertionPoint(lines) {
    let frontmatterEnd = 0;
    let inFrontmatter = false;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      if (i === 0 && line === "---") {
        inFrontmatter = true;
        continue;
      }
      if (inFrontmatter && line === "---") {
        frontmatterEnd = i + 1;
        break;
      }
    }
    if (frontmatterEnd === 0) {
      return 0;
    } else {
      return frontmatterEnd;
    }
  }
  /**
   * Met à jour le contenu d'une section spécifique
   * 
   * PROCESSUS :
   * 1. Parser les sections pour trouver la section cible
   * 2. Remplacer son contenu par le nouveau
   * 3. Conserver le titre et la structure
   * 4. Sauvegarder le fichier
   * 
   * UTILISATION :
   * Appelée par MarkdownFrame quand l'utilisateur modifie une section
   * dans l'interface Board.
   * 
   * @param file - Fichier à modifier
   * @param sectionName - Nom de la section à mettre à jour
   * @param newContent - Nouveau contenu (sans le titre #)
   * 
   * @example
   * await fileService.updateSection(file, "Urgent et Important", "- Nouvelle tâche\n- Autre tâche");
   */
  async updateSection(file, sectionName, newContent) {
    const content = await this.app.vault.read(file);
    const lines = content.split("\n");
    const sections = await this.parseSections(file);
    const section = sections[sectionName];
    if (!section) {
      console.warn(`\u26A0\uFE0F Section "${sectionName}" non trouv\xE9e pour mise \xE0 jour`);
      return;
    }
    const newLines = [
      ...lines.slice(0, section.start + 1),
      // Avant la section (inclus le titre)
      ...newContent.split("\n"),
      // Nouveau contenu
      ...lines.slice(section.end)
      // Après la section
    ];
    await this.app.vault.modify(file, newLines.join("\n"));
    console.log(`\u2705 Section "${sectionName}" mise \xE0 jour`);
  }
  // ===========================================================================
  // MÉTHODES UTILITAIRES
  // ===========================================================================
  /**
   * Identifie les sections manquantes par rapport à un layout
   * 
   * ALGORITHME SIMPLE :
   * Filtre les sections requises qui ne sont pas dans les sections existantes.
   * 
   * FONCTION PURE :
   * - Pas d'effets de bord
   * - Même entrée = même sortie
   * - Facilement testable
   * 
   * @param existingSections - Sections actuellement présentes
   * @param requiredSections - Sections requises par le layout
   * @returns string[] - Liste des sections manquantes
   * 
   * @example
   * const missing = fileService.getMissingSections(
   *   ["Section A", "Section C"],           // Existantes
   *   ["Section A", "Section B", "Section C"]  // Requises
   * );
   * // Retourne : ["Section B"]
   */
  getMissingSections(existingSections, requiredSections) {
    return requiredSections.filter(
      (section) => !existingSections.includes(section)
    );
  }
};

// src/services/NoteCreatorService.ts
var import_obsidian2 = require("obsidian");
var NoteCreatorService = class {
  /**
   * Constructeur avec injection de dépendances
   * 
   * @param app - Instance de l'application Obsidian
   * @param layoutService - Service de gestion des layouts
   * @param logger - Service de logging (optionnel)
   */
  constructor(app, layoutService, logger) {
    this.app = app;
    this.layoutService = layoutService;
    this.logger = logger;
  }
  // =========================================================================
  // MÉTHODE PRINCIPALE
  // =========================================================================
  /**
   * Crée une nouvelle note avec un layout spécifique
   * 
   * @param options - Options de création
   * @returns Promise<NoteCreationResult> - Résultat de la création
   */
  async createNoteWithLayout(options) {
    var _a, _b, _c;
    (_a = this.logger) == null ? void 0 : _a.fileOperation("D\xE9but cr\xE9ation de note", { options });
    try {
      this.validateOptions(options);
      const layout = this.getLayout(options.layoutName);
      const layoutInfo = this.layoutService.getModelInfo(options.layoutName);
      const displayName = (layoutInfo == null ? void 0 : layoutInfo.displayName) || options.layoutName;
      const fileName = this.generateFileName(displayName, options);
      const content = this.generateNoteContent(options.layoutName, displayName, layout, layoutInfo, options);
      const file = await this.createFile(fileName, content, options.folder);
      if (options.autoOpen !== false) {
        await this.openFile(file);
      }
      new import_obsidian2.Notice(`\u2705 Note "${displayName}" cr\xE9\xE9e avec succ\xE8s !`, 3e3);
      const result = {
        file,
        layoutName: options.layoutName,
        displayName,
        sectionsCount: layout.length
      };
      (_b = this.logger) == null ? void 0 : _b.success("Note cr\xE9\xE9e avec succ\xE8s", {
        fileName: result.file.name,
        filePath: result.file.path,
        layoutName: result.layoutName,
        displayName: result.displayName,
        sectionsCount: result.sectionsCount
      });
      return result;
    } catch (error) {
      (_c = this.logger) == null ? void 0 : _c.error("Erreur lors de la cr\xE9ation de note", error);
      new import_obsidian2.Notice(`\u274C Erreur lors de la cr\xE9ation : ${error.message}`, 5e3);
      throw error;
    }
  }
  // =========================================================================
  // MÉTHODES DE VALIDATION
  // =========================================================================
  /**
   * Valide les options de création
   */
  validateOptions(options) {
    if (!options.layoutName) {
      throw new Error("Le nom du layout est requis");
    }
    if (!this.layoutService) {
      throw new Error("LayoutService non disponible");
    }
  }
  /**
   * Récupère et valide un layout
   */
  getLayout(layoutName) {
    const layout = this.layoutService.getModel(layoutName);
    if (!layout) {
      throw new Error(`Layout "${layoutName}" non trouv\xE9`);
    }
    if (layout.length === 0) {
      throw new Error(`Layout "${layoutName}" est vide`);
    }
    return layout;
  }
  // =========================================================================
  // GÉNÉRATION DE NOMS DE FICHIERS
  // =========================================================================
  /**
   * Génère un nom de fichier unique
   */
  generateFileName(displayName, options) {
    if (options.customFileName) {
      return this.sanitizeFileName(options.customFileName);
    }
    const timestamp = new Date().toISOString().split("T")[0];
    const baseName = this.sanitizeFileName(displayName);
    const fileName = `${baseName} ${timestamp}.md`;
    return this.ensureUniqueFileName(fileName, options.folder);
  }
  /**
   * Nettoie un nom de fichier des caractères interdits
   */
  sanitizeFileName(name) {
    return name.replace(/[<>:"/\\|?*]/g, "").replace(/\s+/g, " ").trim();
  }
  /**
   * Assure l'unicité d'un nom de fichier
   */
  ensureUniqueFileName(fileName, folder) {
    const fullPath = folder ? `${folder}/${fileName}` : fileName;
    if (!this.app.vault.getAbstractFileByPath(fullPath)) {
      return fileName;
    }
    const timestamp = new Date().toISOString().replace(/[:.]/g, "-").substring(0, 19);
    const baseName = fileName.replace(".md", "");
    return `${baseName} ${timestamp}.md`;
  }
  // =========================================================================
  // GÉNÉRATION DE CONTENU
  // =========================================================================
  /**
   * Génère le contenu complet de la note
   */
  generateNoteContent(layoutName, displayName, layout, layoutInfo, options) {
    const parts = [
      this.generateFrontmatter(layoutName, layoutInfo),
      this.generateTitle(displayName),
      this.generateDescription(layoutInfo),
      this.generateSections(layout, layoutName, options.customContent),
      this.generateFooter(displayName, layout.length)
    ];
    return parts.filter((part) => part).join("\n");
  }
  /**
   * Génère le frontmatter YAML
   */
  generateFrontmatter(layoutName, layoutInfo) {
    const today = new Date().toISOString().split("T")[0];
    return [
      "---",
      `agile-board: ${layoutName}`,
      `created: ${today}`,
      `type: agile-board`,
      `layout-type: ${(layoutInfo == null ? void 0 : layoutInfo.category) || "custom"}`,
      (layoutInfo == null ? void 0 : layoutInfo.tags) ? `tags: [${layoutInfo.tags.join(", ")}]` : "",
      "---",
      ""
    ].filter((line) => line !== "").join("\n");
  }
  /**
   * Génère le titre principal
   */
  generateTitle(displayName) {
    return `# ${displayName}
`;
  }
  /**
   * Génère la description (si disponible)
   */
  generateDescription(layoutInfo) {
    if (!(layoutInfo == null ? void 0 : layoutInfo.description)) {
      return "";
    }
    return `> ${layoutInfo.description}

`;
  }
  /**
   * Génère toutes les sections
   */
  generateSections(layout, layoutName, customContent) {
    return layout.map((block) => {
      const sectionTitle = `## ${block.title}`;
      const content = (customContent == null ? void 0 : customContent[block.title]) || this.generateSectionContent(block.title, layoutName);
      return `${sectionTitle}

${content}
`;
    }).join("\n");
  }
  /**
   * Génère le contenu d'une section selon son type
   */
  generateSectionContent(sectionTitle, layoutName) {
    const title = sectionTitle.toLowerCase();
    const contentMap = {
      // Sections de tâches
      "todo_tasks": () => [
        "- [ ] Premi\xE8re t\xE2che \xE0 faire",
        "- [ ] Deuxi\xE8me t\xE2che importante",
        "- [ ] Autre t\xE2che \xE0 planifier"
      ],
      "in_progress": () => [
        "- [ ] T\xE2che en cours de r\xE9alisation",
        "",
        "*D\xE9placez ici les t\xE2ches en cours d'ex\xE9cution*"
      ],
      "done": () => [
        "- [x] Exemple de t\xE2che termin\xE9e",
        "",
        "*Les t\xE2ches compl\xE9t\xE9es appara\xEEtront ici*"
      ],
      // Matrice d'Eisenhower
      "urgent_important": () => [
        "- [ ] Crise \xE0 r\xE9soudre imm\xE9diatement",
        "- [ ] Urgence critique",
        "",
        "\u{1F6A8} **\xC0 traiter en priorit\xE9 absolue**"
      ],
      "important_not_urgent": () => [
        "- [ ] Planification long terme",
        "- [ ] D\xE9veloppement personnel",
        "",
        "\u{1F4CB} **\xC0 planifier et organiser**"
      ],
      "urgent_not_important": () => [
        "- [ ] Interruption \xE0 g\xE9rer",
        "- [ ] Email urgent",
        "",
        "\u23F0 **\xC0 d\xE9l\xE9guer si possible**"
      ],
      "not_urgent_not_important": () => [
        "- [ ] Activit\xE9 de loisir",
        "- [ ] Distraction",
        "",
        "\u{1F5D1}\uFE0F **\xC0 \xE9liminer ou minimiser**"
      ]
    };
    const sectionType = this.detectSectionType(title, layoutName);
    const generator = contentMap[sectionType];
    if (generator) {
      return generator().join("\n");
    }
    return [
      "- [ ] Premier \xE9l\xE9ment",
      "- [ ] Deuxi\xE8me \xE9l\xE9ment",
      "",
      "*Ajoutez vos \xE9l\xE9ments ici*"
    ].join("\n");
  }
  /**
   * Détecte le type d'une section
   */
  detectSectionType(title, layoutName) {
    if (title.includes("faire") || title.includes("todo") || title.includes("backlog")) {
      return "todo_tasks";
    }
    if (title.includes("cours") || title.includes("progress") || title.includes("doing")) {
      return "in_progress";
    }
    if (title.includes("termin\xE9") || title.includes("done") || title.includes("fini")) {
      return "done";
    }
    if (layoutName.includes("eisenhower")) {
      if (title.includes("urgent") && title.includes("important")) {
        return "urgent_important";
      }
      if (title.includes("important") && !title.includes("urgent")) {
        return "important_not_urgent";
      }
      if (title.includes("urgent") && !title.includes("important")) {
        return "urgent_not_important";
      }
      if (title.includes("ni urgent") || title.includes("pas") && (title.includes("urgent") || title.includes("important"))) {
        return "not_urgent_not_important";
      }
    }
    return "generic";
  }
  /**
   * Génère le footer informatif
   */
  generateFooter(displayName, sectionsCount) {
    const today = new Date().toISOString().split("T")[0];
    return [
      "---",
      "",
      "### \u{1F4CA} Informations",
      `- **Layout** : ${displayName}`,
      `- **Sections** : ${sectionsCount}`,
      `- **Cr\xE9\xE9** : ${today}`,
      `- **Plugin** : Agile Board v0.7.0`,
      "",
      "> Cette note utilise le plugin Agile Board. Modifiez les sections selon vos besoins !"
    ].join("\n");
  }
  // =========================================================================
  // OPÉRATIONS FICHIERS
  // =========================================================================
  /**
   * Crée le fichier dans le vault
   */
  async createFile(fileName, content, folder) {
    var _a, _b;
    const fullPath = folder ? `${folder}/${fileName}` : fileName;
    if (folder && !this.app.vault.getAbstractFileByPath(folder)) {
      await this.app.vault.createFolder(folder);
      (_a = this.logger) == null ? void 0 : _a.debug("Dossier cr\xE9\xE9", { folder });
    }
    const file = await this.app.vault.create(fullPath, content);
    (_b = this.logger) == null ? void 0 : _b.success("Fichier cr\xE9\xE9", {
      path: file.path,
      size: content.length
    });
    return file;
  }
  /**
   * Ouvre un fichier dans Obsidian
   */
  async openFile(file) {
    var _a;
    const leaf = this.app.workspace.getLeaf(true);
    await leaf.openFile(file);
    (_a = this.logger) == null ? void 0 : _a.debug("Fichier ouvert", { path: file.path });
  }
  // =========================================================================
  // MÉTHODES UTILITAIRES PUBLIQUES
  // =========================================================================
  /**
   * Crée une note avec des paramètres simplifiés
   */
  async createQuickNote(layoutName, customFileName) {
    return this.createNoteWithLayout({
      layoutName,
      customFileName,
      autoOpen: true
    });
  }
  /**
   * Vérifie si un layout est disponible
   */
  isLayoutAvailable(layoutName) {
    return !!this.layoutService.getModel(layoutName);
  }
  /**
   * Retourne la liste des layouts disponibles pour création
   */
  getAvailableLayouts() {
    return this.layoutService.getAllModelsInfo().map((info) => ({
      name: info.name,
      displayName: info.displayName,
      description: info.description
    }));
  }
};

// src/services/BoardViewService.ts
var import_obsidian3 = require("obsidian");
var _BoardViewService = class {
  /**
   * Constructeur avec injection de dépendances
   */
  constructor(app, layoutService, logger) {
    this.app = app;
    this.layoutService = layoutService;
    this.logger = logger;
  }
  // =========================================================================
  // MÉTHODE PRINCIPALE
  // =========================================================================
  /**
   * Bascule vers la vue board pour un fichier
   * 
   * @param options - Options de basculement
   * @returns Promise<ViewSwitchResult> - Résultat du basculement
   */
  async switchToBoardView(options = {}) {
    var _a, _b, _c, _d, _e;
    (_a = this.logger) == null ? void 0 : _a.navigation("D\xE9but basculement vers vue board", { options });
    try {
      const targetFile = options.targetFile || this.app.workspace.getActiveFile();
      if (!targetFile) {
        throw new Error("Aucun fichier actif ou sp\xE9cifi\xE9");
      }
      const fileInfo = await this.analyzeFile(targetFile);
      if (!fileInfo.isValid) {
        throw new Error(`Fichier incompatible: ${fileInfo.layoutName ? `layout "${fileInfo.layoutName}" invalide` : "aucun layout agile-board"}`);
      }
      if (!options.forceSwitch && this.isCurrentlyInBoardView(targetFile)) {
        const message = "Fichier d\xE9j\xE0 affich\xE9 en vue board";
        (_b = this.logger) == null ? void 0 : _b.info(message, { fileName: targetFile.name });
        return {
          success: true,
          file: targetFile,
          layoutName: fileInfo.layoutName,
          boardLeaf: this.getCurrentBoardLeaf(targetFile),
          message
        };
      }
      const boardLeaf = await this.createBoardView(targetFile, fileInfo, options);
      const result = {
        success: true,
        file: targetFile,
        layoutName: fileInfo.layoutName,
        boardLeaf,
        message: `Vue board "${fileInfo.displayName}" activ\xE9e`
      };
      (_c = this.logger) == null ? void 0 : _c.success("Basculement r\xE9ussi", {
        fileName: targetFile.name,
        layoutName: fileInfo.layoutName,
        displayName: fileInfo.displayName
      });
      new import_obsidian3.Notice(`\u{1F4CA} Vue board "${fileInfo.displayName}" activ\xE9e`, 2e3);
      return result;
    } catch (error) {
      (_e = this.logger) == null ? void 0 : _e.error("Erreur lors du basculement", {
        message: error.message,
        fileName: ((_d = options.targetFile) == null ? void 0 : _d.name) || "non sp\xE9cifi\xE9"
      });
      new import_obsidian3.Notice(`\u274C Impossible de basculer: ${error.message}`, 4e3);
      return {
        success: false,
        file: options.targetFile || this.app.workspace.getActiveFile(),
        layoutName: "",
        boardLeaf: null,
        message: error.message
      };
    }
  }
  // =========================================================================
  // ANALYSE DE FICHIERS
  // =========================================================================
  /**
   * Analyse un fichier pour déterminer sa compatibilité board
   */
  async analyzeFile(file) {
    var _a, _b, _c;
    (_a = this.logger) == null ? void 0 : _a.debug("Analyse du fichier", { fileName: file.name });
    try {
      const fileCache = this.app.metadataCache.getFileCache(file);
      const layoutName = (_b = fileCache == null ? void 0 : fileCache.frontmatter) == null ? void 0 : _b["agile-board"];
      if (!layoutName) {
        return {
          file,
          layoutName: "",
          displayName: "",
          isValid: false,
          sections: []
        };
      }
      const layout = this.layoutService.getModel(layoutName);
      const layoutInfo = this.layoutService.getModelInfo(layoutName);
      if (!layout || !layoutInfo) {
        return {
          file,
          layoutName,
          displayName: layoutName,
          isValid: false,
          sections: []
        };
      }
      return {
        file,
        layoutName,
        displayName: layoutInfo.displayName,
        isValid: true,
        sections: layout.map((block) => block.title)
      };
    } catch (error) {
      (_c = this.logger) == null ? void 0 : _c.error("Erreur analyse fichier", error);
      return {
        file,
        layoutName: "",
        displayName: "",
        isValid: false,
        sections: []
      };
    }
  }
  /**
   * Vérifie si un fichier est actuellement affiché en vue board
   */
  isCurrentlyInBoardView(file) {
    return this.getCurrentBoardLeaf(file) !== null;
  }
  /**
   * Trouve l'onglet board actuel pour un fichier
   */
  getCurrentBoardLeaf(file) {
    const leaves = this.app.workspace.getLeavesOfType(_BoardViewService.BOARD_VIEW_TYPE);
    return leaves.find((leaf) => {
      var _a;
      const view = leaf.view;
      return ((_a = view.file) == null ? void 0 : _a.path) === file.path;
    }) || null;
  }
  // =========================================================================
  // CRÉATION DE VUES
  // =========================================================================
  /**
   * Crée une nouvelle vue board
   */
  async createBoardView(file, fileInfo, options) {
    var _a, _b, _c;
    (_a = this.logger) == null ? void 0 : _a.debug("Cr\xE9ation vue board", {
      fileName: file.name,
      layoutName: fileInfo.layoutName
    });
    let targetLeaf;
    if (options.newTab) {
      targetLeaf = this.app.workspace.getLeaf(true);
    } else {
      const activeLeaf = this.app.workspace.activeLeaf;
      if (activeLeaf && activeLeaf.view.getViewType() === "markdown" && ((_b = activeLeaf.view.file) == null ? void 0 : _b.path) === file.path) {
        targetLeaf = activeLeaf;
      } else {
        targetLeaf = this.app.workspace.getLeaf(true);
      }
    }
    await targetLeaf.setViewState({
      type: _BoardViewService.BOARD_VIEW_TYPE,
      state: {
        file: file.path,
        layoutName: fileInfo.layoutName
      }
    });
    this.app.workspace.setActiveLeaf(targetLeaf, { focus: true });
    (_c = this.logger) == null ? void 0 : _c.debug("Vue board cr\xE9\xE9e", {
      leafId: targetLeaf.id,
      viewType: targetLeaf.view.getViewType()
    });
    return targetLeaf;
  }
  // =========================================================================
  // MÉTHODES UTILITAIRES
  // =========================================================================
  /**
   * Bascule vers la vue markdown pour un fichier en vue board
   */
  async switchToMarkdownView(file) {
    var _a, _b;
    const targetFile = file || this.app.workspace.getActiveFile();
    if (!targetFile) {
      new import_obsidian3.Notice("\u274C Aucun fichier sp\xE9cifi\xE9");
      return false;
    }
    try {
      const boardLeaf = this.getCurrentBoardLeaf(targetFile);
      if (!boardLeaf) {
        new import_obsidian3.Notice("\u{1F4DD} Fichier d\xE9j\xE0 en vue markdown");
        return true;
      }
      await boardLeaf.setViewState({
        type: "markdown",
        state: { file: targetFile.path }
      });
      (_a = this.logger) == null ? void 0 : _a.success("Basculement vers vue markdown", {
        fileName: targetFile.name
      });
      new import_obsidian3.Notice("\u{1F4DD} Vue markdown activ\xE9e", 2e3);
      return true;
    } catch (error) {
      (_b = this.logger) == null ? void 0 : _b.error("Erreur basculement markdown", error);
      new import_obsidian3.Notice(`\u274C Erreur: ${error.message}`);
      return false;
    }
  }
  /**
   * Vérifie si un fichier a un layout agile-board (sans l'analyser complètement)
   */
  hasAgileBoardLayout(file) {
    var _a;
    const fileCache = this.app.metadataCache.getFileCache(file);
    return !!((_a = fileCache == null ? void 0 : fileCache.frontmatter) == null ? void 0 : _a["agile-board"]);
  }
  /**
   * Retourne la liste des fichiers avec layout agile-board dans le vault
   */
  async getAllBoardFiles() {
    const boardFiles = [];
    const markdownFiles = this.app.vault.getMarkdownFiles();
    for (const file of markdownFiles) {
      if (this.hasAgileBoardLayout(file)) {
        const fileInfo = await this.analyzeFile(file);
        if (fileInfo.isValid) {
          boardFiles.push(fileInfo);
        }
      }
    }
    return boardFiles;
  }
  /**
   * Ferme toutes les vues board ouvertes
   */
  async closeAllBoardViews() {
    var _a;
    const boardLeaves = this.app.workspace.getLeavesOfType(_BoardViewService.BOARD_VIEW_TYPE);
    let closedCount = 0;
    for (const leaf of boardLeaves) {
      await leaf.detach();
      closedCount++;
    }
    if (closedCount > 0) {
      (_a = this.logger) == null ? void 0 : _a.info("Vues board ferm\xE9es", { count: closedCount });
      new import_obsidian3.Notice(`\u{1F4CA} ${closedCount} vue(s) board ferm\xE9e(s)`);
    }
    return closedCount;
  }
  // =========================================================================
  // MÉTHODES DE DIAGNOSTIC
  // =========================================================================
  /**
   * Retourne des informations de diagnostic sur les vues
   */
  getDiagnosticInfo() {
    const boardLeaves = this.app.workspace.getLeavesOfType(_BoardViewService.BOARD_VIEW_TYPE);
    const activeLeaf = this.app.workspace.activeLeaf;
    const activeFile = this.app.workspace.getActiveFile();
    return {
      boardViewsCount: boardLeaves.length,
      boardFiles: boardLeaves.map((leaf) => {
        var _a;
        return ((_a = leaf.view.file) == null ? void 0 : _a.name) || "unknown";
      }),
      activeView: (activeLeaf == null ? void 0 : activeLeaf.view.getViewType()) || "none",
      activeFile: (activeFile == null ? void 0 : activeFile.name) || "none"
    };
  }
};
var BoardViewService = _BoardViewService;
/** ID de la vue board (doit correspondre à celui enregistré dans main.ts) */
BoardViewService.BOARD_VIEW_TYPE = "agile-board-view";

// src/services/SectionManagerService.ts
var import_obsidian4 = require("obsidian");
var SectionManagerService = class {
  /**
   * Constructeur avec injection de dépendances
   */
  constructor(app, layoutService, logger) {
    this.app = app;
    this.layoutService = layoutService;
    this.logger = logger;
  }
  // =========================================================================
  // MÉTHODE PRINCIPALE
  // =========================================================================
  /**
   * Crée les sections manquantes dans un fichier
   * 
   * @param file - Fichier à modifier
   * @param options - Options d'ajout
   * @returns Promise<AddSectionsResult>
   */
  async createMissingSections(file, options = {}) {
    var _a, _b, _c, _d, _e;
    (_a = this.logger) == null ? void 0 : _a.fileOperation("D\xE9but cr\xE9ation sections manquantes", {
      fileName: file.name,
      options
    });
    try {
      const analysis = await this.analyzeFile(file);
      if (!analysis.layoutName) {
        throw new Error("Aucun layout agile-board d\xE9tect\xE9 dans le fichier");
      }
      if (analysis.missingSections.length === 0) {
        const message = "Toutes les sections sont d\xE9j\xE0 pr\xE9sentes";
        (_b = this.logger) == null ? void 0 : _b.info(message, {
          fileName: file.name,
          sectionsCount: analysis.existingSections.length
        });
        new import_obsidian4.Notice(`\u2705 ${message}`, 2e3);
        return {
          success: true,
          sectionsAdded: 0,
          addedSectionNames: [],
          newContent: await this.app.vault.read(file),
          messages: [message]
        };
      }
      const newContent = await this.generateContentWithMissingSections(
        file,
        analysis,
        options
      );
      if (options.autoSave !== false) {
        await this.app.vault.modify(file, newContent);
        (_c = this.logger) == null ? void 0 : _c.success("Fichier modifi\xE9", {
          fileName: file.name,
          sectionsAdded: analysis.missingSections.length
        });
      }
      const result = {
        success: true,
        sectionsAdded: analysis.missingSections.length,
        addedSectionNames: analysis.missingSections,
        newContent,
        messages: [`${analysis.missingSections.length} section(s) ajout\xE9e(s)`]
      };
      new import_obsidian4.Notice(`\u2705 ${analysis.missingSections.length} section(s) ajout\xE9e(s)`, 3e3);
      (_d = this.logger) == null ? void 0 : _d.success("Sections manquantes cr\xE9\xE9es", {
        fileName: file.name,
        sectionsAdded: result.sectionsAdded,
        addedSections: result.addedSectionNames
      });
      return result;
    } catch (error) {
      (_e = this.logger) == null ? void 0 : _e.error("Erreur cr\xE9ation sections manquantes", {
        message: error.message,
        fileName: file.name
      });
      new import_obsidian4.Notice(`\u274C Erreur: ${error.message}`, 4e3);
      return {
        success: false,
        sectionsAdded: 0,
        addedSectionNames: [],
        newContent: "",
        messages: [error.message]
      };
    }
  }
  // =========================================================================
  // ANALYSE DE FICHIERS
  // =========================================================================
  /**
   * Analyse un fichier pour détecter ses sections et le layout
   */
  async analyzeFile(file) {
    var _a, _b, _c;
    (_a = this.logger) == null ? void 0 : _a.debug("D\xE9but analyse fichier", { fileName: file.name });
    try {
      const content = await this.app.vault.read(file);
      const layoutName = this.detectLayout(file);
      const existingSections = this.parseSections(content);
      const layoutSections = layoutName ? this.getLayoutSections(layoutName) : [];
      const existingSectionNames = existingSections.map((s) => s.name);
      const missingSections = layoutSections.filter(
        (layoutSection) => !existingSectionNames.includes(layoutSection)
      );
      const extraSections = existingSectionNames.filter(
        (existing) => !layoutSections.includes(existing)
      );
      const analysis = {
        file,
        layoutName,
        existingSections,
        missingSections,
        extraSections,
        correctOrder: layoutSections
      };
      (_b = this.logger) == null ? void 0 : _b.debug("Analyse termin\xE9e", {
        fileName: file.name,
        layoutName,
        existingSectionsCount: existingSections.length,
        missingSectionsCount: missingSections.length,
        extraSectionsCount: extraSections.length
      });
      return analysis;
    } catch (error) {
      (_c = this.logger) == null ? void 0 : _c.error("Erreur analyse fichier", error);
      throw error;
    }
  }
  /**
   * Détecte le layout d'un fichier
   */
  detectLayout(file) {
    var _a;
    const fileCache = this.app.metadataCache.getFileCache(file);
    return ((_a = fileCache == null ? void 0 : fileCache.frontmatter) == null ? void 0 : _a["agile-board"]) || "";
  }
  /**
   * Récupère les sections d'un layout
   */
  getLayoutSections(layoutName) {
    const layout = this.layoutService.getModel(layoutName);
    if (!layout) {
      throw new Error(`Layout "${layoutName}" non trouv\xE9`);
    }
    return layout.map((block) => block.title);
  }
  /**
   * Parse les sections d'un contenu markdown
   */
  parseSections(content) {
    const lines = content.split("\n");
    const sections = [];
    let currentSection = null;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (line.startsWith("## ")) {
        if (currentSection) {
          this.finalizeSection(currentSection, i - 1, lines);
          sections.push(currentSection);
        }
        currentSection = {
          name: line.substring(3).trim(),
          // Enlever "## "
          startLine: i,
          lines: [],
          isFromLayout: false
          // Sera déterminé plus tard
        };
      } else if (currentSection) {
        currentSection.lines.push(line);
      }
    }
    if (currentSection) {
      this.finalizeSection(currentSection, lines.length - 1, lines);
      sections.push(currentSection);
    }
    return sections;
  }
  /**
   * Finalise une section parsée
   */
  finalizeSection(section, endLine, allLines) {
    section.endLine = endLine;
    section.content = section.lines.join("\n").trim();
    while (section.lines.length > 0 && section.lines[section.lines.length - 1].trim() === "") {
      section.lines.pop();
    }
  }
  // =========================================================================
  // GÉNÉRATION DE CONTENU
  // =========================================================================
  /**
   * Génère le nouveau contenu avec les sections manquantes
   */
  async generateContentWithMissingSections(file, analysis, options) {
    const originalContent = await this.app.vault.read(file);
    const lines = originalContent.split("\n");
    const frontmatterEnd = this.findFrontmatterEnd(lines);
    const newLines = [];
    newLines.push(...lines.slice(0, frontmatterEnd + 1));
    const insertPosition = options.insertPosition || "layout-order";
    if (insertPosition === "layout-order") {
      await this.addSectionsInLayoutOrder(newLines, analysis, options);
    } else if (insertPosition === "end") {
      this.addExistingContent(newLines, analysis, lines, frontmatterEnd);
      this.addMissingSectionsAtEnd(newLines, analysis, options);
    } else {
      this.addMissingSectionsAfterFrontmatter(newLines, analysis, options);
      this.addExistingContent(newLines, analysis, lines, frontmatterEnd);
    }
    return newLines.join("\n");
  }
  /**
   * Trouve la fin du frontmatter
   */
  findFrontmatterEnd(lines) {
    let frontmatterCount = 0;
    for (let i = 0; i < lines.length; i++) {
      if (lines[i].trim() === "---") {
        frontmatterCount++;
        if (frontmatterCount === 2) {
          return i;
        }
      }
      if (lines[i].startsWith("# ")) {
        return i;
      }
    }
    return 0;
  }
  /**
   * Ajoute les sections dans l'ordre du layout
   */
  async addSectionsInLayoutOrder(newLines, analysis, options) {
    const existingSectionsMap = new Map(
      analysis.existingSections.map((s) => [s.name, s])
    );
    for (const sectionName of analysis.correctOrder) {
      newLines.push("");
      newLines.push(`## ${sectionName}`);
      newLines.push("");
      const existingSection = existingSectionsMap.get(sectionName);
      if (existingSection) {
        newLines.push(...existingSection.lines);
      } else {
        if (options.addDefaultContent !== false) {
          const defaultContent = this.generateDefaultSectionContent(
            sectionName,
            analysis.layoutName
          );
          newLines.push(...defaultContent);
        }
      }
      newLines.push("");
    }
  }
  /**
   * Ajoute le contenu existant (sections non-layout)
   */
  addExistingContent(newLines, analysis, originalLines, frontmatterEnd) {
    for (const section of analysis.existingSections) {
      if (!analysis.correctOrder.includes(section.name)) {
        newLines.push("");
        newLines.push(`## ${section.name}`);
        newLines.push("");
        newLines.push(...section.lines);
        newLines.push("");
      }
    }
  }
  /**
   * Ajoute les sections manquantes à la fin
   */
  addMissingSectionsAtEnd(newLines, analysis, options) {
    for (const sectionName of analysis.missingSections) {
      newLines.push("");
      newLines.push(`## ${sectionName}`);
      newLines.push("");
      if (options.addDefaultContent !== false) {
        const defaultContent = this.generateDefaultSectionContent(
          sectionName,
          analysis.layoutName
        );
        newLines.push(...defaultContent);
      }
      newLines.push("");
    }
  }
  /**
   * Ajoute les sections manquantes après le frontmatter
   */
  addMissingSectionsAfterFrontmatter(newLines, analysis, options) {
    this.addMissingSectionsAtEnd(newLines, analysis, options);
  }
  /**
   * Génère le contenu par défaut pour une section
   */
  generateDefaultSectionContent(sectionName, layoutName) {
    const title = sectionName.toLowerCase();
    if (title.includes("faire") || title.includes("todo") || title.includes("backlog")) {
      return [
        "- [ ] Nouvelle t\xE2che \xE0 faire",
        "- [ ] Autre t\xE2che importante"
      ];
    }
    if (title.includes("cours") || title.includes("progress") || title.includes("doing")) {
      return [
        "- [ ] T\xE2che en cours",
        "",
        "*T\xE2ches actuellement en cours de r\xE9alisation*"
      ];
    }
    if (title.includes("termin\xE9") || title.includes("done") || title.includes("fini")) {
      return [
        "- [x] T\xE2che exemple termin\xE9e",
        "",
        "*T\xE2ches compl\xE9t\xE9es*"
      ];
    }
    if (layoutName.includes("eisenhower")) {
      if (title.includes("urgent") && title.includes("important")) {
        return [
          "- [ ] T\xE2che critique",
          "",
          "\u{1F6A8} **Priorit\xE9 maximale**"
        ];
      }
      if (title.includes("important") && !title.includes("urgent")) {
        return [
          "- [ ] T\xE2che importante \xE0 planifier",
          "",
          "\u{1F4CB} **\xC0 organiser**"
        ];
      }
      if (title.includes("urgent") && !title.includes("important")) {
        return [
          "- [ ] Interruption \xE0 g\xE9rer",
          "",
          "\u23F0 **\xC0 d\xE9l\xE9guer**"
        ];
      }
      if (title.includes("ni urgent") || title.includes("pas") && title.includes("urgent")) {
        return [
          "- [ ] Activit\xE9 optionnelle",
          "",
          "\u{1F5D1}\uFE0F **\xC0 \xE9liminer**"
        ];
      }
    }
    return [
      "- [ ] Nouvel \xE9l\xE9ment",
      "- [ ] Autre \xE9l\xE9ment",
      "",
      "*Section ajout\xE9e automatiquement*"
    ];
  }
  // =========================================================================
  // MÉTHODES UTILITAIRES
  // =========================================================================
  /**
   * Vérifie si un fichier a toutes ses sections
   */
  async hasAllSections(file) {
    const analysis = await this.analyzeFile(file);
    return analysis.missingSections.length === 0;
  }
  /**
   * Compte les sections manquantes d'un fichier
   */
  async countMissingSections(file) {
    const analysis = await this.analyzeFile(file);
    return analysis.missingSections.length;
  }
  /**
   * Liste tous les fichiers avec sections manquantes
   */
  async findFilesWithMissingSections() {
    var _a;
    const results = [];
    const markdownFiles = this.app.vault.getMarkdownFiles();
    for (const file of markdownFiles) {
      try {
        const analysis = await this.analyzeFile(file);
        if (analysis.layoutName && analysis.missingSections.length > 0) {
          results.push({
            file,
            missingSectionsCount: analysis.missingSections.length,
            missingSections: analysis.missingSections
          });
        }
      } catch (error) {
        (_a = this.logger) == null ? void 0 : _a.debug("Erreur analyse fichier pour recherche", {
          fileName: file.name,
          error: error.message
        });
      }
    }
    return results;
  }
};

// src/views/BoardView.ts
var import_obsidian5 = require("obsidian");

// src/components/MarkdownFrame.ts
var MarkdownFrame = class {
  // ===========================================================================
  // CONSTRUCTEUR ET INITIALISATION
  // ===========================================================================
  /**
   * CONSTRUCTEUR du composant MarkdownFrame
   * * @param app - Instance principale d'Obsidian
   * @param container - Élément DOM parent où injecter le composant
   * @param file - Fichier source contenant cette section
   * @param section - Métadonnées de la section (lignes, position)
   * @param onChange - Callback appelé lors des modifications
   * * INJECTION DE DÉPENDANCES :
   * - app : Pour accès aux APIs Obsidian (rendu, navigation)
   * - container : Pour manipulation DOM
   * - file : Pour contexte de rendu (chemins relatifs, etc.)
   * - onChange : Pour notifier le parent des changements
   * * INITIALISATION :
   * Le constructeur démarre immédiatement l'initialisation complète.
   * * @example
   * const frame = new MarkdownFrame(
   * app,
   * frameElement,
   * currentFile,
   * sectionData,
   * (newContent) => saveToFile(sectionName, newContent)
   * );
   */
  constructor(app, container, file, section, onChange) {
    this.app = app;
    this.container = container;
    this.file = file;
    this.section = section;
    this.onChange = onChange;
    // ===========================================================================
    // PROPRIÉTÉS D'ÉTAT DU COMPOSANT
    // ===========================================================================
    /**
     * Indicateur du mode d'édition actuel
     * * ÉTATS POSSIBLES :
     * - false : Mode preview (affichage rendu)
     * - true : Mode édition (textarea visible)
     */
    this.isEditing = false;
    this.content = section.lines.join("\n");
    this.initializeFrame();
  }
  /**
   * Initialise complètement l'interface du composant
   * * ÉTAPES D'INITIALISATION :
   * 1. Configuration du conteneur principal
   * 2. Création du conteneur preview
   * 3. Création du conteneur d'édition
   * 4. Affichage initial en mode preview
   * * PATTERN TEMPLATE METHOD :
   * Orchestration de l'initialisation en étapes définies.
   */
  initializeFrame() {
    this.setupContainer();
    this.createPreviewContainer();
    this.createEditorContainer();
    this.showPreview();
  }
  /**
   * Configure le conteneur principal du composant
   * * NETTOYAGE :
   * Vide le conteneur existant pour éviter les conflits.
   * * STYLES CSS :
   * - Position relative pour positionnement des enfants
   * - Overflow hidden pour contenir le contenu
   * - Dimensions 100% pour remplir l'espace disponible
   */
  setupContainer() {
    this.container.empty();
    this.container.style.cssText = `
      width: 100%;
      height: 100%;
      position: relative;
      overflow: hidden;
    `;
  }
  // ===========================================================================
  // CRÉATION DES INTERFACES PREVIEW ET ÉDITION
  // ===========================================================================
  /**
   * Crée et configure le conteneur de preview (affichage rendu)
   * * RESPONSABILITÉS :
   * - Affichage du contenu markdown rendu
   * - Gestion des interactions (clics, tâches, liens)
   * - Détection du basculement vers l'édition
   * * STYLES :
   * Intégration avec les variables CSS d'Obsidian pour cohérence visuelle.
   */
  createPreviewContainer() {
    this.previewContainer = this.container.createDiv("markdown-preview");
    this.previewContainer.style.cssText = `
      width: 100%;
      height: 100%;
      overflow: auto;
      padding: 0.5rem;
      cursor: text;
      box-sizing: border-box;
    `;
    this.renderContent();
    this.setupPreviewEvents();
  }
  /**
   * Crée et configure le conteneur d'édition (textarea)
   * * RESPONSABILITÉS :
   * - Interface de modification directe du markdown
   * - Sauvegarde automatique des changements
   * - Gestion des raccourcis clavier (Escape)
   * * VISIBILITÉ :
   * Initialement caché, affiché seulement en mode édition.
   */
  createEditorContainer() {
    this.editorContainer = this.container.createDiv("markdown-editor");
    this.editorContainer.style.cssText = `
      width: 100%;
      height: 100%;
      display: none;
      box-sizing: border-box;
    `;
    this.textArea = this.editorContainer.createEl("textarea");
    this.textArea.style.cssText = `
      width: 100%;
      height: 100%;
      border: none;
      outline: none;
      resize: none;
      font-family: var(--font-text);
      font-size: var(--font-size-normal);
      background: transparent;
      color: var(--text-normal);
      padding: 0.5rem;
      box-sizing: border-box;
      line-height: 1.6;
    `;
    this.textArea.value = this.content;
    this.setupEditorEvents();
  }
  // ===========================================================================
  // MOTEUR DE RENDU MARKDOWN
  // ===========================================================================
  /**
   * Rend le contenu markdown avec le moteur officiel d'Obsidian
   * * MOTEUR DE RENDU :
   * Utilise MarkdownRenderer.renderMarkdown() qui supporte :
   * - Toutes les extensions markdown d'Obsidian
   * - Plugins tiers (Tasks, Dataview, etc.)
   * - Liens internes et navigation
   * - Syntaxe avancée (callouts, etc.)
   * * FALLBACK :
   * En cas d'erreur, utilise un moteur de rendu simple
   * pour maintenir la fonctionnalité de base.
   * * GESTION DU CONTENU VIDE :
   * Affiche un placeholder engageant pour inciter à l'édition.
   */
  async renderContent() {
    this.previewContainer.empty();
    if (!this.content.trim()) {
      this.renderEmptyState();
      return;
    }
    try {
      const { MarkdownRenderer, Component } = require("obsidian");
      const component = new Component();
      await MarkdownRenderer.renderMarkdown(
        this.content,
        // Contenu à rendre
        this.previewContainer,
        // Conteneur de destination
        this.file.path,
        // Contexte de fichier (pour liens relatifs)
        component
        // Composant pour cycle de vie
      );
      console.log("\u2705 Contenu rendu avec le moteur Obsidian (plugins support\xE9s)");
      this.setupInteractions();
    } catch (error) {
      console.warn("\u26A0\uFE0F Erreur rendu Obsidian, fallback vers rendu simple:", error);
      this.previewContainer.innerHTML = this.renderSimpleMarkdown(this.content);
    }
  }
  /**
   * Configure les interactions avec les éléments rendus
   * * INTERACTIONS SUPPORTÉES :
   * 1. Tâches cochables (Tasks plugin)
   * 2. Liens internes Obsidian
   * 3. Liens externes
   * 4. Éléments Dataview
   * * PATTERN EVENT DELEGATION :
   * Ajoute des écouteurs sur les éléments spécifiques
   * plutôt que sur le conteneur global.
   * * PRÉVENTION DE PROPAGATION :
   * Empêche les clics sur éléments interactifs de déclencher
   * le mode édition.
   */
  setupInteractions() {
    const taskCheckboxes = this.previewContainer.querySelectorAll('input[type="checkbox"].task-list-item-checkbox');
    taskCheckboxes.forEach((checkbox) => {
      checkbox.addEventListener("change", (event) => {
        const target = event.target;
        this.handleTaskToggle(target);
      });
    });
    const internalLinks = this.previewContainer.querySelectorAll("a.internal-link");
    internalLinks.forEach((link) => {
      link.addEventListener("click", (event) => {
        event.preventDefault();
        const href = link.getAttribute("data-href") || link.getAttribute("href");
        if (href) {
          this.app.workspace.openLinkText(href, this.file.path);
        }
      });
    });
    const interactiveElements = this.previewContainer.querySelectorAll("input, button, a, .dataview, .task-list-item");
    interactiveElements.forEach((element) => {
      element.addEventListener("click", (event) => {
        event.stopPropagation();
      });
    });
  }
  /**
   * Gère le cochage/décochage des tâches
   * * ALGORITHME :
   * 1. Identifier la tâche modifiée dans le DOM
   * 2. Trouver la ligne correspondante dans le markdown
   * 3. Mettre à jour la syntaxe de tâche ([ ] ↔ [x])
   * 4. Déclencher la sauvegarde automatique
   * * SYNCHRONISATION :
   * Maintient la cohérence entre affichage et source markdown.
   * * @param checkbox - Élément checkbox qui a été modifié
   * * @example
   * // Utilisateur coche une tâche dans l'affichage
   * // handleTaskToggle() met à jour le markdown :
   * // "- [ ] Tâche" → "- [x] Tâche"
   */
  handleTaskToggle(checkbox) {
    const isChecked = checkbox.checked;
    const listItem = checkbox.closest("li");
    if (!listItem)
      return;
    const taskText = this.getTaskTextFromListItem(listItem);
    if (!taskText)
      return;
    const lines = this.content.split("\n");
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (this.isTaskLine(line) && this.getTaskTextFromLine(line) === taskText) {
        const newCheckState = isChecked ? "[x]" : "[ ]";
        lines[i] = line.replace(/\[[ x]\]/, newCheckState);
        this.content = lines.join("\n");
        clearTimeout(this.changeTimeout);
        this.changeTimeout = setTimeout(() => {
          this.onChange(this.content);
        }, 500);
        console.log(`\u2705 T\xE2che ${isChecked ? "coch\xE9e" : "d\xE9coch\xE9e"}: ${taskText}`);
        break;
      }
    }
  }
  /**
   * Extrait le texte d'une tâche depuis un élément de liste DOM
   * * @param listItem - Élément <li> contenant la tâche
   * @returns string | null - Texte de la tâche ou null si non trouvé
   */
  getTaskTextFromListItem(listItem) {
    var _a;
    const textNode = listItem.childNodes[listItem.childNodes.length - 1];
    return ((_a = textNode == null ? void 0 : textNode.textContent) == null ? void 0 : _a.trim()) || null;
  }
  /**
   * Vérifie si une ligne markdown est une tâche
   * * @param line - Ligne de texte à vérifier
   * @returns boolean - true si c'est une ligne de tâche
   * * @example
   * isTaskLine("- [x] Tâche terminée");  // true
   * isTaskLine("- [ ] Tâche à faire");   // true
   * isTaskLine("- Simple liste");        // false
   */
  isTaskLine(line) {
    return /^[\s]*[-*+] \[[ x]\]/.test(line);
  }
  /**
   * Extrait le texte d'une tâche depuis une ligne markdown
   * * @param line - Ligne markdown contenant une tâche
   * @returns string - Texte de la tâche (sans la syntaxe de liste/checkbox)
   */
  getTaskTextFromLine(line) {
    const match = line.match(/^[\s]*[-*+] \[[ x]\] (.+)$/);
    return match ? match[1].trim() : "";
  }
  /**
   * Moteur de rendu markdown simple (fallback)
   * * UTILISATION :
   * Quand le moteur Obsidian n'est pas disponible ou échoue.
   * Supporte la syntaxe markdown de base.
   * * FONCTIONNALITÉS :
   * - Liens internes [[...]]
   * - Gras **texte**
   * - Italique *texte*
   * - Listes simples
   * * @param content - Contenu markdown à rendre
   * @returns string - HTML généré
   */
  renderSimpleMarkdown(content) {
    let html = content;
    html = html.replace(/\[\[([^\]]+)\]\]/g, '<span class="internal-link">$1</span>');
    html = html.replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>");
    html = html.replace(/\*(.*?)\*/g, "<em>$1</em>");
    html = html.replace(/^[\s]*[-*+] (.+)$/gm, "<li>$1</li>");
    const lines = html.split("\n");
    let result = "";
    let inList = false;
    for (const line of lines) {
      const trimmed = line.trim();
      if (trimmed.includes("<li>")) {
        if (!inList) {
          result += "<ul>\n";
          inList = true;
        }
        result += line + "\n";
      } else {
        if (inList) {
          result += "</ul>\n";
          inList = false;
        }
        if (trimmed === "") {
          result += "<br>\n";
        } else {
          result += `<p>${trimmed}</p>
`;
        }
      }
    }
    if (inList) {
      result += "</ul>\n";
    }
    return result;
  }
  /**
   * Affiche un état vide engageant pour inciter à l'édition
   * * DESIGN UX :
   * Message clair et incitatif plutôt qu'un vide intimidant.
   * Style cohérent avec l'interface Obsidian.
   */
  renderEmptyState() {
    const placeholder = this.previewContainer.createDiv("empty-placeholder");
    placeholder.style.cssText = `
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
      min-height: 80px;
      color: var(--text-muted);
      font-style: italic;
      cursor: text;
    `;
    placeholder.textContent = "Cliquez pour commencer \xE0 \xE9crire...";
  }
  // ===========================================================================
  // GESTION DES ÉVÉNEMENTS ET INTERACTIONS
  // ===========================================================================
  /**
   * Configure les événements du mode preview
   * * DÉTECTION INTELLIGENTE :
   * Distingue les clics sur éléments interactifs des clics d'édition.
   * Évite le basculement involontaire vers l'édition.
   */
  setupPreviewEvents() {
    this.previewContainer.addEventListener("click", (event) => {
      const target = event.target;
      if (this.isInteractiveElement(target)) {
        console.log("\u{1F3AF} Clic sur \xE9l\xE9ment interactif, pas de mode \xE9dition");
        return;
      }
      console.log("\u{1F5B1}\uFE0F Clic sur preview \u2192 mode \xE9dition");
      this.enterEditMode();
    });
  }
  /**
   * Détecte si un élément est interactif (ne doit pas déclencher l'édition)
   * * ÉLÉMENTS INTERACTIFS :
   * - Éléments HTML standard : input, button, a, select
   * - Éléments Obsidian : liens internes, tags
   * - Éléments de plugins : dataview, tasks
   * - Éléments avec attributs spéciaux
   * * ALGORITHME :
   * Remonte la hiérarchie DOM pour vérifier tous les parents.
   * Un élément est interactif si lui ou un parent l'est.
   * * @param element - Élément à vérifier
   * @returns boolean - true si interactif
   */
  isInteractiveElement(element) {
    let current = element;
    while (current && current !== this.previewContainer) {
      const tagName = current.tagName.toLowerCase();
      const classList = Array.from(current.classList);
      if (["input", "button", "a", "select", "textarea"].includes(tagName)) {
        return true;
      }
      const interactiveClasses = [
        "internal-link",
        "external-link",
        "tag",
        "dataview",
        "task-list-item-checkbox",
        "task-list-item",
        "cm-hmd-codeblock",
        "block-language-dataview",
        "block-language-tasks"
      ];
      if (interactiveClasses.some((cls) => classList.includes(cls))) {
        return true;
      }
      if (current.hasAttribute("href") || current.hasAttribute("data-href") || current.hasAttribute("data-task") || current.hasAttribute("contenteditable")) {
        return true;
      }
      current = current.parentElement;
    }
    return false;
  }
  /**
   * Configure les événements du mode édition
   * * ÉVÉNEMENTS GÉRÉS :
   * - input : Sauvegarde différée des modifications
   * - blur : Retour automatique au mode preview
   * - keydown : Raccourcis clavier (Escape)
   */
  setupEditorEvents() {
    this.textArea.addEventListener("input", () => {
      this.content = this.textArea.value;
      clearTimeout(this.changeTimeout);
      this.changeTimeout = setTimeout(() => {
        this.onChange(this.content);
      }, 1e3);
    });
    this.textArea.addEventListener("blur", () => {
      console.log("\u{1F4DD} Blur sur textarea \u2192 mode preview");
      this.exitEditMode();
    });
    this.textArea.addEventListener("keydown", (event) => {
      if (event.key === "Escape") {
        console.log("\u2328\uFE0F Escape \u2192 mode preview");
        this.exitEditMode();
      }
    });
  }
  // ===========================================================================
  // GESTION DES MODES (PREVIEW ↔ ÉDITION)
  // ===========================================================================
  /**
   * Bascule vers le mode édition
   * * PROCESSUS :
   * 1. Marquer l'état comme "en édition"
   * 2. Cacher le preview
   * 3. Afficher l'éditeur
   * 4. Synchroniser le contenu
   * 5. Donner le focus au textarea
   */
  enterEditMode() {
    this.isEditing = true;
    this.previewContainer.style.display = "none";
    this.editorContainer.style.display = "block";
    this.textArea.value = this.content;
    this.textArea.focus();
    console.log("\u270F\uFE0F Mode \xE9dition activ\xE9");
  }
  /**
   * Bascule vers le mode preview
   * * PROCESSUS :
   * 1. Vérifier qu'on est bien en édition
   * 2. Récupérer le contenu du textarea
   * 3. Cacher l'éditeur
   * 4. Afficher le preview
   * 5. Re-rendre le contenu
   */
  exitEditMode() {
    if (!this.isEditing)
      return;
    this.isEditing = false;
    this.content = this.textArea.value;
    this.editorContainer.style.display = "none";
    this.previewContainer.style.display = "block";
    this.renderContent();
    console.log("\u{1F441}\uFE0F Mode preview activ\xE9");
  }
  /**
   * Force l'affichage du mode preview
   * * UTILISATION :
   * Initialisation du composant et réinitialisations.
   */
  showPreview() {
    this.previewContainer.style.display = "block";
    this.editorContainer.style.display = "none";
    this.isEditing = false;
  }
  // ===========================================================================
  // API PUBLIQUE DU COMPOSANT
  // ===========================================================================
  /**
   * Met à jour le contenu de la section
   * * UTILISATION :
   * Quand le fichier source est modifié externement.
   * Maintient la synchronisation avec la source de vérité.
   * * @param section - Nouvelles données de section
   */
  updateContent(section) {
    this.section = section;
    this.content = section.lines.join("\n");
    if (this.isEditing) {
      this.textArea.value = this.content;
    } else {
      this.renderContent();
    }
  }
  /**
   * Obtient le contenu actuel de la section
   * * @returns string - Contenu markdown actuel
   */
  getContent() {
    return this.isEditing ? this.textArea.value : this.content;
  }
  /**
   * Détruit proprement le composant
   * * NETTOYAGE :
   * - Vide le conteneur DOM
   * - Annule les timers en cours
   * - Libère les références
   * * UTILISATION :
   * Appelée lors du nettoyage de la BoardView.
   */
  destroy() {
    this.container.empty();
    console.log("\u{1F5D1}\uFE0F MarkdownFrame d\xE9truite");
  }
};

// src/views/BoardView.ts
var BOARD_VIEW_TYPE = "agile-board-view";
var BoardView = class extends import_obsidian5.FileView {
  constructor(leaf, plugin) {
    super(leaf);
    this.gridContainer = null;
    this.frames = /* @__PURE__ */ new Map();
    this.plugin = plugin;
    console.log("\u{1F3AF} BoardView constructor appel\xE9");
  }
  getViewType() {
    return BOARD_VIEW_TYPE;
  }
  getDisplayText() {
    return this.file ? `${this.file.basename} (Board)` : "Agile Board";
  }
  getIcon() {
    return "layout-grid";
  }
  async onLoadFile(file) {
    console.log("\u{1F4C2} onLoadFile appel\xE9 pour:", file.basename);
    await this.renderBoardLayout();
  }
  async onUnloadFile(file) {
    console.log("\u{1F4C2} onUnloadFile appel\xE9 pour:", file.basename);
    this.cleanup();
  }
  // Méthode publique pour recharger le board
  async renderBoardLayout() {
    var _a;
    console.log("\u{1F3A8} renderBoardLayout d\xE9but");
    if (!this.file) {
      console.log("\u274C Pas de fichier dans renderBoardLayout");
      return;
    }
    console.log("\u{1F4C4} Fichier actuel:", this.file.basename);
    this.cleanup();
    const fileCache = this.app.metadataCache.getFileCache(this.file);
    const layoutName = (_a = fileCache == null ? void 0 : fileCache.frontmatter) == null ? void 0 : _a["agile-board"];
    console.log("\u{1F3AF} Layout name d\xE9tect\xE9:", layoutName);
    if (!layoutName) {
      console.log("\u274C Pas de layout agile-board trouv\xE9");
      this.showNoLayoutMessage();
      return;
    }
    const layout = this.plugin.layoutService.getModel(layoutName);
    if (!layout) {
      console.log("\u274C Layout non trouv\xE9 dans le service");
      this.showLayoutNotFoundMessage(layoutName);
      return;
    }
    let sections = await this.plugin.fileService.parseSections(this.file);
    console.log("\u{1F4DA} Sections pars\xE9es:", Object.keys(sections));
    const existingSections = Object.keys(sections);
    const requiredSections = layout.map((block) => block.title);
    const missingSections = this.plugin.fileService.getMissingSections(existingSections, requiredSections);
    if (missingSections.length > 0) {
      console.log("\u{1F527} Sections manquantes d\xE9tect\xE9es:", missingSections);
      this.showMissingSectionsMessage(missingSections, layout);
      return;
    }
    console.log("\u2705 Rendu Board pour:", this.file.basename, "avec layout:", layoutName);
    this.createGrid();
    this.createFrames(layout, sections);
  }
  cleanup() {
    for (const frame of this.frames.values()) {
      frame.destroy();
    }
    this.frames.clear();
    if (this.gridContainer) {
      this.gridContainer.remove();
      this.gridContainer = null;
    }
    this.contentEl.empty();
  }
  createGrid() {
    console.log("\u{1F532} Cr\xE9ation de la grille");
    this.gridContainer = this.contentEl.createDiv("agile-board-grid");
    this.gridContainer.style.cssText = `
      display: grid;
      grid-template-columns: repeat(24, 1fr);
      gap: 0.5rem;
      padding: 1rem;
      height: 100%;
      overflow: auto;
      background: var(--background-primary);
    `;
  }
  createFrames(layout, sections) {
    if (!this.gridContainer) {
      console.log("\u274C Pas de gridContainer pour cr\xE9er les frames");
      return;
    }
    console.log("\u{1F5BC}\uFE0F Cr\xE9ation de", layout.length, "frames");
    for (const block of layout) {
      console.log("\u{1F5BC}\uFE0F Cr\xE9ation frame pour:", block.title);
      const frameElement = this.gridContainer.createDiv("agile-board-frame");
      frameElement.style.cssText = `
        grid-column: ${block.x + 1} / span ${block.w};
        grid-row: ${block.y + 1} / span ${block.h};
        min-height: 100px;
        display: flex;
        flex-direction: column;
        border: 2px solid var(--background-modifier-border);
        border-radius: 6px;
        background: var(--background-primary);
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12);
      `;
      const titleElement = frameElement.createDiv("frame-title");
      titleElement.style.cssText = `
        padding: 0.5rem 0.75rem;
        font-weight: 500;
        color: var(--text-normal);
        border-bottom: 1px solid var(--background-modifier-border);
        background: var(--background-secondary);
        font-size: 1.1rem;
      `;
      titleElement.textContent = block.title;
      const contentElement = frameElement.createDiv("frame-content");
      contentElement.style.cssText = `
        flex: 1;
        overflow: auto;
        background: var(--background-primary);
      `;
      const section = sections[block.title];
      if (section) {
        const frame = new MarkdownFrame(
          this.app,
          contentElement,
          this.file,
          section,
          (content) => this.onFrameContentChanged(block.title, content)
        );
        this.frames.set(block.title, frame);
        console.log(`\u2705 Frame \xE9ditable cr\xE9\xE9e pour "${block.title}"`);
      } else {
        contentElement.style.padding = "0.75rem";
        contentElement.innerHTML = `
          <p><strong>\u274C Section manquante:</strong> ${block.title}</p>
          <p><em>Sections disponibles:</em> ${Object.keys(sections).join(", ")}</p>
        `;
        console.log(`\u274C Section "${block.title}" non trouv\xE9e`);
      }
    }
    console.log("\u2705 Toutes les frames cr\xE9\xE9es");
  }
  async onFrameContentChanged(sectionName, content) {
    if (!this.file)
      return;
    console.log(`\u{1F4BE} Changement d\xE9tect\xE9 dans la section "${sectionName}"`);
    try {
      const fileContent = await this.app.vault.read(this.file);
      const lines = fileContent.split("\n");
      const sections = await this.plugin.fileService.parseSections(this.file);
      const section = sections[sectionName];
      if (!section) {
        console.log(`\u274C Section "${sectionName}" non trouv\xE9e pour la sauvegarde`);
        return;
      }
      const newLines = [
        ...lines.slice(0, section.start + 1),
        // Avant la section (inclus le titre)
        ...content.split("\n"),
        // Nouveau contenu
        ...lines.slice(section.end)
        // Après la section
      ];
      await this.app.vault.modify(this.file, newLines.join("\n"));
      console.log(`\u2705 Section "${sectionName}" sauvegard\xE9e`);
    } catch (error) {
      console.error(`\u274C Erreur sauvegarde section "${sectionName}":`, error);
    }
  }
  showNoLayoutMessage() {
    this.contentEl.empty();
    const message = this.contentEl.createDiv("no-layout-message");
    message.style.cssText = `
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
      font-size: 1.2em;
      color: var(--text-muted);
      text-align: center;
      padding: 2rem;
    `;
    message.innerHTML = `
      <div>
        <h3>\u274C Pas de layout agile-board</h3>
        <p>Cette note n'a pas de layout agile-board configur\xE9</p>
        <p>Ajoutez dans le frontmatter:<br><code>agile-board: layout_eisenhower</code></p>
      </div>
    `;
  }
  showLayoutNotFoundMessage(layoutName) {
    this.contentEl.empty();
    const message = this.contentEl.createDiv("layout-not-found-message");
    message.style.cssText = `
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
      font-size: 1.2em;
      color: var(--text-error);
      text-align: center;
      padding: 2rem;
    `;
    message.innerHTML = `
      <div>
        <h3>\u274C Layout "${layoutName}" introuvable</h3>
        <p>Layouts disponibles: ${this.plugin.layoutService.getAllModelNames().join(", ")}</p>
      </div>
    `;
  }
  showMissingSectionsMessage(missingBlocks, layout) {
    this.contentEl.empty();
    const errorContainer = this.contentEl.createDiv("missing-sections-overlay");
    errorContainer.style.cssText = `
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
      height: 100%;
      padding: 2rem;
      text-align: center;
      background: var(--background-primary);
    `;
    const title = errorContainer.createEl("h2");
    title.textContent = "\u{1F527} Sections manquantes d\xE9tect\xE9es";
    title.style.cssText = `
      color: var(--text-normal);
      margin-bottom: 1rem;
    `;
    const description = errorContainer.createEl("p");
    description.textContent = "Les sections suivantes sont requises pour ce layout :";
    description.style.cssText = `
      color: var(--text-muted);
      margin-bottom: 1rem;
    `;
    const sectionsList = errorContainer.createEl("ul");
    sectionsList.style.cssText = `
      list-style: none;
      padding: 0;
      margin: 1rem 0;
      color: var(--text-normal);
    `;
    missingBlocks.forEach((section) => {
      const listItem = sectionsList.createEl("li");
      listItem.textContent = `# ${section}`;
      listItem.style.cssText = `
        font-family: var(--font-monospace);
        background: var(--background-secondary);
        padding: 0.5rem;
        margin: 0.25rem 0;
        border-radius: 4px;
      `;
    });
    const buttonContainer = errorContainer.createDiv();
    buttonContainer.style.cssText = `
      display: flex;
      gap: 1rem;
      margin-top: 2rem;
    `;
    const autoCreateButton = buttonContainer.createEl("button", { cls: "mod-cta" });
    autoCreateButton.textContent = "\u2728 Cr\xE9er automatiquement";
    autoCreateButton.style.cssText = `
      padding: 0.75rem 1.5rem;
      background: var(--interactive-accent);
      color: var(--text-on-accent);
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-weight: 500;
    `;
    autoCreateButton.addEventListener("click", async () => {
      if (!this.file)
        return;
      console.log("\u{1F527} Cr\xE9ation automatique des sections manquantes...");
      autoCreateButton.textContent = "\u23F3 Cr\xE9ation...";
      autoCreateButton.disabled = true;
      try {
        await this.plugin.fileService.createMissingSections(this.file, layout);
        console.log("\u2705 Sections cr\xE9\xE9es, rechargement du board...");
        setTimeout(() => {
          this.renderBoardLayout();
        }, 500);
      } catch (error) {
        console.error("\u274C Erreur cr\xE9ation sections:", error);
        autoCreateButton.textContent = "\u274C Erreur";
        setTimeout(() => {
          autoCreateButton.textContent = "\u2728 Cr\xE9er automatiquement";
          autoCreateButton.disabled = false;
        }, 2e3);
      }
    });
    const markdownButton = buttonContainer.createEl("button");
    markdownButton.textContent = "\u{1F4DD} Mode Markdown";
    markdownButton.style.cssText = `
      padding: 0.75rem 1.5rem;
      background: var(--background-secondary);
      color: var(--text-normal);
      border: 1px solid var(--background-modifier-border);
      border-radius: 6px;
      cursor: pointer;
      font-weight: 500;
    `;
    markdownButton.addEventListener("click", async () => {
      if (!this.file)
        return;
      const leaf = this.app.workspace.activeLeaf;
      if (leaf) {
        await leaf.setViewState({
          type: "markdown",
          state: { file: this.file.path }
        });
      }
    });
  }
};

// src/managers/ViewSwitcher.ts
var import_obsidian6 = require("obsidian");
var ViewSwitcher = class {
  /**
   * CONSTRUCTEUR avec injection de dépendance
   * 
   * @param plugin - Instance du plugin principal
   * 
   * INJECTION DE DÉPENDANCE :
   * Le plugin donne accès à :
   * - app : Instance Obsidian pour les opérations
   * - layoutService : Pour vérifier les layouts disponibles
   * - registerEvent : Pour s'abonner aux événements
   */
  constructor(plugin) {
    this.plugin = plugin;
  }
  // ===========================================================================
  // MÉTHODES DE BASCULEMENT ENTRE VUES
  // ===========================================================================
  /**
   * Bascule vers la vue Board pour un fichier donné
   * 
   * PROCESSUS :
   * 1. Obtenir l'onglet actif (activeLeaf)
   * 2. Changer son type de vue vers BOARD_VIEW_TYPE
   * 3. Passer le chemin du fichier en paramètre d'état
   * 
   * CONCEPT OBSIDIAN - SETVIEWSTATE :
   * setViewState permet de changer complètement le type de vue d'un onglet.
   * C'est comme transformer un onglet "texte" en onglet "image" par exemple.
   * 
   * @param file - Fichier à afficher en mode Board
   * 
   * @example
   * // L'utilisateur clique sur le bouton "Mode Board"
   * viewSwitcher.switchToBoardView(currentFile);
   * // L'onglet passe de MarkdownView à BoardView
   */
  async switchToBoardView(file) {
    const activeLeaf = this.plugin.app.workspace.activeLeaf;
    if (activeLeaf) {
      await activeLeaf.setViewState({
        type: BOARD_VIEW_TYPE,
        // Notre type de vue personnalisé
        state: { file: file.path }
        // État initial : quel fichier afficher
      });
      console.log("\u{1F3AF} Basculement vers Board View");
    }
  }
  /**
   * Bascule vers la vue Markdown standard pour un fichier donné
   * 
   * PROCESSUS INVERSE :
   * Même principe que switchToBoardView mais vers la vue standard d'Obsidian.
   * 
   * @param file - Fichier à afficher en mode Markdown
   * 
   * @example
   * // L'utilisateur clique sur le bouton "Mode Markdown"
   * viewSwitcher.switchToMarkdownView(currentFile);
   * // L'onglet passe de BoardView à MarkdownView
   */
  async switchToMarkdownView(file) {
    const activeLeaf = this.plugin.app.workspace.activeLeaf;
    if (activeLeaf) {
      await activeLeaf.setViewState({
        type: "markdown",
        // Type de vue standard d'Obsidian
        state: { file: file.path }
        // Même fichier, vue différente
      });
      console.log("\u{1F4DD} Basculement vers Markdown View");
    }
  }
  // ===========================================================================
  // MÉTHODES DE DÉTECTION DE CONTEXTE
  // ===========================================================================
  /**
   * Vérifie si la vue actuelle est notre BoardView
   * 
   * UTILITÉ :
   * Permet de savoir quel bouton afficher (Board → Markdown ou Markdown → Board).
   * 
   * MÉTHODE OBSIDIAN :
   * getActiveViewOfType() cherche une vue d'un type spécifique dans l'espace de travail.
   * Retourne l'instance ou null si aucune vue de ce type n'est active.
   * 
   * @returns boolean - true si on est en mode Board
   * 
   * @example
   * if (viewSwitcher.isCurrentViewBoardView()) {
   *   showMarkdownButton();
   * } else {
   *   showBoardButton();
   * }
   */
  isCurrentViewBoardView() {
    return this.plugin.app.workspace.getActiveViewOfType(BoardView) !== null;
  }
  /**
   * Vérifie si la vue actuelle est la MarkdownView standard
   * 
   * COMPLÉMENT DE isCurrentViewBoardView :
   * Ces deux méthodes permettent de couvrir tous les cas de figure.
   * 
   * @returns boolean - true si on est en mode Markdown
   */
  isCurrentViewMarkdownView() {
    return this.plugin.app.workspace.getActiveViewOfType(import_obsidian6.MarkdownView) !== null;
  }
  /**
   * Vérifie si un fichier a un layout agile-board configuré
   * 
   * LOGIQUE MÉTIER :
   * - Seuls les fichiers avec layout agile-board peuvent utiliser la vue Board
   * - Cette vérification détermine si les boutons doivent être affichés
   * 
   * ACCÈS AUX MÉTADONNÉES :
   * - metadataCache : Cache des métadonnées des fichiers
   * - getFileCache : Obtient les métadonnées d'un fichier
   * - frontmatter : Bloc YAML en début de fichier
   * 
   * @param file - Fichier à vérifier
   * @returns boolean - true si le fichier a un layout agile-board
   * 
   * @example
   * // Fichier avec frontmatter :
   * // ---
   * // agile-board: layout_eisenhower
   * // ---
   * hasAgileBoardLayout(file); // true
   * 
   * // Fichier normal sans frontmatter
   * hasAgileBoardLayout(file); // false
   */
  hasAgileBoardLayout(file) {
    var _a;
    const fileCache = this.plugin.app.metadataCache.getFileCache(file);
    return ((_a = fileCache == null ? void 0 : fileCache.frontmatter) == null ? void 0 : _a["agile-board"]) !== void 0;
  }
  // ===========================================================================
  // MÉTHODES DE GESTION DES BOUTONS D'INTERFACE
  // ===========================================================================
  /**
   * Configure les écouteurs d'événements pour la gestion automatique des boutons
   * 
   * ÉVÉNEMENTS OBSIDIAN SURVEILLÉS :
   * 1. active-leaf-change : Changement d'onglet actif
   * 2. file-open : Ouverture d'un nouveau fichier
   * 3. metadataCache.on('changed') : Modification des métadonnées
   * 
   * PATTERN OBSERVER :
   * S'abonne aux événements système plutôt que de sonder constamment.
   * Plus efficace et réactif.
   * 
   * DÉLAIS (setTimeout) :
   * Petits délais pour laisser le temps à Obsidian de finaliser les changements
   * avant de mettre à jour l'interface.
   * 
   * @example
   * viewSwitcher.addSwitchButton();
   * // À partir de maintenant, les boutons apparaissent/disparaissent automatiquement
   */
  addSwitchButton() {
    this.plugin.registerEvent(
      this.plugin.app.workspace.on("active-leaf-change", () => {
        setTimeout(() => this.updateSwitchButton(), 50);
      })
    );
    this.plugin.registerEvent(
      this.plugin.app.workspace.on("file-open", () => {
        setTimeout(() => this.updateSwitchButton(), 50);
      })
    );
    this.plugin.registerEvent(
      this.plugin.app.metadataCache.on("changed", (file) => {
        const activeFile = this.plugin.app.workspace.getActiveFile();
        if (activeFile && activeFile.path === file.path) {
          setTimeout(() => this.updateSwitchButtonForFile(file), 100);
        }
      })
    );
    setTimeout(() => this.updateSwitchButton(), 100);
  }
  /**
   * Met à jour les boutons pour un fichier spécifique
   * 
   * UTILISATION :
   * Appelée depuis l'extérieur (ModelDetector) quand un changement est détecté.
   * Version optimisée qui évite de re-analyser le contexte.
   * 
   * @param file - Fichier pour lequel mettre à jour les boutons
   */
  updateSwitchButtonForFile(file) {
    const hasLayout = this.hasAgileBoardLayout(file);
    if (hasLayout) {
      if (this.isCurrentViewMarkdownView()) {
        this.ensureBoardModeButton();
      } else if (this.isCurrentViewBoardView()) {
        this.ensureNormalModeButton();
      }
    } else {
      this.removeSwitchButtons();
    }
  }
  /**
   * Met à jour les boutons selon le contexte actuel
   * 
   * LOGIQUE GLOBALE :
   * 1. Identifier le fichier actif
   * 2. Vérifier s'il a un layout agile-board
   * 3. Déterminer la vue actuelle
   * 4. Afficher le bouton approprié
   * 
   * MÉTHODE PRINCIPALE :
   * Point d'entrée pour toutes les mises à jour automatiques.
   */
  updateSwitchButton() {
    const activeFile = this.plugin.app.workspace.getActiveFile();
    if (!activeFile)
      return;
    const hasLayout = this.hasAgileBoardLayout(activeFile);
    if (!hasLayout) {
      this.removeSwitchButtons();
      return;
    }
    if (this.isCurrentViewMarkdownView()) {
      this.ensureBoardModeButton();
    } else if (this.isCurrentViewBoardView()) {
      this.ensureNormalModeButton();
    } else {
      this.removeSwitchButtons();
    }
  }
  /**
   * S'assure qu'un bouton "Mode Board" est présent en vue Markdown
   * 
   * PROCESSUS :
   * 1. Trouver la vue Markdown active
   * 2. Localiser la zone des actions de vue (.view-actions)
   * 3. Supprimer le bouton existant s'il y en a un
   * 4. Créer et configurer le nouveau bouton
   * 5. Ajouter les styles et l'événement click
   * 
   * GESTION D'ERREURS :
   * Try-catch pour éviter que les erreurs d'interface cassent le plugin.
   * 
   * CONCEPT OBSIDIAN - addAction :
   * addAction() est la méthode officielle pour ajouter des boutons aux vues.
   * Paramètres : (icône, tooltip, callback)
   */
  ensureBoardModeButton() {
    const markdownView = this.plugin.app.workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
    if (!markdownView)
      return;
    const viewActions = markdownView.containerEl.querySelector(".view-actions");
    if (!viewActions)
      return;
    const existingButton = viewActions.querySelector(".agile-board-switch-button");
    if (existingButton) {
      existingButton.remove();
    }
    try {
      const button = markdownView.addAction("layout-grid", "Mode Board", () => {
        const activeFile = this.plugin.app.workspace.getActiveFile();
        if (activeFile) {
          this.switchToBoardView(activeFile);
        }
      });
      button.addClass("agile-board-switch-button");
      button.setAttribute("data-agile-board-button", "board-mode");
      button.style.cssText = `
        background-color: var(--interactive-accent);
        color: var(--text-on-accent);
        border-radius: 3px;
        opacity: 1;
      `;
      console.log("\u{1F518} Bouton Mode Board ajout\xE9");
    } catch (error) {
      console.error("Erreur lors de l'ajout du bouton Mode Board:", error);
    }
  }
  /**
   * S'assure qu'un bouton "Mode Markdown" est présent en vue Board
   * 
   * PROCESSUS SIMILAIRE à ensureBoardModeButton mais pour BoardView.
   * 
   * DIFFÉRENCES :
   * - Utilise getActiveViewOfType(BoardView)
   * - Icône 'document' au lieu de 'layout-grid'
   * - Callback vers switchToMarkdownView
   */
  ensureNormalModeButton() {
    const boardView = this.plugin.app.workspace.getActiveViewOfType(BoardView);
    if (!boardView)
      return;
    const viewActions = boardView.containerEl.querySelector(".view-actions");
    if (!viewActions)
      return;
    const existingButton = viewActions.querySelector(".agile-board-switch-button");
    if (existingButton) {
      existingButton.remove();
    }
    try {
      const button = boardView.addAction("document", "Mode Markdown", () => {
        const activeFile = this.plugin.app.workspace.getActiveFile();
        if (activeFile) {
          this.switchToMarkdownView(activeFile);
        }
      });
      button.addClass("agile-board-switch-button");
      button.setAttribute("data-agile-board-button", "normal-mode");
      button.style.cssText = `
        background-color: var(--interactive-accent);
        color: var(--text-on-accent);
        border-radius: 3px;
        opacity: 1;
      `;
      console.log("\u{1F518} Bouton Mode Markdown ajout\xE9");
    } catch (error) {
      console.error("Erreur lors de l'ajout du bouton Mode Markdown:", error);
    }
  }
  /**
   * Supprime tous les boutons de basculement de l'interface
   * 
   * UTILISATION :
   * - Quand on ouvre un fichier sans layout agile-board
   * - Quand on bascule vers une vue non supportée
   * - Lors du nettoyage du plugin
   * 
   * SÉLECTEUR GLOBAL :
   * Utilise document.querySelectorAll pour trouver tous les boutons,
   * même s'ils sont dans des onglets différents.
   * 
   * CLASSE IDENTIFICATRICE :
   * Tous nos boutons ont la classe 'agile-board-switch-button'
   * pour un nettoyage facile et sûr.
   */
  removeSwitchButtons() {
    const buttons = document.querySelectorAll(".agile-board-switch-button");
    buttons.forEach((button) => button.remove());
  }
  // ===========================================================================
  // MÉTHODES DE CYCLE DE VIE
  // ===========================================================================
  /**
   * Nettoie les ressources utilisées par le ViewSwitcher
   * 
   * APPELÉE PAR :
   * Le plugin principal lors de son déchargement (onunload).
   * 
   * NETTOYAGE :
   * - Supprime tous les boutons de l'interface
   * - Les écouteurs d'événements sont automatiquement nettoyés par Obsidian
   *   grâce à registerEvent() utilisé dans addSwitchButton()
   * 
   * IMPORTANCE :
   * Évite les fuites mémoire et les boutons orphelins dans l'interface.
   */
  stop() {
    this.removeSwitchButtons();
  }
};

// src/managers/ModelDetector.ts
var ModelDetector = class {
  /**
   * CONSTRUCTEUR avec injection de dépendance
   * 
   * @param plugin - Instance du plugin principal
   * 
   * DÉPENDANCES UTILISÉES :
   * - plugin.app : Pour accéder aux APIs Obsidian
   * - plugin.layoutService : Pour valider les layouts
   * - plugin.viewSwitcher : Pour mettre à jour l'interface
   * - plugin.registerEvent : Pour l'abonnement sécurisé aux événements
   */
  constructor(plugin) {
    this.plugin = plugin;
    /**
     * Cache des fichiers déjà traités
     * 
     * STRUCTURE DE DONNÉES :
     * Set<string> pour un accès O(1) et éviter les doublons.
     * 
     * CLÉ DE CACHE :
     * "chemin-du-fichier-timestamp" pour invalidation automatique
     * quand le fichier est modifié.
     * 
     * AVANTAGES :
     * - Évite les retraitements inutiles
     * - Performance optimisée pour les gros vaults
     * - Invalidation automatique lors des modifications
     */
    this.processedFiles = /* @__PURE__ */ new Set();
  }
  // ===========================================================================
  // MÉTHODES DE CYCLE DE VIE
  // ===========================================================================
  /**
   * Initialise la surveillance des événements Obsidian
   * 
   * ÉVÉNEMENTS SURVEILLÉS :
   * 1. metadataCache.on('changed') : Modification des métadonnées
   * 2. workspace.on('file-open') : Ouverture de fichier
   * 3. workspace.on('active-leaf-change') : Changement d'onglet actif
   * 
   * DÉLAIS D'INITIALISATION :
   * Délai de 1 seconde pour laisser Obsidian finir son initialisation
   * avant de traiter les fichiers déjà ouverts.
   * 
   * PATTERN REGISTER-EVENT :
   * Utilise plugin.registerEvent() pour un nettoyage automatique
   * des écouteurs lors du déchargement du plugin.
   * 
   * @example
   * modelDetector.onLoad();
   * // À partir de maintenant, les changements sont détectés automatiquement
   */
  onLoad() {
    this.plugin.registerEvent(
      this.plugin.app.metadataCache.on("changed", (file) => {
        this.handleMetadataChanged(file);
      })
    );
    this.plugin.registerEvent(
      this.plugin.app.workspace.on("file-open", (file) => {
        if (file) {
          this.handleFileOpen(file);
        }
      })
    );
    this.plugin.registerEvent(
      this.plugin.app.workspace.on("active-leaf-change", () => {
        setTimeout(() => {
          const activeFile = this.plugin.app.workspace.getActiveFile();
          if (activeFile) {
            this.handleFileOpen(activeFile);
          }
        }, 100);
      })
    );
    setTimeout(() => {
      this.processAllOpenFiles();
    }, 1e3);
  }
  /**
   * Nettoie les ressources utilisées par le détecteur
   * 
   * APPELÉE PAR :
   * Le plugin principal lors de son déchargement (onunload).
   * 
   * NETTOYAGE :
   * - Vide le cache des fichiers traités
   * - Les écouteurs d'événements sont automatiquement nettoyés par Obsidian
   * 
   * IMPORTANCE :
   * Évite les fuites mémoire et prépare un rechargement propre du plugin.
   */
  onUnload() {
    this.processedFiles.clear();
  }
  // ===========================================================================
  // GESTIONNAIRES D'ÉVÉNEMENTS PRIVÉS
  // ===========================================================================
  /**
   * Gère les changements de métadonnées d'un fichier
   * 
   * DÉCLENCHEMENT :
   * Quand l'utilisateur modifie le frontmatter d'un fichier.
   * Par exemple, ajouter ou changer "agile-board: layout_kanban".
   * 
   * LOGIQUE :
   * Les métadonnées changées peuvent affecter l'affichage des boutons,
   * donc on relance le traitement du fichier.
   * 
   * @param file - Fichier dont les métadonnées ont changé
   * 
   * @example
   * // L'utilisateur ajoute dans le frontmatter :
   * // agile-board: layout_eisenhower
   * // → handleMetadataChanged() est appelée
   * // → Les boutons de basculement apparaissent
   */
  handleMetadataChanged(file) {
    console.log("\u{1F4DD} M\xE9tadonn\xE9es chang\xE9es pour:", file.basename);
    this.processFile(file);
  }
  /**
   * Gère l'ouverture d'un fichier
   * 
   * DÉCLENCHEMENT :
   * - Ouverture d'un nouveau fichier
   * - Basculement vers un onglet existant
   * - Navigation par liens internes
   * 
   * @param file - Fichier qui vient d'être ouvert/activé
   */
  handleFileOpen(file) {
    console.log("\u{1F4C2} Fichier ouvert:", file.basename);
    this.processFile(file);
  }
  /**
   * Traite tous les fichiers déjà ouverts au démarrage
   * 
   * UTILISATION :
   * Appelée une fois lors de l'initialisation pour traiter les fichiers
   * qui étaient déjà ouverts avant l'activation du plugin.
   * 
   * MÉTHODE OBSIDIAN :
   * iterateAllLeaves() parcourt tous les onglets ouverts dans l'espace de travail.
   * 
   * FILTRAGE :
   * Seuls les onglets avec vue markdown et fichier valide sont traités.
   * 
   * @example
   * // Au démarrage d'Obsidian avec 3 fichiers ouverts :
   * // processAllOpenFiles() va traiter les 3 fichiers
   * // et afficher les boutons appropriés
   */
  processAllOpenFiles() {
    console.log("\u{1F50D} Traitement initial de tous les fichiers ouverts...");
    this.plugin.app.workspace.iterateAllLeaves((leaf) => {
      const view = leaf.view;
      if (view.getViewType() === "markdown" && view.file) {
        this.processFile(view.file);
      }
    });
  }
  // ===========================================================================
  // LOGIQUE MÉTIER PRINCIPALE
  // ===========================================================================
  /**
   * Traite un fichier individuel et met à jour l'interface si nécessaire
   * 
   * ALGORITHME :
   * 1. Filtrer les fichiers non-markdown
   * 2. Générer une clé de cache unique
   * 3. Vérifier si déjà traité (cache hit)
   * 4. Détecter si le fichier a un layout agile-board
   * 5. Mettre à jour l'interface via ViewSwitcher
   * 6. Nettoyer le cache si nécessaire
   * 
   * OPTIMISATION DE CACHE :
   * La clé inclut le timestamp de modification (mtime) pour invalider
   * automatiquement le cache quand le fichier change.
   * 
   * @param file - Fichier à traiter
   * 
   * @example
   * // Première fois : traitement complet
   * processFile(myFile); // Cache miss → traitement
   * 
   * // Deuxième fois (fichier inchangé) : cache hit
   * processFile(myFile); // Cache hit → pas de traitement
   * 
   * // Après modification du fichier : cache invalidé
   * processFile(myFile); // Cache miss → traitement
   */
  processFile(file) {
    if (!file.path.endsWith(".md"))
      return;
    const fileKey = `${file.path}-${file.stat.mtime}`;
    if (this.processedFiles.has(fileKey))
      return;
    this.processedFiles.add(fileKey);
    this.cleanupProcessedFiles();
    const hasLayout = this.hasAgileBoardLayout(file);
    console.log(`\u{1F3AF} Fichier "${file.basename}" - Layout agile-board: ${hasLayout ? "OUI" : "NON"}`);
    setTimeout(() => {
      this.plugin.viewSwitcher.updateSwitchButtonForFile(file);
    }, 50);
  }
  /**
   * Vérifie si un fichier a un layout agile-board valide
   * 
   * VALIDATION EN DEUX ÉTAPES :
   * 1. Vérifier la présence du champ 'agile-board' dans le frontmatter
   * 2. Vérifier que le layout existe dans le LayoutService
   * 
   * GESTION D'ERREURS :
   * Si un layout est spécifié mais n'existe pas, log un warning
   * mais retourne false (traitement gracieux).
   * 
   * @param file - Fichier à vérifier
   * @returns boolean - true si le fichier a un layout valide
   * 
   * @example
   * // Fichier avec frontmatter valide :
   * // ---
   * // agile-board: layout_eisenhower
   * // ---
   * hasAgileBoardLayout(file); // true
   * 
   * // Fichier avec layout inexistant :
   * // ---
   * // agile-board: layout_inexistant
   * // ---
   * hasAgileBoardLayout(file); // false + warning
   */
  hasAgileBoardLayout(file) {
    var _a;
    const fileCache = this.plugin.app.metadataCache.getFileCache(file);
    const layoutName = (_a = fileCache == null ? void 0 : fileCache.frontmatter) == null ? void 0 : _a["agile-board"];
    if (!layoutName)
      return false;
    const layout = this.plugin.layoutService.getModel(layoutName);
    if (!layout) {
      console.warn(`\u26A0\uFE0F Layout "${layoutName}" sp\xE9cifi\xE9 mais non trouv\xE9`);
      return false;
    }
    return true;
  }
  // ===========================================================================
  // GESTION DU CACHE ET OPTIMISATIONS
  // ===========================================================================
  /**
   * Nettoie le cache pour éviter une croissance excessive
   * 
   * STRATÉGIE DE NETTOYAGE :
   * - Limite : 100 entrées maximum dans le cache
   * - Méthode : Garder les 50 entrées les plus récentes
   * - Déclenchement : À chaque ajout dans le cache
   * 
   * POURQUOI NETTOYER :
   * - Éviter la fuite mémoire avec de gros vaults
   * - Maintenir des performances optimales
   * - Les anciennes entrées sont probablement obsolètes
   * 
   * ALGORITHME LRU SIMPLE :
   * Les entrées sont dans l'ordre d'insertion dans le Set.
   * On garde les dernières ajoutées (= les plus récemment utilisées).
   * 
   * @example
   * // Cache avec 100+ entrées
   * cleanupProcessedFiles();
   * // → Cache réduit à 50 entrées les plus récentes
   */
  cleanupProcessedFiles() {
    if (this.processedFiles.size > 100) {
      const entries = Array.from(this.processedFiles);
      const toKeep = entries.slice(-50);
      this.processedFiles.clear();
      toKeep.forEach((entry) => this.processedFiles.add(entry));
      console.log("\u{1F9F9} Cache nettoy\xE9: gard\xE9 50 entr\xE9es sur", entries.length);
    }
  }
  // ===========================================================================
  // MÉTHODES UTILITAIRES PUBLIQUES
  // ===========================================================================
  /**
   * Force une mise à jour complète de tous les fichiers ouverts
   * 
   * UTILISATION :
   * - Commande de débogage
   * - Après rechargement de layouts
   * - Récupération d'état incohérent
   * 
   * PROCESSUS :
   * 1. Vider complètement le cache
   * 2. Retraiter tous les fichiers ouverts
   * 3. Mettre à jour toute l'interface
   * 
   * PERFORMANCE :
   * Opération coûteuse, à utiliser avec parcimonie.
   * 
   * @example
   * // L'utilisateur utilise la commande "Force Update Board Buttons"
   * modelDetector.forceUpdate();
   * // → Tous les boutons sont recalculés et mis à jour
   */
  forceUpdate() {
    this.processedFiles.clear();
    this.processAllOpenFiles();
    console.log("\u{1F504} Mise \xE0 jour forc\xE9e termin\xE9e");
  }
};

// src/main.ts
var AgileBoardPlugin = class extends import_obsidian7.Plugin {
  /**
   * Initialisation du plugin - appelée au chargement d'Obsidian
   */
  async onload() {
    await this.loadSettings();
    this.logger = new LoggerService(this, this.settings.debug);
    this.logger.startup("Plugin Agile-Board v0.7.0 en cours d'initialisation", {
      debugEnabled: this.settings.debug.enabled,
      logLevel: this.settings.debug.logLevel,
      autoCreateSections: this.settings.autoCreateSections
    });
    await this.initializeServices();
    this.registerViews();
    this.registerCommands();
    this.addSettingTab(new AgileBoardSettingsTab(this.app, this));
    this.logger.config("Onglet de configuration enregistr\xE9");
    this.setupPeriodicLogSaving();
    this.setupEventListeners();
    this.logger.success("Plugin Agile-Board initialis\xE9 avec succ\xE8s", {
      version: "0.7.0",
      loadTime: performance.now(),
      services: this.getLoadedServices()
    });
  }
  /**
   * Arrêt du plugin - appelée à la fermeture d'Obsidian
   */
  async onunload() {
    this.logger.info("Arr\xEAt du plugin Agile-Board en cours");
    if (this.modelDetector) {
      this.modelDetector.onUnload();
    }
    if (this.settings.debug.logToFile) {
      this.logger.info("Sauvegarde finale des logs avant arr\xEAt");
      await this.logger.saveLogsToFile();
    }
    this.cleanupResources();
    this.logger.success("Plugin Agile-Board arr\xEAt\xE9 proprement");
  }
  // ====================================================================
  // GESTION DE LA CONFIGURATION
  // ====================================================================
  /**
   * Charge la configuration depuis le stockage d'Obsidian
   */
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    this.settings = this.validateSettings(this.settings);
  }
  /**
   * Sauvegarde la configuration dans le stockage d'Obsidian
   */
  async saveSettings() {
    await this.saveData(this.settings);
    if (this.logger) {
      this.logger.updateSettings(this.settings.debug);
      this.logger.config("Configuration sauvegard\xE9e et logger mis \xE0 jour");
    }
  }
  /**
   * Valide et corrige la configuration si nécessaire
   */
  validateSettings(settings) {
    if (!settings.debug) {
      settings.debug = DEFAULT_SETTINGS.debug;
    }
    if (!Array.isArray(settings.defaultLayouts) || settings.defaultLayouts.length === 0) {
      settings.defaultLayouts = DEFAULT_SETTINGS.defaultLayouts;
    }
    return settings;
  }
  // ====================================================================
  // INITIALISATION DES SERVICES
  // ====================================================================
  /**
   * Initialise tous les services du plugin
   */
  async initializeServices() {
    this.logger.debug("Initialisation des services en cours");
    try {
      this.layoutService = new LayoutService(this);
      this.fileService = new FileService(this.app);
      this.layoutService.load();
      this.noteCreator = new NoteCreatorService(
        this.app,
        this.layoutService,
        this.logger
      );
      this.boardViewService = new BoardViewService(
        this.app,
        this.layoutService,
        this.logger
      );
      this.sectionManager = new SectionManagerService(
        this.app,
        this.layoutService,
        this.logger
      );
      this.viewSwitcher = new ViewSwitcher(this);
      this.modelDetector = new ModelDetector(this);
      this.modelDetector.onLoad();
      this.logger.success("Tous les services initialis\xE9s", {
        layoutsCount: this.layoutService.getAllModelNames().length,
        noteCreatorReady: !!this.noteCreator,
        boardViewServiceReady: !!this.boardViewService,
        sectionManagerReady: !!this.sectionManager,
        viewSwitcherReady: !!this.viewSwitcher,
        modelDetectorReady: !!this.modelDetector
      });
      this.logger.debug("Tous les services ont \xE9t\xE9 initialis\xE9s avec succ\xE8s");
    } catch (error) {
      this.logger.error("Erreur lors de l'initialisation des services", error);
      throw error;
    }
  }
  /**
   * Enregistre les vues personnalisées
   */
  registerViews() {
    this.logger.debug("Enregistrement des vues personnalis\xE9es");
    try {
      this.registerView("agile-board-view", (leaf) => new BoardView(leaf, this));
      this.logger.success("Vue BoardView enregistr\xE9e");
    } catch (error) {
      this.logger.error("Erreur lors de l'enregistrement des vues", error);
    }
  }
  /**
   * Enregistre toutes les commandes du plugin
   */
  registerCommands() {
    this.logger.debug("Enregistrement des commandes");
    this.addCommand({
      id: "create-eisenhower-note",
      name: "Cr\xE9er une note Matrice d'Eisenhower",
      callback: () => this.createNoteWithLayout("layout_eisenhower")
    });
    this.addCommand({
      id: "create-kanban-note",
      name: "Cr\xE9er une note Kanban",
      callback: () => this.createNoteWithLayout("layout_kanban")
    });
    this.addCommand({
      id: "create-gtd-note",
      name: "Cr\xE9er une note GTD",
      callback: () => this.createNoteWithLayout("layout_gtd")
    });
    this.addCommand({
      id: "create-weekly-note",
      name: "Cr\xE9er un planificateur hebdomadaire",
      callback: () => this.createNoteWithLayout("layout_weekly")
    });
    this.addCommand({
      id: "create-daily-note",
      name: "Cr\xE9er un planificateur quotidien",
      callback: () => this.createNoteWithLayout("layout_daily")
    });
    this.addCommand({
      id: "create-project-note",
      name: "Cr\xE9er un tableau de projet",
      callback: () => this.createNoteWithLayout("layout_project")
    });
    this.addCommand({
      id: "switch-to-board-view",
      name: "Basculer vers la vue board",
      callback: () => this.switchToBoardView()
    });
    this.addCommand({
      id: "list-layouts",
      name: "Afficher les layouts disponibles",
      callback: () => this.listAvailableLayouts()
    });
    this.addCommand({
      id: "create-missing-sections",
      name: "Cr\xE9er les sections manquantes",
      callback: () => this.createMissingSections()
    });
    this.addCommand({
      id: "debug-button-state",
      name: "\u{1F50D} Debug \xC9tat des Boutons",
      callback: () => {
        var _a, _b;
        const activeFile = this.app.workspace.getActiveFile();
        const activeLeaf = this.app.workspace.activeLeaf;
        if (activeFile && activeLeaf) {
          const debugInfo = {
            fileName: activeFile.name,
            currentViewType: activeLeaf.view.getViewType(),
            hasAgileBoardLayout: !!((_b = (_a = this.app.metadataCache.getFileCache(activeFile)) == null ? void 0 : _a.frontmatter) == null ? void 0 : _b["agile-board"]),
            services: {
              viewSwitcher: !!this.viewSwitcher,
              boardViewService: !!this.boardViewService,
              modelDetector: !!this.modelDetector
            }
          };
          console.log("\u{1F50D} \xC9tat actuel:", debugInfo);
          this.logger.debug("Debug \xE9tat boutons", debugInfo);
          if (this.viewSwitcher) {
            console.log("\u{1F504} Mise \xE0 jour ViewSwitcher...");
            this.viewSwitcher.updateSwitchButtonForFile(activeFile);
          }
          if (this.modelDetector) {
            console.log("\u{1F504} Force update ModelDetector...");
            this.modelDetector.forceUpdate();
          }
          new import_obsidian8.Notice(`\u{1F50D} Debug: ${debugInfo.currentViewType} | Check console F12`, 4e3);
        }
      }
    });
    this.addCommand({
      id: "force-update-buttons",
      name: "\u{1F504} Forcer mise \xE0 jour des boutons",
      callback: () => this.forceUpdateButtons()
    });
    this.addCommand({
      id: "toggle-debug",
      name: "Activer/D\xE9sactiver le debug",
      callback: () => this.toggleDebug()
    });
    this.addCommand({
      id: "test-debug-system",
      name: "Tester le syst\xE8me de debug",
      callback: () => this.testDebugSystem()
    });
    this.addCommand({
      id: "save-logs-now",
      name: "Sauvegarder les logs maintenant",
      callback: () => this.saveLogsNow()
    });
    this.logger.success("Toutes les commandes ont \xE9t\xE9 enregistr\xE9es");
  }
  // ====================================================================
  // CONFIGURATION AUTOMATIQUE
  // ====================================================================
  /**
   * Configure la sauvegarde périodique des logs
   */
  setupPeriodicLogSaving() {
    if (!this.settings.debug.logToFile) {
      return;
    }
    this.registerInterval(
      window.setInterval(async () => {
        if (this.settings.debug.logToFile) {
          this.logger.verbose("Sauvegarde p\xE9riodique des logs", {
            timestamp: new Date().toISOString()
          });
          await this.logger.saveLogsToFile();
        }
      }, 5 * 60 * 1e3)
      // 5 minutes
    );
    this.logger.config("Sauvegarde p\xE9riodique des logs configur\xE9e (5 min)");
  }
  /**
   * Configure les écouteurs d'événements
   */
  setupEventListeners() {
    this.registerEvent(
      this.app.workspace.on("file-open", (file) => {
        if (file) {
          this.logger.navigation("Fichier ouvert", {
            fileName: file.name,
            path: file.path
          });
        }
      })
    );
    this.registerEvent(
      this.app.workspace.on("layout-change", () => {
        this.logger.navigation("Layout workspace modifi\xE9");
      })
    );
    this.logger.config("\xC9couteurs d'\xE9v\xE9nements configur\xE9s");
  }
  // ====================================================================
  // IMPLÉMENTATION DES COMMANDES
  // ====================================================================
  /**
  * Crée une note avec un layout spécifique
  */
  async createNoteWithLayout(layoutName) {
    this.logger.fileOperation("Cr\xE9ation de note demand\xE9e", { layoutName });
    try {
      if (!this.noteCreator) {
        throw new Error("NoteCreatorService non initialis\xE9");
      }
      const result = await this.noteCreator.createNoteWithLayout({
        layoutName,
        autoOpen: true
      });
      this.logger.success("Note cr\xE9\xE9e via NoteCreatorService", {
        fileName: result.file.name,
        filePath: result.file.path,
        sectionsCount: result.sectionsCount,
        layoutUsed: result.layoutName
      });
    } catch (error) {
      this.logger.error("Erreur lors de la cr\xE9ation de note", {
        message: error.message,
        stack: error.stack,
        name: error.name,
        layoutName
      }, "main.ts");
      console.error("D\xE9tail erreur createNoteWithLayout:", error);
    }
  }
  /**
  * Crée une note avec des options avancées
  */
  async createAdvancedNote(layoutName, options) {
    if (!this.noteCreator) {
      new import_obsidian8.Notice("\u274C Service de cr\xE9ation non disponible");
      return;
    }
    try {
      await this.noteCreator.createNoteWithLayout({
        layoutName,
        customFileName: options == null ? void 0 : options.fileName,
        folder: options == null ? void 0 : options.folder,
        customContent: options == null ? void 0 : options.customContent,
        autoOpen: true
      });
    } catch (error) {
      this.logger.error("Erreur cr\xE9ation note avanc\xE9e", error);
    }
  }
  /**
   * Méthode pour obtenir les layouts disponibles (pour l'interface)
   */
  getAvailableLayoutsForUI() {
    var _a;
    return ((_a = this.noteCreator) == null ? void 0 : _a.getAvailableLayouts()) || [];
  }
  /**
   * Bascule vers la vue board pour le fichier actuel
   */
  async switchToBoardView() {
    this.logger.navigation("Basculement vers vue board demand\xE9");
    try {
      if (!this.boardViewService) {
        throw new Error("BoardViewService non initialis\xE9");
      }
      const result = await this.boardViewService.switchToBoardView({
        forceSwitch: false,
        newTab: false
      });
      if (result.success) {
        this.logger.success("Basculement r\xE9ussi via BoardViewService", {
          fileName: result.file.name,
          layoutName: result.layoutName,
          message: result.message
        });
        setTimeout(() => {
          if (this.viewSwitcher && result.file) {
            this.logger.debug("Mise \xE0 jour ViewSwitcher apr\xE8s basculement board");
            this.viewSwitcher.updateSwitchButtonForFile(result.file);
          }
        }, 500);
      } else {
        this.logger.warn("Basculement \xE9chou\xE9", {
          fileName: result.file.name,
          message: result.message
        });
      }
    } catch (error) {
      this.logger.error("Erreur lors du basculement vers vue board", error, "main.ts");
    }
  }
  /**
   * Bascule vers la vue markdown
   */
  async switchToMarkdownView() {
    this.logger.navigation("Basculement vers vue markdown demand\xE9");
    try {
      if (!this.boardViewService) {
        throw new Error("BoardViewService non initialis\xE9");
      }
      const activeFile = this.app.workspace.getActiveFile();
      if (!activeFile) {
        new import_obsidian8.Notice("\u274C Aucun fichier actif");
        return;
      }
      const success = await this.boardViewService.switchToMarkdownView(activeFile);
      if (success) {
        this.logger.success("Basculement vers markdown r\xE9ussi", {
          fileName: activeFile.name
        });
        setTimeout(() => {
          if (this.viewSwitcher) {
            this.logger.debug("Mise \xE0 jour ViewSwitcher apr\xE8s basculement markdown");
            this.viewSwitcher.updateSwitchButtonForFile(activeFile);
          }
        }, 500);
      } else {
        this.logger.warn("Basculement vers markdown \xE9chou\xE9");
      }
    } catch (error) {
      this.logger.error("Erreur basculement vers markdown", error);
    }
  }
  /**
   * Force la mise à jour des boutons
   */
  forceUpdateButtons() {
    try {
      const activeFile = this.app.workspace.getActiveFile();
      if (activeFile && this.viewSwitcher) {
        this.logger.debug("Mise \xE0 jour forc\xE9e des boutons", { fileName: activeFile.name });
        this.viewSwitcher.updateSwitchButtonForFile(activeFile);
        new import_obsidian8.Notice("\u{1F504} Boutons mis \xE0 jour", 2e3);
      } else {
        new import_obsidian8.Notice("\u274C Aucun fichier actif ou ViewSwitcher indisponible", 3e3);
      }
    } catch (error) {
      this.logger.error("Erreur mise \xE0 jour boutons", error);
      new import_obsidian8.Notice(`\u274C Erreur: ${error.message}`, 3e3);
    }
  }
  /**
   * =============================================================================
   * AMÉLIORATION DE listAvailableLayouts()
   * =============================================================================
   */
  /**
   * Affiche la liste détaillée des layouts disponibles
   * 
   * Version améliorée qui :
   * - Affiche les informations dans la console ET dans une notification
   * - Groupe les layouts par catégorie
   * - Montre des détails utiles pour l'utilisateur
   * - Propose des actions supplémentaires
   */
  listAvailableLayouts() {
    this.logger.navigation("Liste des layouts demand\xE9e");
    try {
      if (!this.layoutService) {
        throw new Error("LayoutService non initialis\xE9");
      }
      const allLayouts = this.layoutService.getAllModelsInfo();
      if (allLayouts.length === 0) {
        const message = "Aucun layout disponible";
        this.logger.warn(message);
        new import_obsidian8.Notice(`\u26A0\uFE0F ${message}`, 3e3);
        return;
      }
      const layoutsByCategory = this.groupLayoutsByCategory(allLayouts);
      this.logDetailedLayoutInfo(allLayouts, layoutsByCategory);
      this.showLayoutSummaryToUser(allLayouts, layoutsByCategory);
      this.offerToCreateLayoutGuide(allLayouts);
    } catch (error) {
      this.logger.error("Erreur lors de l'affichage des layouts", error);
      new import_obsidian8.Notice(`\u274C Erreur: ${error.message}`, 4e3);
    }
  }
  /**
   * Groupe les layouts par catégorie
   */
  groupLayoutsByCategory(layouts) {
    const grouped = {};
    for (const layout of layouts) {
      const category = layout.category || "custom";
      if (!grouped[category]) {
        grouped[category] = [];
      }
      grouped[category].push(layout);
    }
    return grouped;
  }
  /**
   * Affiche les informations détaillées dans les logs
   */
  logDetailedLayoutInfo(allLayouts, layoutsByCategory) {
    this.logger.info("Layouts disponibles - R\xE9sum\xE9", {
      totalLayouts: allLayouts.length,
      categories: Object.keys(layoutsByCategory),
      layoutNames: allLayouts.map((l) => l.name)
    });
    for (const [category, layouts] of Object.entries(layoutsByCategory)) {
      this.logger.info(`Layouts - Cat\xE9gorie: ${category}`, {
        category,
        count: layouts.length,
        layouts: layouts.map((layout) => ({
          name: layout.name,
          displayName: layout.displayName,
          description: layout.description,
          sectionsCount: layout.sections.length,
          sections: layout.sections
        }))
      });
    }
  }
  /**
   * Affiche un résumé à l'utilisateur
   */
  showLayoutSummaryToUser(allLayouts, layoutsByCategory) {
    const categoryTexts = Object.entries(layoutsByCategory).map(([category, layouts]) => {
      const categoryName = this.getCategoryDisplayName(category);
      const layoutNames = layouts.map((l) => l.displayName).join(", ");
      return `\u{1F4C2} **${categoryName}** (${layouts.length}) : ${layoutNames}`;
    });
    const summaryText = [
      `\u{1F4CB} **${allLayouts.length} layouts disponibles**`,
      "",
      ...categoryTexts,
      "",
      "\u{1F50D} Voir console (F12) pour d\xE9tails complets"
    ].join("\n");
    new import_obsidian8.Notice(summaryText, 8e3);
    console.group("\u{1F3AF} LAYOUTS AGILE BOARD DISPONIBLES");
    console.log(`Total: ${allLayouts.length} layouts`);
    for (const [category, layouts] of Object.entries(layoutsByCategory)) {
      console.group(`\u{1F4C2} ${this.getCategoryDisplayName(category)} (${layouts.length})`);
      for (const layout of layouts) {
        console.log(`\u{1F4CB} ${layout.displayName} (${layout.name})`);
        console.log(`   Description: ${layout.description}`);
        console.log(`   Sections (${layout.sections.length}): ${layout.sections.join(", ")}`);
        console.log("");
      }
      console.groupEnd();
    }
    console.groupEnd();
  }
  /**
   * Nom d'affichage convivial pour les catégories
   */
  getCategoryDisplayName(category) {
    const categoryNames = {
      "productivity": "\u{1F3AF} Productivit\xE9",
      "planning": "\u{1F4C5} Planification",
      "project": "\u{1F680} Projets",
      "personal": "\u{1F464} Personnel",
      "custom": "\u{1F527} Personnalis\xE9"
    };
    return categoryNames[category] || `\u{1F4C1} ${category}`;
  }
  /**
   * Propose de créer une note guide avec tous les layouts
   */
  offerToCreateLayoutGuide(allLayouts) {
    this.logger.debug("Option guide layouts disponible", {
      layoutsCount: allLayouts.length,
      suggestion: "Possibilit\xE9 de cr\xE9er une note guide avec tous les layouts"
    });
  }
  /**
   * Crée une note guide avec tous les layouts (fonction bonus)
   */
  async createLayoutGuideNote(allLayouts) {
    try {
      if (!this.noteCreator) {
        return;
      }
      const guideContent = this.generateLayoutGuideContent(allLayouts);
      const fileName = `Guide Layouts Agile Board ${new Date().toISOString().split("T")[0]}.md`;
      await this.app.vault.create(fileName, guideContent);
      this.logger.success("Guide des layouts cr\xE9\xE9", { fileName });
      new import_obsidian8.Notice(`\u{1F4D6} Guide cr\xE9\xE9: ${fileName}`, 4e3);
    } catch (error) {
      this.logger.error("Erreur cr\xE9ation guide layouts", error);
    }
  }
  /**
   * Génère le contenu du guide des layouts
   */
  generateLayoutGuideContent(allLayouts) {
    const today = new Date().toISOString().split("T")[0];
    const sections = [
      "---",
      "type: guide",
      `created: ${today}`,
      "tags: [agile-board, layouts, guide]",
      "---",
      "",
      "# \u{1F4CB} Guide des Layouts Agile Board",
      "",
      `> Guide complet des ${allLayouts.length} layouts disponibles`,
      `> G\xE9n\xE9r\xE9 automatiquement le ${today}`,
      "",
      "## \u{1F3AF} R\xE9sum\xE9",
      "",
      `- **Total layouts** : ${allLayouts.length}`,
      `- **Plugin** : Agile Board v0.7.0`,
      `- **Utilisation** : Commandes de cr\xE9ation de notes`,
      "",
      "## \u{1F4DA} Layouts disponibles",
      ""
    ];
    const layoutsByCategory = this.groupLayoutsByCategory(allLayouts);
    for (const [category, layouts] of Object.entries(layoutsByCategory)) {
      sections.push(`### ${this.getCategoryDisplayName(category)}`);
      sections.push("");
      for (const layout of layouts) {
        sections.push(`#### \u{1F4CB} ${layout.displayName}`);
        sections.push("");
        sections.push(`- **Nom technique** : \`${layout.name}\``);
        sections.push(`- **Description** : ${layout.description}`);
        sections.push(`- **Sections** (${layout.sections.length}) : ${layout.sections.join(", ")}`);
        sections.push("");
        sections.push("**Utilisation :**");
        sections.push(`\`\`\`markdown`);
        sections.push(`---`);
        sections.push(`agile-board: ${layout.name}`);
        sections.push(`---`);
        sections.push(`\`\`\``);
        sections.push("");
      }
    }
    sections.push("---");
    sections.push("");
    sections.push("## \u{1F4D6} Comment utiliser");
    sections.push("");
    sections.push('1. **Cr\xE9er une note** : Utilisez les commandes "Cr\xE9er une note [Type]"');
    sections.push("2. **Ajouter un layout** : Ajoutez `agile-board: layout_name` dans le frontmatter");
    sections.push('3. **Basculer en vue board** : Commande "Basculer vers la vue board"');
    sections.push('4. **Compl\xE9ter les sections** : Commande "Cr\xE9er les sections manquantes"');
    sections.push("");
    sections.push("> \u{1F4A1} **Astuce** : Tous les layouts sont personnalisables selon vos besoins !");
    return sections.join("\n");
  }
  /**
   * Crée les sections manquantes pour le fichier actuel
   */
  async createMissingSections() {
    this.logger.fileOperation("Cr\xE9ation des sections manquantes demand\xE9e");
    try {
      const activeFile = this.app.workspace.getActiveFile();
      if (!activeFile) {
        this.logger.warn("Aucun fichier actif pour cr\xE9er les sections");
        new import_obsidian8.Notice("\u274C Aucun fichier actif");
        return;
      }
      if (!this.sectionManager) {
        throw new Error("SectionManagerService non initialis\xE9");
      }
      const result = await this.sectionManager.createMissingSections(activeFile, {
        insertPosition: "layout-order",
        addDefaultContent: true,
        autoSave: true
      });
      if (result.success) {
        this.logger.success("Sections cr\xE9\xE9es via SectionManagerService", {
          fileName: activeFile.name,
          sectionsAdded: result.sectionsAdded,
          addedSections: result.addedSectionNames
        });
      } else {
        this.logger.warn("Cr\xE9ation de sections \xE9chou\xE9e", {
          fileName: activeFile.name,
          messages: result.messages
        });
      }
    } catch (error) {
      this.logger.error("Erreur lors de la cr\xE9ation des sections", error);
      new import_obsidian8.Notice(`\u274C Erreur: ${error.message}`, 4e3);
    }
  }
  // ====================================================================
  // COMMANDES DE DEBUG (NOUVELLES v0.7.0)
  // ====================================================================
  /**
   * Active/désactive le debug via commande
   */
  async toggleDebug() {
    const wasEnabled = this.settings.debug.enabled;
    this.settings.debug.enabled = !wasEnabled;
    await this.saveSettings();
    const status = this.settings.debug.enabled ? "activ\xE9" : "d\xE9sactiv\xE9";
    const icon = this.settings.debug.enabled ? "\u2705" : "\u274C";
    this.logger.config(`Debug ${status} via commande`);
    new import_obsidian8.Notice(`${icon} Debug ${status}`, 3e3);
  }
  /**
   * Lance un test complet du système de debug
   */
  testDebugSystem() {
    this.logger.info("Test du syst\xE8me de debug lanc\xE9 via commande");
    this.logger.testSystem();
    new import_obsidian8.Notice("\u{1F9EA} Test de debug ex\xE9cut\xE9 - v\xE9rifiez la console (F12)", 4e3);
  }
  /**
   * Force la sauvegarde immédiate des logs
   */
  async saveLogsNow() {
    if (!this.settings.debug.logToFile) {
      new import_obsidian8.Notice("\u26A0\uFE0F Sauvegarde fichier d\xE9sactiv\xE9e", 3e3);
      return;
    }
    this.logger.info("Sauvegarde manuelle des logs demand\xE9e");
    await this.logger.saveLogsToFile();
    new import_obsidian8.Notice("\u{1F4BE} Logs sauvegard\xE9s avec succ\xE8s", 2e3);
  }
  // ====================================================================
  // MÉTHODES UTILITAIRES
  // ====================================================================
  /**
   * Nettoie les ressources avant arrêt du plugin
   */
  cleanupResources() {
    this.logger.debug("Nettoyage des ressources en cours");
    this.logger.clearBuffer();
    this.logger.debug("Ressources nettoy\xE9es");
  }
  /**
   * Retourne la liste des services chargés pour les logs
   */
  getLoadedServices() {
    const services = ["LoggerService"];
    if (this.layoutService)
      services.push("LayoutService");
    if (this.fileService)
      services.push("FileService");
    if (this.viewSwitcher)
      services.push("ViewSwitcher");
    if (this.modelDetector)
      services.push("ModelDetector");
    if (this.noteCreator)
      services.push("NoteCreatorService");
    return services;
  }
  // ====================================================================
  // MÉTHODES D'ACCÈS POUR LES AUTRES COMPOSANTS
  // ====================================================================
  /**
   * Retourne le service de logging pour utilisation dans d'autres composants
   * @returns Instance du LoggerService
   */
  getLogger() {
    return this.logger;
  }
  /**
   * Retourne la configuration actuelle du plugin
   * @returns Configuration complète
   */
  getSettings() {
    return this.settings;
  }
  /**
   * Met à jour une partie de la configuration
   * @param updates Mises à jour partielles
   */
  async updateSettings(updates) {
    this.settings = { ...this.settings, ...updates };
    await this.saveSettings();
    this.logger.config("Configuration mise \xE0 jour via API", updates);
  }
  // ====================================================================
  // GESTION DES ERREURS GLOBALES
  // ====================================================================
  /**
   * Gestionnaire d'erreur global pour le plugin
   * @param error Erreur capturée
   * @param context Contexte où l'erreur s'est produite
   */
  handleError(error, context) {
    this.logger.error(`Erreur dans ${context}`, {
      message: error.message,
      stack: error.stack,
      context
    });
    new import_obsidian8.Notice(`\u274C Erreur Agile Board: ${error.message}`, 5e3);
  }
  // ====================================================================
  // HOOKS POUR INTÉGRATION AVEC LES SERVICES EXISTANTS
  // ====================================================================
  /**
   * Hook appelé après l'initialisation complète
   * Permet aux services existants de s'initialiser avec le logger
   */
  onInitializationComplete() {
    this.logger.success("Hook d'initialisation compl\xE8te appel\xE9");
  }
  /**
   * Hook appelé lors du changement de configuration debug
   * Permet aux services de réagir aux changements
   */
  onDebugSettingsChanged() {
    this.logger.config("Configuration debug modifi\xE9e - notification aux services");
  }
};
