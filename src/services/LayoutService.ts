/**
 * =============================================================================
 * SERVICE DE GESTION DES LAYOUTS ET MOD√àLES DE BOARD
 * =============================================================================
 * 
 * Ce service g√®re tous les layouts (mod√®les) de boards disponibles dans le plugin.
 * Il s'occupe du chargement, de la validation et de la distribution des layouts.
 * 
 * RESPONSABILIT√âS PRINCIPALES :
 * - Charger et valider les layouts int√©gr√©s
 * - Fournir une API d'acc√®s aux layouts
 * - Valider la coh√©rence g√©om√©trique des grilles
 * - D√©tecter les chevauchements et erreurs de configuration
 * - Fournir des m√©tadonn√©es enrichies pour l'interface utilisateur
 * 
 * CONCEPTS DE GRILLE :
 * Chaque layout est une grille de 24 colonnes √ó 100 lignes maximum.
 * Les blocs sont des rectangles d√©finis par (x, y, largeur, hauteur).
 * Aucun chevauchement n'est autoris√© entre les blocs.
 * 
 * PATTERN DE CONCEPTION :
 * - Service Layer : Encapsule la logique de gestion des layouts
 * - Registry Pattern : Stocke et indexe les layouts disponibles
 * - Validation : V√©rifie la coh√©rence avant utilisation
 * - Factory : Fournit des instances configur√©es
 */

// =============================================================================
// IMPORTS
// =============================================================================

// Import de la classe Plugin d'Obsidian pour l'injection de d√©pendance
import { Plugin } from 'obsidian';

// Import des types personnalis√©s depuis notre fichier de types
import { BoardLayout, LayoutInfo } from '../types';

// Import des layouts et m√©tadonn√©es pr√©d√©finis
import { BUILT_IN_LAYOUTS, LAYOUT_INFO } from '../constants/layouts';
import AgileBoardPlugin from '../main';
import { LoggerService } from './LoggerService';

// =============================================================================
// CLASSE PRINCIPALE DU SERVICE
// =============================================================================

/**
 * Service de gestion des layouts de boards
 * 
 * ARCHITECTURE :
 * Cette classe agit comme un registre central pour tous les layouts.
 * Elle charge, valide et distribue les mod√®les de boards.
 * 
 * STOCKAGE INTERNE :
 * Utilise une Map<string, BoardLayout[]> pour un acc√®s rapide par nom.
 * La Map offre de meilleures performances que les objets pour les cl√©s dynamiques.
 * 
 * VALIDATION :
 * Chaque layout est valid√© g√©om√©triquement pour √©viter :
 * - Les chevauchements de blocs
 * - Les d√©bordements hors grille
 * - Les configurations invalides
 */
export class LayoutService {
  
  /**
   * Stockage interne des layouts valid√©s
   * 
   * CHOIX DE STRUCTURE DE DONN√âES :
   * Map vs Object :
   * - Map : acc√®s O(1), iteration garantie, cl√©s dynamiques
   * - Object : plus de syntaxe, risque de pollution du prototype
   * 
   * G√âN√âRICS TYPESCRIPT :
   * Map<K, V> indique les types de cl√© et valeur
   * - K = string (nom du layout)
   * - V = BoardLayout[] (array de blocs)
   */
  private models = new Map<string, BoardLayout[]>();
  
  /**
   * CONSTRUCTEUR avec injection de d√©pendance
   * 
   * @param plugin - Instance du plugin principal
   * 
   * INJECTION DE D√âPENDANCE :
   * Le plugin est inject√© pour potentiel acc√®s futur √† :
   * - Configuration utilisateur
   * - Syst√®me de logs
   * - √âv√©nements du plugin
   * 
   * MODIFICATEUR private :
   * Le plugin est stock√© pour usage interne uniquement
   */
  private logger: LoggerService;


  constructor(private plugin: AgileBoardPlugin) {
    this.logger = plugin.logger; // Logger du plugin pour les logs
  }

  // ===========================================================================
  // M√âTHODES DE CHARGEMENT ET INITIALISATION
  // ===========================================================================

  /**
   * Charge et valide tous les layouts int√©gr√©s
   * 
   * PROCESSUS DE CHARGEMENT :
   * 1. Vider le cache existant
   * 2. It√©rer sur tous les layouts pr√©d√©finis
   * 3. Valider chaque layout g√©om√©triquement
   * 4. Stocker les layouts valides
   * 5. Rejeter les layouts invalides avec warning
   * 6. Logger le r√©sum√© du chargement
   * 
   * GESTION D'ERREURS :
   * Les layouts invalides sont ignor√©s mais logg√©s.
   * Le plugin continue de fonctionner avec les layouts valides.
   * 
   * VALIDATION G√âOM√âTRIQUE :
   * - V√©rification des limites de grille
   * - D√©tection des chevauchements
   * - Validation des types de donn√©es
   * 
   * @example
   * layoutService.load();
   * // Log: "üìê 3 layouts charg√©s"
   * // Log: "üìã Layouts disponibles: layout_eisenhower, layout_kanban, ..."
   */
  load(): void {
    this.logger.info('üìê Chargement des layouts int√©gr√©s...');
    
    // √âTAPE 1 : Nettoyer le cache existant
    // Important pour les rechargements du plugin
    this.models.clear();
    let loadedCount = 0;

    // √âTAPE 2 : It√©rer sur tous les layouts pr√©d√©finis
    // Object.entries() transforme un objet en array de [key, value]
    for (const [name, layout] of Object.entries(BUILT_IN_LAYOUTS)) {
      console.log(`üîç Chargement du layout "${name}"...`);
      
      // √âTAPE 3 : Valider le layout
      if (this.validateModel(name, layout)) {
        // LAYOUT VALIDE : l'ajouter au registre
        this.models.set(name, layout);
        loadedCount++;
        console.log(`‚úÖ Layout "${name}" charg√© (${layout.length} blocs)`);
      } else {
        // LAYOUT INVALIDE : le rejeter avec warning
        console.warn(`‚ùå Mod√®le "${name}" invalide`);
      }
    }

    // √âTAPE 4 : Logger le r√©sum√©
    console.log(`üìê ${loadedCount} layouts charg√©s`);
    this.logAvailableLayouts();
  }

  /**
   * Valide compl√®tement un layout (g√©om√©trie + coh√©rence)
   * 
   * VALIDATION EN PLUSIEURS √âTAPES :
   * 1. Validation individuelle de chaque bloc
   * 2. V√©rification des limites de grille
   * 3. D√©tection des chevauchements
   * 4. Cr√©ation d'une grille de test pour simulation
   * 
   * ALGORITHME DE CHEVAUCHEMENT :
   * - Cr√©er une grille bool√©enne 24√ó100
   * - Pour chaque bloc, marquer ses cellules
   * - Si une cellule est d√©j√† marqu√©e = chevauchement
   * 
   * @param name - Nom du layout (pour les logs d'erreur)
   * @param layout - Array de blocs √† valider
   * @returns boolean - true si le layout est enti√®rement valide
   * 
   * @example
   * const isValid = layoutService.validateModel("test", [
   *   { title: "Block 1", x: 0, y: 0, w: 12, h: 12 },
   *   { title: "Block 2", x: 12, y: 0, w: 12, h: 12 }
   * ]);
   * // true si pas de chevauchement, false sinon
   */
  private validateModel(name: string, layout: BoardLayout[]): boolean {
    // √âTAPE 1 : Cr√©er une grille de test pour d√©tecter les chevauchements
    // Array.from() avec callback pour cr√©er une grille 2D
    // 24 colonnes √ó 100 lignes, initialis√©es √† false
    const grid = Array.from({ length: 24 }, () => Array(100).fill(false));
    let isValid = true;

    // √âTAPE 2 : Valider chaque bloc individuellement
    for (const block of layout) {
      // VALIDATION 2.1 : Structure et types de donn√©es
      if (!this.isValidBlock(block)) {
        console.warn(`‚ùå [${name}] Bloc invalide :`, block);
        isValid = false;
        continue;  // Passer au bloc suivant
      }

      // VALIDATION 2.2 : Limites de grille
      if (!this.isBlockInBounds(block)) {
        console.warn(`‚ùå [${name}] Bloc hors limites :`, block);
        isValid = false;
        continue;
      }

      // VALIDATION 2.3 : Chevauchements
      if (!this.checkOverlap(grid, block, name)) {
        isValid = false;
        // Continue pour trouver tous les chevauchements
      }
    }

    return isValid;
  }

  /**
   * V√©rifie qu'un objet a la structure d'un BoardLayout valide
   * 
   * TYPE GUARD TYPESCRIPT :
   * Cette fonction est un "type guard" qui v√©rifie √† l'ex√©cution
   * qu'un objet correspond √† l'interface BoardLayout.
   * 
   * V√âRIFICATIONS :
   * - Pr√©sence de toutes les propri√©t√©s requises
   * - Types corrects (string pour title, number pour les autres)
   * - Pas de v√©rification des valeurs (fait dans isBlockInBounds)
   * 
   * @param block - Objet √† v√©rifier (type any pour flexibilit√©)
   * @returns block is BoardLayout - Type guard TypeScript
   * 
   * @example
   * const obj = { title: "Test", x: 0, y: 0, w: 5, h: 5 };
   * if (isValidBlock(obj)) {
   *   // TypeScript sait maintenant que obj est un BoardLayout
   *   console.log(obj.title); // Pas d'erreur TypeScript
   * }
   */
  private isValidBlock(block: any): block is BoardLayout {
    return (
      typeof block.title === 'string' &&    // Titre doit √™tre une cha√Æne
      typeof block.x === 'number' &&        // Position X doit √™tre un nombre
      typeof block.y === 'number' &&        // Position Y doit √™tre un nombre
      typeof block.w === 'number' &&        // Largeur doit √™tre un nombre
      typeof block.h === 'number'           // Hauteur doit √™tre un nombre
    );
  }

  /**
   * V√©rifie qu'un bloc respecte les limites de la grille
   * 
   * CONTRAINTES DE GRILLE :
   * - x >= 0 : pas de position n√©gative
   * - y >= 0 : pas de position n√©gative
   * - w > 0 : largeur positive
   * - h > 0 : hauteur positive
   * - x + w <= 24 : ne d√©borde pas √† droite
   * - y + h <= 100 : ne d√©borde pas en bas
   * 
   * @param block - Bloc √† v√©rifier (d√©j√† valid√© par isValidBlock)
   * @returns boolean - true si dans les limites
   * 
   * @example
   * isBlockInBounds({ title: "Test", x: 20, y: 0, w: 5, h: 10 });
   * // false car x(20) + w(5) = 25 > 24 (d√©borde √† droite)
   */
  private isBlockInBounds(block: BoardLayout): boolean {
    const MIN_SIZE = 2; // Taille minimale viable
    return (
      block.x >= 0 &&                    // Position X positive
      block.y >= 0 &&                    // Position Y positive
      block.w > MIN_SIZE &&              // Largeur positive
      block.h > MIN_SIZE &&              // Hauteur positive
      block.x + block.w <= 24 &&         // Pas de d√©bordement horizontal
      block.y + block.h <= 100           // Pas de d√©bordement vertical
    );
  }

  /**
   * V√©rifie qu'un bloc ne chevauche pas avec les blocs d√©j√† plac√©s
   * 
   * ALGORITHME :
   * 1. Parcourir toutes les cellules du bloc
   * 2. Pour chaque cellule (x, y), v√©rifier si grid[x][y] est d√©j√† true
   * 3. Si d√©j√† true = chevauchement d√©tect√©
   * 4. Sinon, marquer la cellule comme occup√©e
   * 
   * EFFET DE BORD :
   * Cette fonction modifie la grille en marquant les cellules occup√©es.
   * C'est voulu pour la d√©tection cumulative de chevauchements.
   * 
   * @param grid - Grille de test (modifi√©e par la fonction)
   * @param block - Bloc √† placer
   * @param modelName - Nom du layout (pour les logs d'erreur)
   * @returns boolean - true si pas de chevauchement
   * 
   * @example
   * const grid = Array.from({ length: 24 }, () => Array(100).fill(false));
   * const block1 = { title: "A", x: 0, y: 0, w: 10, h: 10 };
   * const block2 = { title: "B", x: 5, y: 5, w: 10, h: 10 };
   * 
   * checkOverlap(grid, block1, "test"); // true (premi√®re fois)
   * checkOverlap(grid, block2, "test"); // false (chevauchement en (5,5)-(9,9))
   */
  private checkOverlap(grid: boolean[][], block: BoardLayout, modelName: string): boolean {
    // DOUBLE BOUCLE pour parcourir toutes les cellules du bloc
    for (let x = block.x; x < block.x + block.w; x++) {
      for (let y = block.y; y < block.y + block.h; y++) {
        // V√âRIFICATION DE CHEVAUCHEMENT
        if (grid[x][y]) {
          // Cellule d√©j√† occup√©e = chevauchement d√©tect√©
          console.warn(`‚ùå [${modelName}] Chevauchement d√©tect√© au bloc "${block.title}" √† (${x}, ${y})`);
          return false;
        }
        
        // MARQUAGE DE LA CELLULE comme occup√©e
        grid[x][y] = true;
      }
    }
    
    // Aucun chevauchement d√©tect√©
    return true;
  }

  /**
   * Affiche un r√©sum√© des layouts charg√©s dans la console
   * 
   * UTILIT√â :
   * - D√©bogage : voir quels layouts sont disponibles
   * - V√©rification : confirmer que le chargement s'est bien pass√©
   * - Documentation : liste des sections de chaque layout
   * 
   * FORMAT DE SORTIE :
   * ```
   * üìã Layouts disponibles: layout_eisenhower, layout_kanban
   *   ‚Ä¢ layout_eisenhower: 4 sections (Urgent et Important, Pas urgent...)
   *   ‚Ä¢ layout_kanban: 3 sections (√Ä faire, En cours, Termin√©)
   * ```
   */
  private logAvailableLayouts(): void {
    // LISTE DES NOMS pour le r√©sum√© principal
    const layouts = Array.from(this.models.keys());
    console.log('üìã Layouts disponibles:', layouts);
    
    // D√âTAIL DE CHAQUE LAYOUT
    for (const [name, layout] of this.models) {
      // Extraire les titres des blocs pour un aper√ßu
      const sections = layout.map(b => b.title).join(', ');
      console.log(`  ‚Ä¢ ${name}: ${layout.length} sections (${sections})`);
    }
  }

  // ===========================================================================
  // M√âTHODES D'ACC√àS PUBLIC (API DU SERVICE)
  // ===========================================================================

  /**
   * R√©cup√®re un layout par son nom
   * 
   * API PRINCIPALE :
   * Cette m√©thode est l'interface principale pour obtenir un layout.
   * Utilis√©e par BoardView, ViewSwitcher, etc.
   * 
   * RETOUR UNDEFINED :
   * Retourne undefined si le layout n'existe pas.
   * Plus s√ªr que de lever une exception.
   * 
   * @param name - Nom du layout (ex: "layout_eisenhower")
   * @returns BoardLayout[] | undefined - Layout ou undefined si inexistant
   * 
   * @example
   * const layout = layoutService.getModel("layout_eisenhower");
   * if (layout) {
   *   // Layout trouv√©, on peut l'utiliser
   *   console.log(`Layout avec ${layout.length} blocs`);
   * } else {
   *   // Layout inexistant
   *   console.error("Layout non trouv√©");
   * }
   */
  getModel(name: string): BoardLayout[] | undefined {
    return this.models.get(name);
  }

  /**
   * Retourne la liste de tous les noms de layouts disponibles
   * 
   * UTILISATION :
   * - Interface utilisateur : lister les layouts dans un menu
   * - Validation : v√©rifier qu'un layout existe
   * - D√©bogage : voir ce qui est disponible
   * 
   * @returns string[] - Array des noms de layouts
   * 
   * @example
   * const names = layoutService.getAllModelNames();
   * console.log(names); // ["layout_eisenhower", "layout_kanban", ...]
   * 
   * // Utilisation dans une interface
   * names.forEach(name => {
   *   const displayName = getLayoutDisplayName(name);
   *   addMenuItem(displayName, () => createNote(name));
   * });
   */
  getAllModelNames(): string[] {
    return Array.from(this.models.keys());
  }

  /**
   * Obtient le nom d'affichage convivial d'un layout
   * 
   * MAPPING TECHNIQUE ‚Üí USER-FRIENDLY :
   * "layout_eisenhower" ‚Üí "Matrice d'Eisenhower"
   * 
   * FALLBACK :
   * Si aucun nom d'affichage n'est d√©fini, retourne le nom technique.
   * √âvite les erreurs si les m√©tadonn√©es sont incompl√®tes.
   * 
   * @param layoutName - Nom technique du layout
   * @returns string - Nom d'affichage ou nom technique si non trouv√©
   * 
   * @example
   * const displayName = layoutService.getLayoutDisplayName("layout_eisenhower");
   * console.log(displayName); // "Matrice d'Eisenhower"
   * 
   * const unknownName = layoutService.getLayoutDisplayName("layout_custom");
   * console.log(unknownName); // "layout_custom" (fallback)
   */
  getLayoutDisplayName(layoutName: string): string {
    // Chercher dans les m√©tadonn√©es pr√©d√©finies
    const layoutInfo = LAYOUT_INFO[layoutName];
    
    // Retourner le nom d'affichage ou fallback vers le nom technique
    return layoutInfo ? layoutInfo.displayName : layoutName;
  }

  /**
   * Obtient les m√©tadonn√©es compl√®tes d'un layout
   * 
   * M√âTADONN√âES ENRICHIES :
   * - Nom technique et d'affichage
   * - Description et cas d'usage
   * - Liste des sections
   * - Nombre de blocs
   * - Cat√©gorie pour organisation
   * 
   * G√âN√âRATION AUTOMATIQUE :
   * Si les m√©tadonn√©es pr√©d√©finies n'existent pas, g√©n√®re des m√©tadonn√©es
   * basiques √† partir du layout lui-m√™me.
   * 
   * @param name - Nom du layout
   * @returns LayoutInfo | undefined - M√©tadonn√©es ou undefined si layout inexistant
   * 
   * @example
   * const info = layoutService.getModelInfo("layout_eisenhower");
   * if (info) {
   *   console.log(`${info.displayName}: ${info.description}`);
   *   console.log(`Sections: ${info.sections.join(', ')}`);
   *   console.log(`Cat√©gorie: ${info.category}`);
   * }
   */
  getModelInfo(name: string): LayoutInfo | undefined {
    // V√©rifier que le layout existe
    const model = this.models.get(name);
    if (!model) return undefined;

    // Chercher les m√©tadonn√©es pr√©d√©finies
    const info = LAYOUT_INFO[name];
    
    // Retourner m√©tadonn√©es pr√©d√©finies ou g√©n√©r√©es automatiquement
    return info || {
      name,
      displayName: name,                              // Nom technique par d√©faut
      description: 'Layout personnalis√©',             // Description g√©n√©rique
      sections: model.map(block => block.title),      // Extraire les titres des blocs
      blockCount: model.length,                       // Compter les blocs
      category: 'custom'                              // Cat√©gorie par d√©faut
    };
  }

  /**
   * Retourne les m√©tadonn√©es de tous les layouts disponibles
   * 
   * UTILISATION :
   * - Interface utilisateur : afficher tous les layouts avec d√©tails
   * - Filtrage : grouper par cat√©gorie
   * - Documentation : g√©n√©rer de l'aide automatiquement
   * 
   * PERFORMANCE :
   * G√©n√®re les m√©tadonn√©es √† la demande.
   * Pour de meilleures performances avec beaucoup de layouts,
   * on pourrait envisager un cache.
   * 
   * @returns LayoutInfo[] - Array de toutes les m√©tadonn√©es
   */
  getAllModelsInfo(): LayoutInfo[] {
    return Array.from(this.models.keys())
      .map(name => this.getModelInfo(name)!)
      .filter(info => info !== undefined);
  }
}