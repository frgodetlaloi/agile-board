/**
 * =============================================================================
 * SERVICE DE GESTION DES FICHIERS MARKDOWN
 * =============================================================================
 * 
 * Ce service g√®re toutes les op√©rations sur les fichiers markdown dans Obsidian.
 * Il s'occupe du parsing, de la modification et de la cr√©ation de sections.
 * 
 * RESPONSABILIT√âS PRINCIPALES :
 * - Parser les sections H1 des fichiers markdown
 * - Cr√©er automatiquement les sections manquantes
 * - Modifier le contenu de sections sp√©cifiques
 * - Valider la structure des fichiers
 * 
 * CONCEPTS OBSIDIAN IMPORTANTS :
 * - TFile : Repr√©sente un fichier dans le vault Obsidian
 * - App : Instance principale d'Obsidian avec acc√®s au vault
 * - vault.read() : Lit le contenu d'un fichier
 * - vault.modify() : Modifie un fichier existant
 * 
 * PARSING MARKDOWN :
 * Les fichiers markdown sont organis√©s en sections d√©limit√©es par les titres H1 (#).
 * Ce service extrait chaque section avec ses m√©tadonn√©es (position, contenu).
 * 
 * PATTERN DE CONCEPTION :
 * - Service Layer : Encapsule la logique m√©tier
 * - S√©paration des responsabilit√©s : Une classe = une responsabilit√©
 * - Injection de d√©pendance : App inject√©e dans le constructeur
 */

// =============================================================================
// IMPORTS
// =============================================================================

// Import des classes Obsidian pour la manipulation des fichiers
import { App, TFile } from 'obsidian';

// Import des types personnalis√©s depuis notre fichier de types
// ATTENTION : Chemin relatif corrig√© (pas d'alias @/)
import { FileSections, BoardLayout } from '../types';

// =============================================================================
// CLASSE PRINCIPALE DU SERVICE
// =============================================================================

/**
 * Service de gestion des fichiers markdown
 * 
 * PRINCIPE DE CONCEPTION :
 * Cette classe encapsule toute la logique de manipulation des fichiers.
 * Elle ne d√©pend que de l'API Obsidian et de nos types.
 * 
 * PATTERN DEPENDENCY INJECTION :
 * L'instance App est inject√©e dans le constructeur, ce qui permet :
 * - De tester la classe facilement (mock de App)
 * - De r√©utiliser la classe dans diff√©rents contextes
 * - De respecter le principe d'inversion de d√©pendance
 */
export class FileService {
  
  /**
   * CONSTRUCTEUR avec injection de d√©pendance
   * 
   * @param app - Instance principale d'Obsidian
   * 
   * CONCEPT OBSIDIAN - APP :
   * L'objet App donne acc√®s √† toutes les fonctionnalit√©s d'Obsidian :
   * - app.vault : Syst√®me de fichiers
   * - app.metadataCache : Cache des m√©tadonn√©es
   * - app.workspace : Gestion des vues et onglets
   * 
   * MODIFICATEUR private :
   * Rend la propri√©t√© accessible uniquement dans cette classe
   */
  constructor(private app: App) {}

  // ===========================================================================
  // M√âTHODES PRINCIPALES DE PARSING
  // ===========================================================================

  /**
   * Parse toutes les sections H1 d'un fichier markdown
   * 
   * ALGORITHME :
   * 1. Lire le contenu du fichier
   * 2. D√©couper en lignes
   * 3. Identifier les titres H1 (lignes commen√ßant par "# ")
   * 4. Extraire le contenu entre chaque titre
   * 5. Cr√©er des objets FileSection avec m√©tadonn√©es
   * 
   * GESTION DES CAS LIMITES :
   * - Fichier vide : retourne objet vide
   * - Pas de sections H1 : retourne objet vide
   * - Sections vides : incluses avec tableau de lignes vide
   * - Derni√®re section : va jusqu'√† la fin du fichier
   * 
   * @param file - Fichier Obsidian √† parser
   * @returns Promise<FileSections> - Dictionnaire des sections trouv√©es
   * 
   * @example
   * // Pour un fichier contenant :
   * // # Section 1
   * // Contenu 1
   * // # Section 2  
   * // Contenu 2
   * 
   * const sections = await fileService.parseSections(file);
   * // Retourne :
   * // {
   * //   "Section 1": { start: 0, end: 2, lines: ["Contenu 1"] },
   * //   "Section 2": { start: 2, end: 4, lines: ["Contenu 2"] }
   * // }
   */
  async parseSections(file: TFile): Promise<FileSections> {
    // √âTAPE 1 : Lire le contenu du fichier
    // vault.read() est asynchrone car peut n√©cessiter un acc√®s disque
    const content = await this.app.vault.read(file);
    
    // √âTAPE 2 : D√©couper en lignes pour traitement ligne par ligne
    const lines = content.split('\n');
    
    // √âTAPE 3 : Initialiser la structure de retour
    const sections: FileSections = {};
    
    // VARIABLES D'√âTAT pour le parsing
    let currentSection: string | null = null;  // Nom de la section en cours
    let sectionStart = 0;                      // Ligne de d√©but de la section
    
    // Log de d√©marrage pour le d√©bogage
    console.log('üìñ Parsing sections du fichier:', file.basename);

    // √âTAPE 4 : BOUCLE PRINCIPALE de parsing ligne par ligne
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      
      // √âTAPE 4.1 : D√©tecter les titres H1
      // Regex : ^# ([^\n#].*?)\s*$
      // ^ : d√©but de ligne
      // # : caract√®re # litt√©ral
      // ([^\n#].*?) : groupe capturant, tout sauf \n et #
      // \s*$ : espaces optionnels puis fin de ligne
      const headerMatch = line.match(/^# ([^\n#].*?)\s*$/);
      
      if (headerMatch) {
        // NOUVEAU TITRE TROUV√â
        
        // √âTAPE 4.2 : Sauvegarder la section pr√©c√©dente (si elle existe)
        if (currentSection !== null) {
          // Extraire les lignes de contenu (sans le titre)
          const sectionLines = lines.slice(sectionStart + 1, i);
          
          // Cr√©er l'objet FileSection
          sections[currentSection] = {
            start: sectionStart,    // Index de la ligne du titre
            end: i,                 // Index de la ligne suivante (exclus)
            lines: sectionLines     // Contenu de la section
          };
          
          // Log pour le d√©bogage
          console.log(`üìÑ Section "${currentSection}": ${sectionLines.length} lignes`);
        }
        
        // √âTAPE 4.3 : Commencer la nouvelle section
        currentSection = headerMatch[1].trim();  // Nom sans espaces
        sectionStart = i;                        // Position du titre
      }
    }

    // √âTAPE 5 : Traiter la derni√®re section (pas de titre suivant)
    if (currentSection !== null) {
      // La derni√®re section va jusqu'√† la fin du fichier
      const sectionLines = lines.slice(sectionStart + 1);
      
      sections[currentSection] = {
        start: sectionStart,
        end: lines.length,        // Fin du fichier
        lines: sectionLines
      };
      
      console.log(`üìÑ Section "${currentSection}": ${sectionLines.length} lignes`);
    }

    // √âTAPE 6 : Log du r√©sultat et retour
    console.log('‚úÖ Sections trouv√©es:', Object.keys(sections));
    return sections;
  }

  // ===========================================================================
  // M√âTHODES DE MODIFICATION DES FICHIERS
  // ===========================================================================

  /**
   * Cr√©e automatiquement les sections manquantes dans un fichier
   * 
   * PROCESSUS :
   * 1. Parser les sections existantes
   * 2. Comparer avec les sections requises par le layout
   * 3. Identifier les sections manquantes
   * 4. Trouver le point d'insertion optimal
   * 5. G√©n√©rer le contenu des nouvelles sections
   * 6. Ins√©rer et sauvegarder
   * 
   * STRAT√âGIE D'INSERTION :
   * - Apr√®s le frontmatter YAML (s'il existe)
   * - Sinon au d√©but du fichier
   * - Chaque section avec titre H1 et ligne vide
   * 
   * @param file - Fichier √† modifier
   * @param layout - Layout d√©finissant les sections requises
   * @returns Promise<boolean> - true si des sections ont √©t√© cr√©√©es
   * 
   * @example
   * // Layout requiert : ["Section A", "Section B", "Section C"]
   * // Fichier contient : ["Section A", "Section C"]
   * // R√©sultat : Ajoute "Section B" au fichier
   */
  async createMissingSections(file: TFile, layout: BoardLayout[]): Promise<boolean> {
    console.log('üîß V√©rification des sections manquantes...');
    
    // √âTAPE 1 : Analyser l'√©tat actuel du fichier
    const sections = await this.parseSections(file);
    const existingSections = Object.keys(sections);
    const requiredSections = layout.map(block => block.title);
    
    // √âTAPE 2 : Identifier les sections manquantes
    const missingSections = requiredSections.filter(section => 
      !existingSections.includes(section)
    );

    // √âTAPE 3 : V√©rifier s'il y a du travail √† faire
    if (missingSections.length === 0) {
      console.log('‚úÖ Toutes les sections sont pr√©sentes');
      return false;  // Aucune modification n√©cessaire
    }

    console.log('üìù Sections manquantes d√©tect√©es:', missingSections);
    
    // √âTAPE 4 : Pr√©parer la modification du fichier
    const content = await this.app.vault.read(file);
    const lines = content.split('\n');

    // √âTAPE 5 : Trouver le point d'insertion optimal
    const insertionPoint = this.findInsertionPoint(lines);
    
    // √âTAPE 6 : G√©n√©rer le contenu des nouvelles sections
    const newSectionLines: string[] = [];
    for (const sectionTitle of missingSections) {
      newSectionLines.push('');              // Ligne vide avant la section
      newSectionLines.push(`# ${sectionTitle}`);  // Titre H1
      newSectionLines.push('');              // Ligne vide apr√®s le titre
    }

    // √âTAPE 7 : Ins√©rer les nouvelles sections dans le contenu
    const updatedLines = [
      ...lines.slice(0, insertionPoint),     // Contenu avant insertion
      ...newSectionLines,                    // Nouvelles sections
      ...lines.slice(insertionPoint)        // Contenu apr√®s insertion
    ];

    // √âTAPE 8 : Sauvegarder le fichier modifi√©
    // vault.modify() sauvegarde et met √† jour les m√©tadonn√©es
    await this.app.vault.modify(file, updatedLines.join('\n'));
    
    console.log(`‚úÖ ${missingSections.length} sections ajout√©es:`, missingSections);
    return true;  // Modifications effectu√©es
  }

  /**
   * Trouve le point d'insertion optimal pour les nouvelles sections
   * 
   * LOGIQUE :
   * 1. Chercher un frontmatter YAML (entre --- ... ---)
   * 2. Si frontmatter trouv√© : ins√©rer apr√®s
   * 3. Sinon : ins√©rer au d√©but du fichier
   * 
   * FRONTMATTER YAML :
   * Bloc de m√©tadonn√©es au d√©but des fichiers markdown :
   * ---
   * title: Mon titre
   * tags: [tag1, tag2]
   * ---
   * 
   * @param lines - Lignes du fichier
   * @returns number - Index de ligne o√π ins√©rer
   * 
   * @example
   * // Fichier avec frontmatter :
   * // ---
   * // title: Test
   * // ---
   * // # Existing Section
   * 
   * findInsertionPoint(lines); // Retourne 3 (apr√®s le frontmatter)
   */
  private findInsertionPoint(lines: string[]): number {
    // VARIABLES D'√âTAT pour le parsing du frontmatter
    let frontmatterEnd = 0;
    let inFrontmatter = false;
    
    // BOUCLE de d√©tection du frontmatter
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      
      // Premi√®re ligne : doit √™tre "---" pour commencer un frontmatter
      if (i === 0 && line === '---') {
        inFrontmatter = true;
        continue;
      }
      
      // Si on est dans le frontmatter et qu'on trouve "---", c'est la fin
      if (inFrontmatter && line === '---') {
        frontmatterEnd = i + 1;  // Ligne apr√®s le frontmatter
        break;
      }
    }

    // D√âCISION du point d'insertion
    if (frontmatterEnd === 0) {
      // Pas de frontmatter trouv√© : ins√©rer au d√©but
      return 0;
    } else {
      // Frontmatter trouv√© : ins√©rer apr√®s
      return frontmatterEnd;
    }
  }

  /**
   * Met √† jour le contenu d'une section sp√©cifique
   * 
   * PROCESSUS :
   * 1. Parser les sections pour trouver la section cible
   * 2. Remplacer son contenu par le nouveau
   * 3. Conserver le titre et la structure
   * 4. Sauvegarder le fichier
   * 
   * UTILISATION :
   * Appel√©e par MarkdownFrame quand l'utilisateur modifie une section
   * dans l'interface Board.
   * 
   * @param file - Fichier √† modifier
   * @param sectionName - Nom de la section √† mettre √† jour
   * @param newContent - Nouveau contenu (sans le titre #)
   * 
   * @example
   * await fileService.updateSection(file, "Urgent et Important", "- Nouvelle t√¢che\n- Autre t√¢che");
   */
  async updateSection(file: TFile, sectionName: string, newContent: string): Promise<void> {
    // √âTAPE 1 : Lire et parser le fichier
    const content = await this.app.vault.read(file);
    const lines = content.split('\n');
    const sections = await this.parseSections(file);
    const section = sections[sectionName];
    
    // √âTAPE 2 : V√©rifier que la section existe
    if (!section) {
      console.warn(`‚ö†Ô∏è Section "${sectionName}" non trouv√©e pour mise √† jour`);
      return;
    }

    // √âTAPE 3 : Construire le nouveau contenu
    const newLines = [
      ...lines.slice(0, section.start + 1),  // Avant la section (inclus le titre)
      ...newContent.split('\n'),             // Nouveau contenu
      ...lines.slice(section.end)            // Apr√®s la section
    ];

    // √âTAPE 4 : Sauvegarder
    await this.app.vault.modify(file, newLines.join('\n'));
    console.log(`‚úÖ Section "${sectionName}" mise √† jour`);
  }

  // ===========================================================================
  // M√âTHODES UTILITAIRES
  // ===========================================================================

  /**
   * Identifie les sections manquantes par rapport √† un layout
   * 
   * ALGORITHME SIMPLE :
   * Filtre les sections requises qui ne sont pas dans les sections existantes.
   * 
   * FONCTION PURE :
   * - Pas d'effets de bord
   * - M√™me entr√©e = m√™me sortie
   * - Facilement testable
   * 
   * @param existingSections - Sections actuellement pr√©sentes
   * @param requiredSections - Sections requises par le layout
   * @returns string[] - Liste des sections manquantes
   * 
   * @example
   * const missing = fileService.getMissingSections(
   *   ["Section A", "Section C"],           // Existantes
   *   ["Section A", "Section B", "Section C"]  // Requises
   * );
   * // Retourne : ["Section B"]
   */
  getMissingSections(existingSections: string[], requiredSections: string[]): string[] {
    return requiredSections.filter(section => 
      !existingSections.includes(section)
    );
  }
}

// =============================================================================
// NOTES POUR LES D√âBUTANTS
// =============================================================================

/*
CONCEPTS CL√âS √Ä RETENIR :

1. **Service Layer Pattern** :
   - Encapsule la logique m√©tier
   - S√©pare les responsabilit√©s
   - Facilite les tests et la maintenance
   - Interface claire entre domaines

2. **Parsing de Fichiers** :
   - Traitement ligne par ligne
   - Machine √† √©tats (section courante)
   - Gestion des cas limites
   - Expressions r√©guli√®res pour pattern matching

3. **API Obsidian** :
   - TFile : Repr√©sentation d'un fichier
   - vault.read() : Lecture asynchrone
   - vault.modify() : √âcriture avec mise √† jour automatique
   - Gestion des erreurs et exceptions

4. **Manipulation de Cha√Ænes** :
   - split('\n') : D√©coupage en lignes
   - slice() : Extraction de sous-tableaux
   - join('\n') : Reconstruction du contenu
   - trim() : Suppression des espaces

BONNES PRATIQUES APPLIQU√âES :

1. **Gestion d'Erreurs** :
   - V√©rification des pr√©conditions
   - Retours explicites (boolean, null checks)
   - Logs informatifs pour le d√©bogage
   - Fallbacks pour cas impr√©vus

2. **Performance** :
   - Parsing en une seule passe
   - √âviter les regex co√ªteuses
   - Manipulation efficace des tableaux
   - Logs conditionnels

3. **Lisibilit√©** :
   - Noms de variables explicites
   - Commentaires sur l'algorithme
   - D√©composition en √©tapes claires
   - Exemples dans la documentation

4. **Testabilit√©** :
   - Injection de d√©pendance (App)
   - Fonctions pures quand possible
   - Interfaces claires
   - S√©paration des responsabilit√©s

√âVOLUTION POSSIBLE :

1. **Optimisations** :
   - Cache des sections pars√©es
   - Parsing incr√©mental
   - Validation de schemas
   - Support de markdown complexe

2. **Fonctionnalit√©s** :
   - Backup avant modification
   - Historique des changements
   - Validation du contenu
   - Support de templates

3. **Robustesse** :
   - Gestion des conflits
   - R√©cup√©ration d'erreurs
   - Validation stricte
   - Logs structur√©s
*/