/**
 * =============================================================================
 * D√âTECTEUR AUTOMATIQUE DE MOD√àLES ET GESTIONNAIRE D'√âV√âNEMENTS
 * =============================================================================
 * 
 * Ce gestionnaire surveille automatiquement les changements dans Obsidian
 * et met √† jour l'interface utilisateur en cons√©quence.
 * 
 * RESPONSABILIT√âS PRINCIPALES :
 * - D√©tecter quand un fichier avec layout agile-board est ouvert/modifi√©
 * - Mettre √† jour automatiquement les boutons de basculement
 * - Surveiller les changements de m√©tadonn√©es (frontmatter)
 * - G√©rer les fichiers ouverts au d√©marrage du plugin
 * - Optimiser les performances avec un cache intelligent
 * 
 * CONCEPTS OBSIDIAN IMPORTANTS :
 * - metadataCache : Cache des m√©tadonn√©es de tous les fichiers
 * - workspace : Gestionnaire des onglets et vues
 * - file-open : √âv√©nement d'ouverture de fichier
 * - active-leaf-change : √âv√©nement de changement d'onglet
 * - iterateAllLeaves : Parcours de tous les onglets ouverts
 * 
 * OPTIMISATIONS DE PERFORMANCE :
 * - Cache des fichiers d√©j√† trait√©s (√©vite les retraitements)
 * - Nettoyage automatique du cache (√©vite la fuite m√©moire)
 * - D√©lais intelligents pour grouper les √©v√©nements
 * - Filtrage des fichiers non-markdown
 * 
 * PATTERN DE CONCEPTION :
 * - Observer Pattern : √âcoute les √©v√©nements syst√®me
 * - Cache Pattern : Optimise les performances
 * - Coordinator Pattern : Coordonne avec ViewSwitcher
 */

// =============================================================================
// IMPORTS
// =============================================================================

// Import des types Obsidian pour la manipulation des fichiers
import { TFile } from 'obsidian';

// Import du type du plugin principal
// ATTENTION : Utilisation du chemin relatif corrig√© (pas d'alias @/)
import type AgileBoardPlugin from '../main';

// =============================================================================
// CLASSE PRINCIPALE DU D√âTECTEUR
// =============================================================================

/**
 * D√©tecteur automatique de mod√®les et gestionnaire d'√©v√©nements
 * 
 * ARCHITECTURE :
 * Cette classe agit comme un coordinateur entre les √©v√©nements Obsidian
 * et les mises √† jour de l'interface utilisateur.
 * 
 * PATTERN OBSERVER :
 * S'abonne √† plusieurs types d'√©v√©nements Obsidian et r√©agit en cons√©quence.
 * Plus efficace que de sonder constamment l'√©tat du syst√®me.
 * 
 * GESTION DU CACHE :
 * Maintient un cache des fichiers d√©j√† trait√©s pour √©viter les retraitements
 * inutiles et optimiser les performances.
 */
export class ModelDetector {
  
  /**
   * Cache des fichiers d√©j√† trait√©s
   * 
   * STRUCTURE DE DONN√âES :
   * Set<string> pour un acc√®s O(1) et √©viter les doublons.
   * 
   * CL√â DE CACHE :
   * "chemin-du-fichier-timestamp" pour invalidation automatique
   * quand le fichier est modifi√©.
   * 
   * AVANTAGES :
   * - √âvite les retraitements inutiles
   * - Performance optimis√©e pour les gros vaults
   * - Invalidation automatique lors des modifications
   */
  private processedFiles = new Set<string>();

  /**
   * CONSTRUCTEUR avec injection de d√©pendance
   * 
   * @param plugin - Instance du plugin principal
   * 
   * D√âPENDANCES UTILIS√âES :
   * - plugin.app : Pour acc√©der aux APIs Obsidian
   * - plugin.layoutService : Pour valider les layouts
   * - plugin.viewSwitcher : Pour mettre √† jour l'interface
   * - plugin.registerEvent : Pour l'abonnement s√©curis√© aux √©v√©nements
   */
  constructor(private plugin: AgileBoardPlugin) {}

  // ===========================================================================
  // M√âTHODES DE CYCLE DE VIE
  // ===========================================================================

  /**
   * Initialise la surveillance des √©v√©nements Obsidian
   * 
   * √âV√âNEMENTS SURVEILL√âS :
   * 1. metadataCache.on('changed') : Modification des m√©tadonn√©es
   * 2. workspace.on('file-open') : Ouverture de fichier
   * 3. workspace.on('active-leaf-change') : Changement d'onglet actif
   * 
   * D√âLAIS D'INITIALISATION :
   * D√©lai de 1 seconde pour laisser Obsidian finir son initialisation
   * avant de traiter les fichiers d√©j√† ouverts.
   * 
   * PATTERN REGISTER-EVENT :
   * Utilise plugin.registerEvent() pour un nettoyage automatique
   * des √©couteurs lors du d√©chargement du plugin.
   * 
   * @example
   * modelDetector.onLoad();
   * // √Ä partir de maintenant, les changements sont d√©tect√©s automatiquement
   */
  onLoad(): void {
    // √âV√âNEMENT 1 : Modification des m√©tadonn√©es
    // D√©clench√© quand le frontmatter d'un fichier change
    this.plugin.registerEvent(
      this.plugin.app.metadataCache.on('changed', (file) => {
        this.handleMetadataChanged(file);
      })
    );

    // √âV√âNEMENT 2 : Ouverture de fichier
    // D√©clench√© quand un utilisateur ouvre un fichier
    this.plugin.registerEvent(
      this.plugin.app.workspace.on('file-open', (file) => {
        if (file) {
          this.handleFileOpen(file);
        }
      })
    );

    // √âV√âNEMENT 3 : Changement d'onglet actif
    // D√©clench√© quand l'utilisateur clique sur un autre onglet
    this.plugin.registerEvent(
      this.plugin.app.workspace.on('active-leaf-change', () => {
        // D√âLAI COURT : Laisser Obsidian finaliser le changement
        setTimeout(() => {
          const activeFile = this.plugin.app.workspace.getActiveFile();
          if (activeFile) {
            this.handleFileOpen(activeFile);
          }
        }, 100);
      })
    );

    // INITIALISATION DIFF√âR√âE : Traiter les fichiers d√©j√† ouverts
    // D√©lai plus long pour l'initialisation compl√®te d'Obsidian
    setTimeout(() => {
      this.processAllOpenFiles();
    }, 1000);
  }

  /**
   * Nettoie les ressources utilis√©es par le d√©tecteur
   * 
   * APPEL√âE PAR :
   * Le plugin principal lors de son d√©chargement (onunload).
   * 
   * NETTOYAGE :
   * - Vide le cache des fichiers trait√©s
   * - Les √©couteurs d'√©v√©nements sont automatiquement nettoy√©s par Obsidian
   * 
   * IMPORTANCE :
   * √âvite les fuites m√©moire et pr√©pare un rechargement propre du plugin.
   */
  onUnload(): void {
    this.processedFiles.clear();
  }

  // ===========================================================================
  // GESTIONNAIRES D'√âV√âNEMENTS PRIV√âS
  // ===========================================================================

  /**
   * G√®re les changements de m√©tadonn√©es d'un fichier
   * 
   * D√âCLENCHEMENT :
   * Quand l'utilisateur modifie le frontmatter d'un fichier.
   * Par exemple, ajouter ou changer "agile-board: layout_kanban".
   * 
   * LOGIQUE :
   * Les m√©tadonn√©es chang√©es peuvent affecter l'affichage des boutons,
   * donc on relance le traitement du fichier.
   * 
   * @param file - Fichier dont les m√©tadonn√©es ont chang√©
   * 
   * @example
   * // L'utilisateur ajoute dans le frontmatter :
   * // agile-board: layout_eisenhower
   * // ‚Üí handleMetadataChanged() est appel√©e
   * // ‚Üí Les boutons de basculement apparaissent
   */
  private handleMetadataChanged(file: TFile): void {
    console.log('üìù M√©tadonn√©es chang√©es pour:', file.basename);
    this.processFile(file);
  }

  /**
   * G√®re l'ouverture d'un fichier
   * 
   * D√âCLENCHEMENT :
   * - Ouverture d'un nouveau fichier
   * - Basculement vers un onglet existant
   * - Navigation par liens internes
   * 
   * @param file - Fichier qui vient d'√™tre ouvert/activ√©
   */
  private handleFileOpen(file: TFile): void {
    console.log('üìÇ Fichier ouvert:', file.basename);
    this.processFile(file);
  }

  /**
   * Traite tous les fichiers d√©j√† ouverts au d√©marrage
   * 
   * UTILISATION :
   * Appel√©e une fois lors de l'initialisation pour traiter les fichiers
   * qui √©taient d√©j√† ouverts avant l'activation du plugin.
   * 
   * M√âTHODE OBSIDIAN :
   * iterateAllLeaves() parcourt tous les onglets ouverts dans l'espace de travail.
   * 
   * FILTRAGE :
   * Seuls les onglets avec vue markdown et fichier valide sont trait√©s.
   * 
   * @example
   * // Au d√©marrage d'Obsidian avec 3 fichiers ouverts :
   * // processAllOpenFiles() va traiter les 3 fichiers
   * // et afficher les boutons appropri√©s
   */
  private processAllOpenFiles(): void {
    console.log('üîç Traitement initial de tous les fichiers ouverts...');
    
    // PARCOURS DE TOUS LES ONGLETS
    this.plugin.app.workspace.iterateAllLeaves((leaf) => {
      const view = leaf.view;
      
      // FILTRAGE : Seulement les vues markdown avec fichier
      if (view.getViewType() === 'markdown' && (view as any).file) {
        this.processFile((view as any).file);
      }
    });
  }

  // ===========================================================================
  // LOGIQUE M√âTIER PRINCIPALE
  // ===========================================================================

  /**
   * Traite un fichier individuel et met √† jour l'interface si n√©cessaire
   * 
   * ALGORITHME :
   * 1. Filtrer les fichiers non-markdown
   * 2. G√©n√©rer une cl√© de cache unique
   * 3. V√©rifier si d√©j√† trait√© (cache hit)
   * 4. D√©tecter si le fichier a un layout agile-board
   * 5. Mettre √† jour l'interface via ViewSwitcher
   * 6. Nettoyer le cache si n√©cessaire
   * 
   * OPTIMISATION DE CACHE :
   * La cl√© inclut le timestamp de modification (mtime) pour invalider
   * automatiquement le cache quand le fichier change.
   * 
   * @param file - Fichier √† traiter
   * 
   * @example
   * // Premi√®re fois : traitement complet
   * processFile(myFile); // Cache miss ‚Üí traitement
   * 
   * // Deuxi√®me fois (fichier inchang√©) : cache hit
   * processFile(myFile); // Cache hit ‚Üí pas de traitement
   * 
   * // Apr√®s modification du fichier : cache invalid√©
   * processFile(myFile); // Cache miss ‚Üí traitement
   */
  private processFile(file: TFile): void {
    // FILTRE 1 : Seulement les fichiers markdown
    if (!file.path.endsWith('.md')) return;

    // G√âN√âRATION DE CL√â DE CACHE
    // Format : "chemin-timestamp" pour invalidation automatique
    const fileKey = `${file.path}-${file.stat.mtime}`;
    
    // V√âRIFICATION DU CACHE
    if (this.processedFiles.has(fileKey)) return;
    
    // MISE √Ä JOUR DU CACHE
    this.processedFiles.add(fileKey);

    // NETTOYAGE PR√âVENTIF DU CACHE
    this.cleanupProcessedFiles();

    // D√âTECTION DU LAYOUT
    const hasLayout = this.hasAgileBoardLayout(file);
    console.log(`üéØ Fichier "${file.basename}" - Layout agile-board: ${hasLayout ? 'OUI' : 'NON'}`);

    // MISE √Ä JOUR DE L'INTERFACE (avec d√©lai pour stabilit√©)
    setTimeout(() => {
        if (this.plugin.viewSwitcher) {
            this.plugin.viewSwitcher.updateSwitchButtonForFile(file);
        }
    }, 100); // Augment√© de 50ms √† 100ms

    // NOUVEAU : Double v√©rification pour les changements critiques
    setTimeout(() => {
        if (this.plugin.viewSwitcher) {
            this.plugin.viewSwitcher.updateSwitchButtonForFile(file);
        }
    }, 500); // V√©rification suppl√©mentaire apr√®s 500ms
  }

  /**
   * V√©rifie si un fichier a un layout agile-board valide
   * 
   * VALIDATION EN DEUX √âTAPES :
   * 1. V√©rifier la pr√©sence du champ 'agile-board' dans le frontmatter
   * 2. V√©rifier que le layout existe dans le LayoutService
   * 
   * GESTION D'ERREURS :
   * Si un layout est sp√©cifi√© mais n'existe pas, log un warning
   * mais retourne false (traitement gracieux).
   * 
   * @param file - Fichier √† v√©rifier
   * @returns boolean - true si le fichier a un layout valide
   * 
   * @example
   * // Fichier avec frontmatter valide :
   * // ---
   * // agile-board: layout_eisenhower
   * // ---
   * hasAgileBoardLayout(file); // true
   * 
   * // Fichier avec layout inexistant :
   * // ---
   * // agile-board: layout_inexistant
   * // ---
   * hasAgileBoardLayout(file); // false + warning
   */
  private hasAgileBoardLayout(file: TFile): boolean {
    // √âTAPE 1 : Lire les m√©tadonn√©es du fichier
    const fileCache = this.plugin.app.metadataCache.getFileCache(file);
    const layoutName = fileCache?.frontmatter?.['agile-board'];
    
    // V√âRIFICATION 1 : Pr√©sence du champ
    if (!layoutName) return false;

    // √âTAPE 2 : Valider que le layout existe
    const layout = this.plugin.layoutService.getModel(layoutName);
    if (!layout) {
      console.warn(`‚ö†Ô∏è Layout "${layoutName}" sp√©cifi√© mais non trouv√©`);
      return false;
    }

    return true;
  }

  // ===========================================================================
  // GESTION DU CACHE ET OPTIMISATIONS
  // ===========================================================================

  /**
   * Nettoie le cache pour √©viter une croissance excessive
   * 
   * STRAT√âGIE DE NETTOYAGE :
   * - Limite : 100 entr√©es maximum dans le cache
   * - M√©thode : Garder les 50 entr√©es les plus r√©centes
   * - D√©clenchement : √Ä chaque ajout dans le cache
   * 
   * POURQUOI NETTOYER :
   * - √âviter la fuite m√©moire avec de gros vaults
   * - Maintenir des performances optimales
   * - Les anciennes entr√©es sont probablement obsol√®tes
   * 
   * ALGORITHME LRU SIMPLE :
   * Les entr√©es sont dans l'ordre d'insertion dans le Set.
   * On garde les derni√®res ajout√©es (= les plus r√©cemment utilis√©es).
   * 
   * @example
   * // Cache avec 100+ entr√©es
   * cleanupProcessedFiles();
   * // ‚Üí Cache r√©duit √† 50 entr√©es les plus r√©centes
   */
  private cleanupProcessedFiles(): void {
    // V√âRIFICATION DE LA LIMITE
    if (this.processedFiles.size > 100) {
      // EXTRACTION DES ENTR√âES ACTUELLES
      const entries = Array.from(this.processedFiles);
      
      // S√âLECTION DES 50 PLUS R√âCENTES
      const toKeep = entries.slice(-50);  // Les 50 derni√®res
      
      // RECONSTRUCTION DU CACHE
      this.processedFiles.clear();
      toKeep.forEach(entry => this.processedFiles.add(entry));
      
      console.log('üßπ Cache nettoy√©: gard√© 50 entr√©es sur', entries.length);
    }
  }

  // ===========================================================================
  // M√âTHODES UTILITAIRES PUBLIQUES
  // ===========================================================================

  /**
   * Force une mise √† jour compl√®te de tous les fichiers ouverts
   * 
   * UTILISATION :
   * - Commande de d√©bogage
   * - Apr√®s rechargement de layouts
   * - R√©cup√©ration d'√©tat incoh√©rent
   * 
   * PROCESSUS :
   * 1. Vider compl√®tement le cache
   * 2. Retraiter tous les fichiers ouverts
   * 3. Mettre √† jour toute l'interface
   * 
   * PERFORMANCE :
   * Op√©ration co√ªteuse, √† utiliser avec parcimonie.
   * 
   * @example
   * // L'utilisateur utilise la commande "Force Update Board Buttons"
   * modelDetector.forceUpdate();
   * // ‚Üí Tous les boutons sont recalcul√©s et mis √† jour
   */
  forceUpdate(): void {
    // √âTAPE 1 : Vider le cache complet
    this.processedFiles.clear();
    
    // √âTAPE 2 : Retraiter tous les fichiers
    this.processAllOpenFiles();
    
    console.log('üîÑ Mise √† jour forc√©e termin√©e');
  }
}

// =============================================================================
// NOTES POUR LES D√âBUTANTS
// =============================================================================

/*
CONCEPTS CL√âS √Ä RETENIR :

1. **Observer Pattern Appliqu√©** :
   - √âcoute passive des √©v√©nements syst√®me
   - R√©action automatique aux changements
   - D√©couplage entre √©metteur et r√©cepteur
   - Performance sup√©rieure au polling

2. **Cache Pattern pour Performance** :
   - √âvite les retraitements inutiles
   - Cl√© composite avec timestamp
   - Invalidation automatique
   - Nettoyage pr√©ventif de la m√©moire

3. **Coordination de Composants** :
   - Pont entre √©v√©nements et interface
   - D√©l√©gation √† des composants sp√©cialis√©s
   - Orchestration de mises √† jour complexes
   - S√©paration des responsabilit√©s

4. **Gestion d'√âtat √âv√©nementielle** :
   - √âtat d√©duit des √©v√©nements
   - Pas de synchronisation manuelle
   - Coh√©rence automatique
   - Robustesse face aux changements

CONCEPTS OBSIDIAN SP√âCIFIQUES :

1. **Syst√®me d'√âv√©nements** :
   - metadataCache.on('changed') : Modifications de frontmatter
   - workspace.on('file-open') : Navigation fichiers
   - workspace.on('active-leaf-change') : Changements d'onglets
   - registerEvent() : Abonnement s√©curis√©

2. **M√©tadonn√©es et Cache** :
   - metadataCache : Cache global des m√©tadonn√©es
   - getFileCache() : M√©tadonn√©es d'un fichier sp√©cifique
   - frontmatter : Propri√©t√©s YAML du fichier
   - Invalidation automatique lors des modifications

3. **Workspace et Navigation** :
   - activeFile : Fichier actuellement ouvert
   - iterateAllLeaves() : Parcours des onglets
   - leaf.view : Vue contenue dans un onglet
   - D√©tection de types de vue

PATTERNS DE PERFORMANCE :

1. **Cache Intelligent** :
   - Cl√© incluant timestamp pour invalidation
   - Taille limit√©e avec nettoyage LRU
   - √âvite les calculs redondants
   - Balance m√©moire vs CPU

2. **D√©lais Optimis√©s** :
   - Courts d√©lais pour stabilit√© UI
   - Longs d√©lais pour initialisation
   - √âvite les cascades d'√©v√©nements
   - Groupement naturel des mises √† jour

3. **Filtrage Efficace** :
   - Filtre pr√©coce des fichiers non-markdown
   - V√©rification de cache avant traitement
   - Validation en √©tapes courtes
   - Arr√™t rapide des cas invalides

BONNES PRATIQUES APPLIQU√âES :

1. **Gestion de Cycle de Vie** :
   - Initialisation diff√©r√©e et progressive
   - Nettoyage complet des ressources
   - Gestion des rechargements
   - √âtat coh√©rent √† tout moment

2. **Robustesse** :
   - Gestion gracieuse des erreurs
   - Warnings informatifs
   - Continuation malgr√© les probl√®mes
   - R√©cup√©ration d'√©tat possible

3. **Observabilit√©** :
   - Logs d√©taill√©s avec contexte
   - M√©triques de performance (cache)
   - Tra√ßabilit√© des op√©rations
   - Facilite le d√©bogage

4. **Extensibilit√©** :
   - Interface claire pour force update
   - S√©paration d√©tection/action
   - Facilit√© d'ajout d'√©v√©nements
   - Configuration flexible

PATTERNS D'EXTENSION POSSIBLE :

1. **D√©tection Avanc√©e** :
   - Analyse de contenu des fichiers
   - D√©tection de patterns dans le texte
   - Heuristiques de classification
   - IA pour suggestions automatiques

2. **Cache Sophistiqu√©** :
   - Persistence entre sessions
   - Strat√©gies de nettoyage configurables
   - M√©triques de hit/miss ratio
   - Cache distribu√© pour √©quipes

3. **√âv√©nements Personnalis√©s** :
   - √âmission d'√©v√©nements plugin
   - Hooks pour autres plugins
   - Configuration des d√©clencheurs
   - Filtres utilisateur

D√âBOGAGE ET MONITORING :

1. **Probl√®mes Courants** :
   - Cache qui ne se vide pas : v√©rifier cleanupProcessedFiles()
   - √âv√©nements manqu√©s : contr√¥ler les d√©lais setTimeout
   - Performance d√©grad√©e : monitorer la taille du cache
   - Boutons incoh√©rents : utiliser forceUpdate()

2. **M√©triques √† Surveiller** :
   - Taille du cache processedFiles
   - Fr√©quence des √©v√©nements triggered
   - Ratio cache hit/miss
   - Temps de traitement des fichiers

3. **Outils de Debug** :
   - forceUpdate() pour reset complet
   - Logs console d√©taill√©s
   - Inspection du cache via console
   - M√©triques de performance
*/