/**
 * =============================================================================
 * COMPOSANT D'√âDITION MARKDOWN INTERACTIF POUR LES SECTIONS DE BOARD
 * =============================================================================
 * * Ce composant g√®re l'affichage et l'√©dition d'une section markdown individuelle
 * dans une frame de board. Il permet de basculer entre vue preview et √©dition.
 * * RESPONSABILIT√âS PRINCIPALES :
 * - Afficher le contenu markdown rendu (mode preview)
 * - Permettre l'√©dition inline du contenu (mode √©dition)
 * - G√©rer les interactions avec les √©l√©ments markdown (t√¢ches, liens)
 * - Sauvegarder automatiquement les modifications
 * - Int√©grer avec le moteur de rendu Obsidian
 * * MODES DE FONCTIONNEMENT :
 * 1. Mode Preview : Affichage du markdown rendu avec interactions
 * 2. Mode √âdition : Textarea pour modification directe du contenu
 * 3. Basculement automatique : Clic ‚Üí √©dition, Blur/Escape ‚Üí preview
 * * CONCEPTS OBSIDIAN IMPORTANTS :
 * - MarkdownRenderer : Moteur de rendu officiel d'Obsidian
 * - Component : Syst√®me de cycle de vie pour les rendus
 * - Plugins Markdown : Support des extensions comme Tasks, Dataview
 * - Variables CSS : Int√©gration avec le th√®me d'Obsidian
 * * INTERACTIONS SUPPORT√âES :
 * - T√¢ches cochables (checkbox tasks)
 * - Liens internes Obsidian [[...]]
 * - √âl√©ments Dataview et autres plugins
 * - Navigation par liens avec openLinkText()
 * * PATTERN DE CONCEPTION :
 * - Component Pattern : Composant r√©utilisable et auto-g√©r√©
 * - State Machine : Bascule entre √©tats preview/√©dition
 * - Observer Pattern : Callback pour notifier les changements
 * - Debouncing : D√©lai avant sauvegarde pour optimiser
 * 
 * ‚úÖ CORRECTION BUG #4 : Gestion d'erreurs compl√®te avec fallbacks
 */

// =============================================================================
// IMPORTS
// =============================================================================

// Import des classes Obsidian pour manipulation des fichiers et rendu
import { App, TFile } from 'obsidian';

// Import des types personnalis√©s depuis notre fichier de types
import { FileSection } from '../types';

import { LoggerService } from '../services/LoggerService';

// =============================================================================
// CLASSE PRINCIPALE DU COMPOSANT
// =============================================================================

/**
 * Composant d'√©dition markdown interactif avec gestion d'erreurs robuste
 * 
 * ‚úÖ AM√âLIORATIONS Bug #4 :
 * - Try-catch global sur toutes les op√©rations critiques
 * - Fallbacks intelligents en cas d'erreur de rendu
 * - Recovery automatique des √©tats incoh√©rents
 * - Logging d√©taill√© des erreurs pour debugging
 * - Validation des donn√©es avant traitement
 */
export class MarkdownFrame {
  
  // ===========================================================================
  // PROPRI√âT√âS D'√âTAT DU COMPOSANT
  // ===========================================================================
  
  /**
   * Indicateur du mode d'√©dition actuel
   * * √âTATS POSSIBLES :
   * - false : Mode preview (affichage rendu)
   * - true : Mode √©dition (textarea visible)
   */
  private isEditing = false;
  
  /**
   * Conteneur pour l'affichage du markdown rendu
   * * UTILISATION :
   * Contient le HTML g√©n√©r√© par le moteur de rendu Obsidian.
   * Visible en mode preview, cach√© en mode √©dition.
   */
  private previewContainer!: HTMLElement;
  
  /**
   * Conteneur pour l'interface d'√©dition
   * * UTILISATION :
   * Contient le textarea d'√©dition.
   * Visible en mode √©dition, cach√© en mode preview.
   */
  private editorContainer!: HTMLElement;
  
  /**
   * Zone de texte pour l'√©dition directe
   * * CONFIGURATION :
   * Styling pour s'int√©grer avec le th√®me Obsidian.
   * √âv√©nements pour sauvegarder et basculer les modes.
   */
  private textArea!: HTMLTextAreaElement;
  
  /**
   * Contenu markdown actuel de la section
   * * SYNCHRONISATION :
   * Maintenu en sync avec le textarea et les callbacks.
   * Source de v√©rit√© pour l'√©tat du composant.
   */
  private content: string;
  
  /**
   * Timer pour la sauvegarde diff√©r√©e
   * * DEBOUNCING :
   * √âvite de sauvegarder √† chaque frappe.
   * Am√©liore les performances et l'exp√©rience utilisateur.
   */
  private changeTimeout: any;

  /**
   * Logger pour les messages de debug et info
   * * UTILISATION :
   * Pour suivre le cycle de vie du composant et les erreurs.
   * Permet de d√©sactiver les logs en production.
   */
  private logger: LoggerService;

  /**
   * ‚úÖ NOUVEAU : Indicateur d'√©tat d'erreur
   */
  private isInErrorState = false;

  /**
   * ‚úÖ NOUVEAU : Compteur de tentatives de rendu
   */
  private renderAttempts = 0;
  private readonly MAX_RENDER_ATTEMPTS = 3;

  // ===========================================================================
  // CONSTRUCTEUR ET INITIALISATION
  // ===========================================================================

  /**
   * CONSTRUCTEUR du composant MarkdownFrame avec validation robuste
   */
  constructor(
    private app: App,
    private container: HTMLElement,
    private file: TFile,
    private section: FileSection,
    private onChange: (content: string) => void,
    logger: LoggerService
  ) {
    this.logger = logger;
    
    try {
      // ‚úÖ VALIDATION DES PARAM√àTRES
      this.validateConstructorParams();
      
      // INITIALISATION DU CONTENU
      this.content = section.lines.join('\n');
      
      // D√âMARRAGE DE L'INITIALISATION avec gestion d'erreurs
      this.initializeFrame();
      
      this.logger.info('‚úÖ MarkdownFrame initialis√© avec succ√®s', {
        sectionName: section.name,
        contentLength: this.content.length
      });
      
    } catch (error) {
      this.logger.error('‚ùå Erreur critique lors de l\'initialisation de MarkdownFrame', error);
      this.initializeErrorState();
    }
  }

  /**
   * ‚úÖ NOUVEAU : Validation des param√®tres du constructeur
   */
  private validateConstructorParams(): void {
    if (!this.app) {
      throw new Error('App Obsidian requis');
    }
    if (!this.container) {
      throw new Error('Container DOM requis');
    }
    if (!this.file) {
      throw new Error('Fichier TFile requis');
    }
    if (!this.section) {
      throw new Error('Section FileSection requise');
    }
    if (!this.onChange || typeof this.onChange !== 'function') {
      throw new Error('Callback onChange requis');
    }
    if (!this.logger) {
      throw new Error('Logger requis');
    }
  }

  /**
   * ‚úÖ NOUVEAU : Initialise un √©tat d'erreur de base
   */
  private initializeErrorState(): void {
    try {
      this.isInErrorState = true;
      this.container.empty();
      
      const errorDiv = this.container.createDiv('markdown-frame-error');
      errorDiv.innerHTML = `
        <div style="
          color: var(--text-error);
          background: var(--background-secondary);
          border: 1px solid var(--background-modifier-border);
          border-radius: 4px;
          padding: 1rem;
          text-align: center;
        ">
          <h4>‚ö†Ô∏è Erreur de composant</h4>
          <p>Impossible d'initialiser cette section.</p>
          <button onclick="location.reload()" style="
            background: var(--interactive-accent);
            color: var(--text-on-accent);
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
          ">
            üîÑ Recharger
          </button>
        </div>
      `;
      
    } catch (fallbackError) {
      this.logger.error('‚ùå Erreur critique dans initializeErrorState', fallbackError);
      // Dernier recours : affichage texte simple
      this.container.textContent = '‚ö†Ô∏è Erreur critique - Veuillez recharger la page';
    }
  }

  /**
   * Initialise compl√®tement l'interface du composant avec gestion d'erreurs
   */
  private initializeFrame(): void {
    try {
      this.setupContainer();
      this.createPreviewContainer();
      this.createEditorContainer();
      this.showPreview();
      
    } catch (error) {
      this.logger.error('‚ùå Erreur lors de l\'initialisation de la frame', error);
      this.initializeErrorState();
    }
  }

  /**
   * Configure le conteneur principal du composant
   */
  private setupContainer(): void {
    try {
      // NETTOYAGE PR√âALABLE
      this.container.empty();
      
      // CONFIGURATION CSS
      this.container.style.cssText = `
        width: 100%;
        height: 100%;
        position: relative;
        overflow: hidden;
      `;
      
    } catch (error) {
      this.logger.error('‚ùå Erreur setupContainer', error);
      throw error; // Remonte l'erreur pour gestion de niveau sup√©rieur
    }
  }

  // ===========================================================================
  // CR√âATION DES INTERFACES PREVIEW ET √âDITION
  // ===========================================================================

  /**
   * Cr√©e et configure le conteneur de preview (affichage rendu)
   */
  private createPreviewContainer(): void {
    try {
      // CR√âATION DE L'√âL√âMENT
      this.previewContainer = this.container.createDiv('markdown-preview');
      
      // CONFIGURATION CSS
      this.previewContainer.style.cssText = `
        width: 100%;
        height: 100%;
        overflow: auto;
        padding: 0.5rem;
        cursor: text;
        box-sizing: border-box;
      `;
      
      // RENDU INITIAL DU CONTENU
      this.renderContent();
      
      // CONFIGURATION DES √âV√âNEMENTS
      this.setupPreviewEvents();
      
    } catch (error) {
      this.logger.error('‚ùå Erreur createPreviewContainer', error);
      throw error;
    }
  }

  /**
   * Cr√©e et configure le conteneur d'√©dition (textarea)
   */
  private createEditorContainer(): void {
    try {
      // CR√âATION DU CONTENEUR
      this.editorContainer = this.container.createDiv('markdown-editor');
      this.editorContainer.style.cssText = `
        width: 100%;
        height: 100%;
        display: none;
        box-sizing: border-box;
      `;

      // CR√âATION DU TEXTAREA
      this.textArea = this.editorContainer.createEl('textarea');
      this.textArea.style.cssText = `
        width: 100%;
        height: 100%;
        border: none;
        outline: none;
        resize: none;
        font-family: var(--font-text);
        font-size: var(--font-size-normal);
        background: transparent;
        color: var(--text-normal);
        padding: 0.5rem;
        box-sizing: border-box;
        line-height: 1.6;
      `;

      // INITIALISATION DU CONTENU
      this.textArea.value = this.content;
      
      // CONFIGURATION DES √âV√âNEMENTS
      this.setupEditorEvents();
      
    } catch (error) {
      this.logger.error('‚ùå Erreur createEditorContainer', error);
      throw error;
    }
  }

  // ===========================================================================
  // MOTEUR DE RENDU MARKDOWN AVEC GESTION D'ERREURS ROBUSTE
  // ===========================================================================

  /**
   * ‚úÖ CORRECTION BUG #4 : Rend le contenu markdown avec gestion d'erreurs compl√®te
   */
  private async renderContent(): Promise<void> {
    // ‚úÖ PROTECTION CONTRE LES APPELS MULTIPLES
    if (this.renderAttempts >= this.MAX_RENDER_ATTEMPTS) {
      this.logger.warn('üö´ Nombre maximum de tentatives de rendu atteint', {
        attempts: this.renderAttempts,
        sectionName: this.section.name
      });
      this.renderPermanentFallback();
      return;
    }

    this.renderAttempts++;

    try {
      // ‚úÖ VALIDATION PR√âALABLE
      this.validateRenderState();

      // NETTOYAGE PR√âALABLE
      this.previewContainer.empty();
      
      // CAS SP√âCIAL : CONTENU VIDE
      if (!this.content.trim()) {
        this.renderEmptyState();
        this.resetRenderAttempts();
        return;
      }

      // ‚úÖ TENTATIVE DE RENDU AVEC LE MOTEUR OBSIDIAN
      await this.attemptObsidianRender();
      
      // ‚úÖ SUCC√àS : Reset du compteur d'erreurs
      this.resetRenderAttempts();
      this.isInErrorState = false;
      
      this.logger.info('‚úÖ Contenu rendu avec succ√®s', {
        engine: 'obsidian',
        contentLength: this.content.length,
        attempt: this.renderAttempts
      });
      
    } catch (error) {
      this.logger.error('‚ùå Erreur lors du rendu du contenu', {
        error: error.message,
        attempt: this.renderAttempts,
        sectionName: this.section.name,
        contentPreview: this.content.substring(0, 100) + '...'
      });

      // ‚úÖ FALLBACK INTELLIGENT SELON LE TYPE D'ERREUR
      await this.handleRenderError(error);
    }
  }

  /**
   * ‚úÖ NOUVEAU : Validation de l'√©tat avant rendu
   */
  private validateRenderState(): void {
    if (!this.previewContainer) {
      throw new Error('previewContainer non initialis√©');
    }
    if (this.content === null || this.content === undefined) {
      throw new Error('Contenu invalide');
    }
    if (!this.file || !this.file.path) {
      throw new Error('Fichier invalide');
    }
  }

  /**
   * ‚úÖ NOUVEAU : Tentative de rendu avec le moteur Obsidian
   */
  private async attemptObsidianRender(): Promise<void> {
    try {
      // ‚úÖ IMPORT DYNAMIQUE S√âCURIS√â
      const obsidianModules = await this.safeRequireObsidian();
      
      if (!obsidianModules) {
        throw new Error('Modules Obsidian non disponibles');
      }

      const { MarkdownRenderer, Component } = obsidianModules;
      const component = new Component();
      
      // ‚úÖ RENDU OFFICIEL OBSIDIAN avec timeout
      await Promise.race([
        MarkdownRenderer.renderMarkdown(
          this.content,
          this.previewContainer,
          this.file.path,
          component
        ),
        this.createTimeoutPromise(5000) // Timeout de 5 secondes
      ]);
      
      // POST-TRAITEMENT pour interactions
      this.setupInteractions();
      
    } catch (error) {
      // Enrichir l'erreur avec du contexte
      throw new Error(`Rendu Obsidian √©chou√©: ${error.message}`);
    }
  }

  /**
   * ‚úÖ NOUVEAU : Import s√©curis√© des modules Obsidian
   */
  private async safeRequireObsidian(): Promise<any> {
    try {
      return require('obsidian');
    } catch (error) {
      this.logger.warn('‚ö†Ô∏è Modules Obsidian non disponibles via require', error);
      
      // ‚úÖ FALLBACK : Tentative d'acc√®s via l'app
      if (this.app && (this.app as any).MarkdownRenderer) {
        return {
          MarkdownRenderer: (this.app as any).MarkdownRenderer,
          Component: (this.app as any).Component || class Component {}
        };
      }
      
      return null;
    }
  }

  /**
   * ‚úÖ NOUVEAU : Cr√©e une promesse de timeout
   */
  private createTimeoutPromise(ms: number): Promise<never> {
    return new Promise((_, reject) => {
      setTimeout(() => reject(new Error(`Timeout apr√®s ${ms}ms`)), ms);
    });
  }

  /**
   * ‚úÖ NOUVEAU : Gestion intelligente des erreurs de rendu
   */
  private async handleRenderError(error: Error): Promise<void> {
    const errorMessage = error.message.toLowerCase();
    
    // ‚úÖ STRAT√âGIE DE FALLBACK SELON LE TYPE D'ERREUR
    if (errorMessage.includes('timeout')) {
      this.logger.warn('‚è±Ô∏è Timeout de rendu - Passage en mode simple');
      this.renderSimpleFallback();
      
    } else if (errorMessage.includes('module') || errorMessage.includes('require')) {
      this.logger.warn('üì¶ Erreur de module - Passage en rendu de base');
      this.renderBasicMarkdown();
      
    } else if (this.renderAttempts < this.MAX_RENDER_ATTEMPTS) {
      this.logger.warn('üîÑ Nouvelle tentative de rendu dans 1 seconde');
      setTimeout(() => this.renderContent(), 1000);
      
    } else {
      this.logger.error('üí• √âchec d√©finitif du rendu - Mode texte brut');
      this.renderPermanentFallback();
    }
  }

  /**
   * ‚úÖ NOUVEAU : Fallback simple avec markdown de base
   */
  private renderSimpleFallback(): void {
    try {
      this.previewContainer.empty();
      this.previewContainer.innerHTML = this.renderSimpleMarkdown(this.content);
      
      // Ajouter un indicateur de mode fallback
      const indicator = this.previewContainer.createDiv('fallback-indicator');
      indicator.style.cssText = `
        position: absolute;
        top: 4px;
        right: 4px;
        background: var(--background-modifier-warning);
        color: var(--text-warning);
        padding: 2px 6px;
        border-radius: 3px;
        font-size: 0.7em;
        opacity: 0.7;
      `;
      indicator.textContent = '‚ö†Ô∏è Mode simplifi√©';
      
    } catch (error) {
      this.logger.error('‚ùå Erreur dans renderSimpleFallback', error);
      this.renderPermanentFallback();
    }
  }

  /**
   * ‚úÖ NOUVEAU : Fallback avec markdown basique
   */
  private renderBasicMarkdown(): void {
    try {
      this.previewContainer.empty();
      
      // Rendu tr√®s basique ligne par ligne
      const lines = this.content.split('\n');
      for (const line of lines) {
        const lineEl = this.previewContainer.createDiv('basic-line');
        lineEl.style.marginBottom = '0.5em';
        lineEl.textContent = line || ' '; // Pr√©server les lignes vides
      }
      
    } catch (error) {
      this.logger.error('‚ùå Erreur dans renderBasicMarkdown', error);
      this.renderPermanentFallback();
    }
  }

  /**
   * ‚úÖ NOUVEAU : Fallback permanent en cas d'√©chec total
   */
  private renderPermanentFallback(): void {
    try {
      this.isInErrorState = true;
      this.previewContainer.empty();
      
      const errorContainer = this.previewContainer.createDiv('permanent-fallback');
      errorContainer.innerHTML = `
        <div style="
          color: var(--text-error);
          background: var(--background-secondary);
          border: 1px dashed var(--background-modifier-border);
          border-radius: 4px;
          padding: 1rem;
          margin-bottom: 1rem;
        ">
          <div style="display: flex; align-items: center; margin-bottom: 0.5rem;">
            <span style="margin-right: 0.5rem;">‚ö†Ô∏è</span>
            <strong>Erreur de rendu</strong>
          </div>
          <p style="margin: 0; opacity: 0.8;">
            Affichage du contenu en mode texte brut. 
            <button onclick="location.reload()" style="
              background: none; 
              border: none; 
              color: var(--text-accent); 
              text-decoration: underline; 
              cursor: pointer;
            ">Recharger</button>
          </p>
        </div>
      `;
      
      // Afficher le contenu en texte brut
      const contentEl = errorContainer.createEl('pre');
      contentEl.style.cssText = `
        white-space: pre-wrap;
        font-family: var(--font-text);
        font-size: var(--font-size-normal);
        color: var(--text-normal);
        background: var(--background-primary);
        padding: 1rem;
        border-radius: 4px;
        overflow: auto;
      `;
      contentEl.textContent = this.content;
      
    } catch (finalError) {
      this.logger.error('‚ùå Erreur critique dans renderPermanentFallback', finalError);
      // Dernier recours absolu
      this.previewContainer.textContent = `‚ö†Ô∏è ERREUR CRITIQUE\n\n${this.content}`;
    }
  }

  /**
   * ‚úÖ AM√âLIORATION : Reset s√©curis√© du compteur de tentatives
   */
  private resetRenderAttempts(): void {
    this.renderAttempts = 0;
  }

  /**
   * Configure les interactions avec les √©l√©ments rendus (avec gestion d'erreurs)
   */
  private setupInteractions(): void {
    try {
      // INTERACTION 1 : T√ÇCHES COCHABLES
      const taskCheckboxes = this.previewContainer.querySelectorAll('input[type="checkbox"].task-list-item-checkbox');
      taskCheckboxes.forEach(checkbox => {
        try {
          checkbox.addEventListener('change', (event) => {
            const target = event.target as HTMLInputElement;
            this.handleTaskToggle(target);
          });
        } catch (error) {
          this.logger.warn('‚ö†Ô∏è Erreur configuration t√¢che', error);
        }
      });

      // INTERACTION 2 : LIENS INTERNES OBSIDIAN
      const internalLinks = this.previewContainer.querySelectorAll('a.internal-link');
      internalLinks.forEach(link => {
        try {
          link.addEventListener('click', (event) => {
            event.preventDefault();
            
            const href = link.getAttribute('data-href') || link.getAttribute('href');
            if (href && this.app.workspace) {
              this.app.workspace.openLinkText(href, this.file.path);
            }
          });
        } catch (error) {
          this.logger.warn('‚ö†Ô∏è Erreur configuration lien', error);
        }
      });

      // INTERACTION 3 : PR√âVENTION GLOBALE
      const interactiveElements = this.previewContainer.querySelectorAll('input, button, a, .dataview, .task-list-item');
      interactiveElements.forEach(element => {
        try {
          element.addEventListener('click', (event) => {
            event.stopPropagation();
          });
        } catch (error) {
          this.logger.warn('‚ö†Ô∏è Erreur configuration interaction', error);
        }
      });
      
    } catch (error) {
      this.logger.error('‚ùå Erreur globale setupInteractions', error);
      // Ne pas faire √©chouer le rendu pour les interactions
    }
  }

  /**
   * G√®re le cochage/d√©cochage des t√¢ches (avec validation)
   */
  private handleTaskToggle(checkbox: HTMLInputElement): void {
    try {
      // ‚úÖ VALIDATION
      if (!checkbox) {
        throw new Error('Checkbox invalide');
      }

      const isChecked = checkbox.checked;
      const listItem = checkbox.closest('li');
      
      if (!listItem) {
        throw new Error('√âl√©ment de liste parent non trouv√©');
      }

      // EXTRACTION DU TEXTE DE LA T√ÇCHE
      const taskText = this.getTaskTextFromListItem(listItem);
      if (!taskText) {
        throw new Error('Texte de t√¢che non trouv√©');
      }

      // MISE √Ä JOUR DU MARKDOWN
      const lines = this.content.split('\n');
      let updated = false;

      for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        
        if (this.isTaskLine(line) && this.getTaskTextFromLine(line) === taskText) {
          const newCheckState = isChecked ? '[x]' : '[ ]';
          lines[i] = line.replace(/\[[ x]\]/, newCheckState);
          updated = true;
          break;
        }
      }

      if (updated) {
        this.content = lines.join('\n');
        
        // SAUVEGARDE DIFF√âR√âE
        clearTimeout(this.changeTimeout);
        this.changeTimeout = setTimeout(() => {
          try {
            this.onChange(this.content);
          } catch (error) {
            this.logger.error('‚ùå Erreur callback onChange', error);
          }
        }, 500);
        
        this.logger.info(`‚úÖ T√¢che ${isChecked ? 'coch√©e' : 'd√©coch√©e'}`, { taskText });
      }
      
    } catch (error) {
      this.logger.error('‚ùå Erreur handleTaskToggle', error);
      // Restaurer l'√©tat pr√©c√©dent de la checkbox
      checkbox.checked = !checkbox.checked;
    }
  }

  /**
   * Extrait le texte d'une t√¢che depuis un √©l√©ment de liste DOM
   */
  private getTaskTextFromListItem(listItem: HTMLElement): string | null {
    try {
      const textNode = listItem.childNodes[listItem.childNodes.length - 1];
      return textNode?.textContent?.trim() || null;
    } catch (error) {
      this.logger.warn('‚ö†Ô∏è Erreur extraction texte t√¢che', error);
      return null;
    }
  }

  /**
   * V√©rifie si une ligne markdown est une t√¢che
   */
  private isTaskLine(line: string): boolean {
    try {
      return /^[\s]*[-*+] \[[ x]\]/.test(line);
    } catch (error) {
      this.logger.warn('‚ö†Ô∏è Erreur v√©rification ligne t√¢che', error);
      return false;
    }
  }

  /**
   * Extrait le texte d'une t√¢che depuis une ligne markdown
   */
  private getTaskTextFromLine(line: string): string {
    try {
      const match = line.match(/^[\s]*[-*+] \[[ x]\] (.+)$/);
      return match ? match[1].trim() : '';
    } catch (error) {
      this.logger.warn('‚ö†Ô∏è Erreur extraction texte ligne', error);
      return '';
    }
  }

  /**
   * Moteur de rendu markdown simple (fallback) - Version s√©curis√©e
   */
  private renderSimpleMarkdown(content: string): string {
    try {
      let html = content;
      
      // TRANSFORMATION 1 : Liens internes [[...]]
      html = html.replace(/\[\[([^\]]+)\]\]/g, '<span class="internal-link">$1</span>');
      
      // TRANSFORMATION 2 : Gras **text**
      html = html.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
      
      // TRANSFORMATION 3 : Italique *text*
      html = html.replace(/\*(.*?)\*/g, '<em>$1</em>');
      
      // TRANSFORMATION 4 : Listes simples
      html = html.replace(/^[\s]*[-*+] (.+)$/gm, '<li>$1</li>');
      
      // TRANSFORMATION 5 : Regroupement des listes
      const lines = html.split('\n');
      let result = '';
      let inList = false;
      
      for (const line of lines) {
        const trimmed = line.trim();
        
        if (trimmed.includes('<li>')) {
          if (!inList) {
            result += '<ul>\n';
            inList = true;
          }
          result += line + '\n';
        } else {
          if (inList) {
            result += '</ul>\n';
            inList = false;
          }
          
          if (trimmed === '') {
            result += '<br>\n';
          } else {
            result += `<p>${trimmed}</p>\n`;
          }
        }
      }
      
      if (inList) {
        result += '</ul>\n';
      }
      
      return result;
      
    } catch (error) {
      this.logger.error('‚ùå Erreur renderSimpleMarkdown', error);
      // Fallback ultime : retourner le contenu en HTML √©chapp√©
      return `<pre>${content.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</pre>`;
    }
  }

  /**
   * Affiche un √©tat vide engageant pour inciter √† l'√©dition
   */
  private renderEmptyState(): void {
    try {
      const placeholder = this.previewContainer.createDiv('empty-placeholder');
      placeholder.style.cssText = `
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100%;
        min-height: 80px;
        color: var(--text-muted);
        font-style: italic;
        cursor: text;
      `;
      placeholder.textContent = 'Cliquez pour commencer √† √©crire...';
      
    } catch (error) {
      this.logger.error('‚ùå Erreur renderEmptyState', error);
      // Fallback simple
      this.previewContainer.textContent = 'Cliquez pour √©crire...';
    }
  }

  // ===========================================================================
  // GESTION DES √âV√âNEMENTS ET INTERACTIONS (avec protection d'erreurs)
  // ===========================================================================

  /**
   * Configure les √©v√©nements du mode preview avec gestion d'erreurs
   */
  private setupPreviewEvents(): void {
    try {
      this.previewContainer.addEventListener('click', (event) => {
        try {
          const target = event.target as HTMLElement;
          
          // FILTRAGE : Ne pas √©diter si clic sur √©l√©ment interactif
          if (this.isInteractiveElement(target)) {
            this.logger.info('üéØ Clic sur √©l√©ment interactif, pas de mode √©dition');
            return;
          }
          
          this.logger.info('üñ±Ô∏è Clic sur preview ‚Üí mode √©dition');
          this.enterEditMode();
          
        } catch (error) {
          this.logger.error('‚ùå Erreur dans gestionnaire clic preview', error);
        }
      });
      
    } catch (error) {
      this.logger.error('‚ùå Erreur setupPreviewEvents', error);
    }
  }

  /**
   * D√©tecte si un √©l√©ment est interactif avec validation
   */
  private isInteractiveElement(element: HTMLElement): boolean {
    try {
      if (!element) return false;
      
      let current: HTMLElement | null = element;
      
      // REMONT√âE DE LA HI√âRARCHIE DOM
      while (current && current !== this.previewContainer) {
        const tagName = current.tagName?.toLowerCase() || '';
        const classList = Array.from(current.classList || []);
        
        // V√âRIFICATION 1 : √âl√©ments HTML interactifs
        if (['input', 'button', 'a', 'select', 'textarea'].includes(tagName)) {
          return true;
        }
        
        // V√âRIFICATION 2 : Classes sp√©ciales d'Obsidian et plugins
        const interactiveClasses = [
          'internal-link',
          'external-link',
          'tag',
          'dataview',
          'task-list-item-checkbox',
          'task-list-item',
          'cm-hmd-codeblock',
          'block-language-dataview',
          'block-language-tasks'
        ];
        
        if (interactiveClasses.some(cls => classList.includes(cls))) {
          return true;
        }
        
        // V√âRIFICATION 3 : Attributs sp√©ciaux
        if (current.hasAttribute('href') || 
            current.hasAttribute('data-href') || 
            current.hasAttribute('data-task') ||
            current.hasAttribute('contenteditable')) {
          return true;
        }
        
        // REMONT√âE AU PARENT
        current = current.parentElement;
      }
      
      return false;
      
    } catch (error) {
      this.logger.warn('‚ö†Ô∏è Erreur isInteractiveElement', error);
      return false; // En cas d'erreur, consid√©rer comme non-interactif
    }
  }

  /**
   * Configure les √©v√©nements du mode √©dition avec gestion d'erreurs
   */
  private setupEditorEvents(): void {
    try {
      // √âV√âNEMENT 1 : Modification du contenu
      this.textArea.addEventListener('input', () => {
        try {
          this.content = this.textArea.value;
          
          // SAUVEGARDE DIFF√âR√âE (DEBOUNCING)
          clearTimeout(this.changeTimeout);
          this.changeTimeout = setTimeout(() => {
            try {
              this.onChange(this.content);
            } catch (error) {
              this.logger.error('‚ùå Erreur callback onChange dans input', error);
            }
          }, 1000);
          
        } catch (error) {
          this.logger.error('‚ùå Erreur dans gestionnaire input', error);
        }
      });

      // √âV√âNEMENT 2 : Perte de focus (sortie d'√©dition)
      this.textArea.addEventListener('blur', () => {
        try {
          this.logger.info('üìù Blur sur textarea ‚Üí mode preview');
          this.exitEditMode();
        } catch (error) {
          this.logger.error('‚ùå Erreur dans gestionnaire blur', error);
        }
      });

      // √âV√âNEMENT 3 : Raccourcis clavier
      this.textArea.addEventListener('keydown', (event) => {
        try {
          if (event.key === 'Escape') {
            this.logger.info('‚å®Ô∏è Escape ‚Üí mode preview');
            this.exitEditMode();
          }
        } catch (error) {
          this.logger.error('‚ùå Erreur dans gestionnaire keydown', error);
        }
      });
      
    } catch (error) {
      this.logger.error('‚ùå Erreur setupEditorEvents', error);
    }
  }

  // ===========================================================================
  // GESTION DES MODES (PREVIEW ‚Üî √âDITION) avec recovery
  // ===========================================================================

  /**
   * Bascule vers le mode √©dition avec gestion d'erreurs
   */
  private enterEditMode(): void {
    try {
      // ‚úÖ VALIDATION DE L'√âTAT
      if (this.isInErrorState) {
        this.logger.warn('‚ö†Ô∏è Impossible de passer en mode √©dition - √©tat d\'erreur');
        return;
      }

      if (!this.textArea || !this.editorContainer) {
        throw new Error('Composants d\'√©dition non initialis√©s');
      }

      this.isEditing = true;
      this.previewContainer.style.display = 'none';
      this.editorContainer.style.display = 'block';
      this.textArea.value = this.content;
      
      // ‚úÖ FOCUS S√âCURIS√â
      setTimeout(() => {
        try {
          if (this.textArea && this.isEditing) {
            this.textArea.focus();
          }
        } catch (error) {
          this.logger.warn('‚ö†Ô∏è Erreur focus textarea', error);
        }
      }, 10);
      
      this.logger.info('‚úèÔ∏è Mode √©dition activ√©');
      
    } catch (error) {
      this.logger.error('‚ùå Erreur enterEditMode', error);
      // Recovery : forcer le retour en mode preview
      this.forcePreviewMode();
    }
  }

  /**
   * Bascule vers le mode preview avec gestion d'erreurs
   */
  private exitEditMode(): void {
    try {
      if (!this.isEditing) return;
      
      // ‚úÖ VALIDATION DE L'√âTAT
      if (!this.previewContainer || !this.editorContainer) {
        throw new Error('Composants de preview non initialis√©s');
      }
      
      this.isEditing = false;
      this.content = this.textArea.value;
      this.editorContainer.style.display = 'none';
      this.previewContainer.style.display = 'block';
      
      // ‚úÖ RE-RENDU S√âCURIS√â
      this.renderContent().catch(error => {
        this.logger.error('‚ùå Erreur re-rendu apr√®s √©dition', error);
        // En cas d'erreur, garder l'ancien contenu visible
      });
      
      this.logger.info('üëÅÔ∏è Mode preview activ√©');
      
    } catch (error) {
      this.logger.error('‚ùå Erreur exitEditMode', error);
      this.forcePreviewMode();
    }
  }

  /**
   * ‚úÖ NOUVEAU : Force le mode preview en cas d'erreur
   */
  private forcePreviewMode(): void {
    try {
      this.isEditing = false;
      
      if (this.editorContainer) {
        this.editorContainer.style.display = 'none';
      }
      
      if (this.previewContainer) {
        this.previewContainer.style.display = 'block';
      }
      
      this.logger.info('üîß Mode preview forc√© apr√®s erreur');
      
    } catch (error) {
      this.logger.error('‚ùå Erreur critique dans forcePreviewMode', error);
      // Ultime recours : reload complet
      this.initializeErrorState();
    }
  }

  /**
   * Force l'affichage du mode preview
   */
  private showPreview(): void {
    try {
      if (this.previewContainer && this.editorContainer) {
        this.previewContainer.style.display = 'block';
        this.editorContainer.style.display = 'none';
        this.isEditing = false;
      }
    } catch (error) {
      this.logger.error('‚ùå Erreur showPreview', error);
    }
  }

  // ===========================================================================
  // API PUBLIQUE DU COMPOSANT (avec validation)
  // ===========================================================================

  /**
   * Met √† jour le contenu de la section avec validation
   */
  updateContent(section: FileSection): void {
    try {
      // ‚úÖ VALIDATION
      if (!section) {
        throw new Error('Section requise pour updateContent');
      }

      if (!section.lines || !Array.isArray(section.lines)) {
        throw new Error('Section.lines requis et doit √™tre un tableau');
      }

      this.section = section;
      this.content = section.lines.join('\n');
      
      if (this.isEditing) {
        // MODE √âDITION : Mettre √† jour le textarea
        if (this.textArea) {
          this.textArea.value = this.content;
        }
      } else {
        // MODE PREVIEW : Re-rendre le contenu
        this.renderContent().catch(error => {
          this.logger.error('‚ùå Erreur re-rendu dans updateContent', error);
        });
      }
      
      this.logger.info('‚úÖ Contenu mis √† jour', {
        sectionName: section.name,
        contentLength: this.content.length
      });
      
    } catch (error) {
      this.logger.error('‚ùå Erreur updateContent', error);
    }
  }

  /**
   * Obtient le contenu actuel de la section de mani√®re s√©curis√©e
   */
  getContent(): string {
    try {
      if (this.isEditing && this.textArea) {
        return this.textArea.value;
      }
      return this.content || '';
      
    } catch (error) {
      this.logger.error('‚ùå Erreur getContent', error);
      return this.content || '';
    }
  }

  /**
   * ‚úÖ NOUVEAU : Obtient l'√©tat du composant pour debugging
   */
  getState(): any {
    try {
      return {
        isEditing: this.isEditing,
        isInErrorState: this.isInErrorState,
        renderAttempts: this.renderAttempts,
        contentLength: this.content?.length || 0,
        hasPreviewContainer: !!this.previewContainer,
        hasEditorContainer: !!this.editorContainer,
        hasTextArea: !!this.textArea,
        sectionName: this.section?.name || 'unknown'
      };
    } catch (error) {
      this.logger.error('‚ùå Erreur getState', error);
      return { error: 'Unable to get state' };
    }
  }

  /**
   * ‚úÖ NOUVEAU : Tente une r√©cup√©ration en cas d'√©tat incoh√©rent
   */
  recover(): void {
    try {
      this.logger.info('üîß Tentative de r√©cup√©ration du composant');
      
      // Reset des √©tats
      this.isInErrorState = false;
      this.renderAttempts = 0;
      
      // Nettoyage et r√©initialisation
      this.container.empty();
      this.initializeFrame();
      
      this.logger.info('‚úÖ R√©cup√©ration r√©ussie');
      
    } catch (error) {
      this.logger.error('‚ùå √âchec de la r√©cup√©ration', error);
      this.initializeErrorState();
    }
  }

  /**
   * D√©truit proprement le composant avec nettoyage complet
   */
  destroy(): void {
    try {
      // ‚úÖ NETTOYAGE DES TIMERS
      if (this.changeTimeout) {
        clearTimeout(this.changeTimeout);
        this.changeTimeout = null;
      }

      // ‚úÖ NETTOYAGE DES √âL√âMENTS DOM
      if (this.container) {
        this.container.empty();
      }

      // ‚úÖ R√âINITIALISATION DES R√âF√âRENCES
      this.previewContainer = null as any;
      this.editorContainer = null as any;
      this.textArea = null as any;
      
      // ‚úÖ RESET DES √âTATS
      this.isEditing = false;
      this.isInErrorState = false;
      this.renderAttempts = 0;
      
      this.logger.info('üóëÔ∏è MarkdownFrame d√©truite proprement');
      
    } catch (error) {
      this.logger.error('‚ùå Erreur lors de la destruction', error);
      // Nettoyage forc√© m√™me en cas d'erreur
      try {
        if (this.container) {
          this.container.innerHTML = '';
        }
      } catch (finalError) {
        console.error('Erreur critique destruction MarkdownFrame:', finalError);
      }
    }
  }
}